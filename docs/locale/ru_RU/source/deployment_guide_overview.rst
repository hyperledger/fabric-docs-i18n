Развертывание действующей сети
==============================

В данном руководстве мы даем принципиальный обзор порядка действий для установки компонентов для запуска действующей
HLF-сети, описываем лучшие примеры реализации и несколько (из многих) важных для процесса соображений.
Просим заметить, что мы будем рассказывать о "запуске сети" с точки зрения того, как если бы это делал один человек.
В реальности же, напротив, сеть в действии обычно запускается коллективным усилием нескольких индивидуальных участников (как пример: несколько банков запускают и устанавливают свои собственные компоненты для запуска сети).

Разворачивание сети HLF является сложным в исполнении и требует понимания инфраструктуры открытых ключей и управления распределенными системами. Такой уровень знаний для разработчиков приложений или смарт-контрактов, конечно, не требуется, но, если вы хотите разрабатывать эффективные смарт-контракты и приложения, вам это может понадобиться.

Если вы хотите лишь протестировать свой чейнкод, смарт-контракт или приложение в среде разработки, в таком случае
обратитесь к разделу: :doc:`тестовая_сеть`. Тестовая сеть построена из двух организаций (в каждой организации по одному равноправному узлу) и единой службы упорядочения, владеющей единственным узлом упорядочения. **Эта тестовая сеть не может и не должна служить образцом для развертывания компонентов рабочей сети, поскольку была построена на принципах и предположениях, которых в рабочей сети не бывает.**

В этом руководстве мы опишем последовательность установки компонентов и запуска функционирующей сети:

- :ref:`dg-step-one-decide-on-your-network-configuration`
- :ref:`dg-step-two-set-up-a-cluster-for-your-resources`
- :ref:`dg-step-three-set-up-your-cas`
- :ref:`dg-step-four-use-the-ca-to-create-identities-and-msps`
- :ref:`dg-step-five-deploy-nodes`
   - :ref:`dg-create-a-peer`
   - :ref:`dg-create-an-ordering-node`

.. _dg-step-one-decide-on-your-network-configuration:

Этап первый: Определитесь с конфигурацией сети
----------------------------------------------

Структура блокчейн-сети однозначно определяется кейсом применения. Основания бизнес-логики могут быть разными в каждом случае, здесь же мы рассмотрим несколько сценариев как пример.

В рабочей среде, в отличие от тестовой конфигурации или концептуальной модели, первоочередную важность имеют факторы безопасности, оптимального управления ресурсами и высокой надежности. Каждому предстоит решить: сколько узлов необходимо для обеспечения высокой надежности, в каких ЦОДах стоит их разместить, чтобы обеспечить план аварийного восстановления и одновременно - соблюсти требования к региону хранения данных; каким именно образом будет обеспечена сохранность приватных ключей и встроенных процедур верификации "roots-of-trust"?

В дополнение к вышесказанному, приведем примеры решений, которые необходимо принять до установки компонентов:

* **Конфигурация удостоверяющего центра**.
  После принятия решений о числе равноправных узлов (общее число узлов, сколько узлов на каждый канал, и т.д.) и службе упорядочения (сколько узлов выделить на службу и кому они должны принадлежать), вам придется также определить, как для вашей организации должны быть развернуты удостоверяющие центры (УЦ). Рабочие сети должны использовать протокол безопасности транспортного уровня (TLS), что потребует установки УЦ TLS для генерации сертификатов TLS. Этот УЦ должен быть учрежден до развертывания удостоверяющего центра, регистрирующего сертификаты. Подробнее поговорим об этом в разделе: :ref:`dg-step-three-set-up-your-cas`.

* **Использовать ли внутриорганизационное деление?**
  Для некоторых организаций может оказаться необходимым создать подразделения внутри организации - организационные единицы, чтобы отразить разделение между некоторыми сущностями и службами членства, созданными одним и тем же удостоверяющим центром.

* **Тип БД.**
  Некоторые каналы в сети могут требовать данные в формате, пригодном для чтения в виде :doc:`couchdb_as_state_database`, в том время как для других из соображений скорости исполнения, будет достаточно использовать  LevelDB. Отметим, что из-за некоторых отличий CouchDB и LevelDB, все равноправные узлы сети одновременно могут только один выбранный тип базы данных.

* **Каналы и приватная информация.**
  Для некоторых сетей использование :doc:`каналов` может оказаться наилучшим вариантом обеспечения конфиденциальности и изолированности для некоторых конкретных транзакций. В других же сетях из соображений соблюдения приватности может больше подойти единый канал с использованием :doc:`private-data/private-data`.

* **Оркестровка контейнеров.**
  У разных пользователей могут быть разные мнения в оркестровке контейнеров - одни могут создавать отдельные контейнеры под процессы своих узлов, журналирование узлов, CouchDB, обмен по протоколу удаленного вызова процедур gRPC, и под чейнкод, в то время, как другие могут совмещать некоторые из этих процессов в одном контейнере.

* **Способы запуска чейнкода.**
  Теперь у пользователей есть варианты запуска чейнкода как через встроенный "собери-и-запусти" механизм, так и через кастомизированный механизм :doc:`cc_launcher`, и даже через :doc:`cc_service`.

* **Использование сетевых экранов.**
  При запуске рабочей конфигурации, компоненты одной организации могут нуждаться в доступе к компонентам другой организации, из чего вытекает необходимость использования сетевых экранов и сложных сетевых настроек. Например, приложениям, которые используют Fabric SDK, требуется доступ ко всем подписывающим узлам и к службам упорядочения всех каналов. Сходным образом, равноправным узлам требуется доступ к службе упорядочения тех каналов, от которых они получают новые блоки.

Но как бы и где бы ни развертывались ваши компоненты, вы должны обладать глубокими знаниями вашей управляющей системы (такой, как Kubernetes, например), чтобы суметь эффективно управлять вашей сетью. Не менее важно сконструировать структуру сети так, чтобы она соответствовала логике бизнеса и подчинялась применимым государственным законам и правительственным регулирующим нормам для той отрасли, для которой предназначена сеть.

В этом руководстве мы не сможем охватить все шаги реализации и все варианты сетевых конфигураций, но опишем общие принципы и правила, которые стоит иметь в виду.


.. _dg-step-two-set-up-a-cluster-for-your-resources:

Этап второй: Создать кластер для своих ресурсов
---------------------------------------------

Вообще говоря, для Fabric способ поднятия кластера безразличен. Например, можно развернуть и управлять кластером с ноутбука. По ряду причин это нежелательно, но формально Fabric этого не запрещает.

Как только вы можете разворачивать контейнеры, будь то локально (или за сетевым экраном) или в облаке, вы уже можете выстраивать компоненты и соединять их друг с другом. В то же время Kubernetes предоставляет ряд полезных инструментов, благодаря которым он и приобрел популярность как платформа управления контейнерами при запуске и управлении сетями Fabric. Подробнее о Kubernetes см.здесь `the Kubernetes documentation <https://kubernetes.io/docs>`_. В этой секции мы ограничимся описанием бинарных файлов и предоставим руководство к использованию Docker или Kubernetes при запуске.

В любом случае при развертывании компонентов, вам потребуется удостовериться в достаточности ресурсов для того, чтобы компоненты работали безупречно. Объемы будут зависеть от потребностей вашего бизнес-кейса. Если вы присоедините один равноправный узел к нескольким каналам с высокой нагрузкой, то вам потребуется гораздо больше памяти и мощности ЦПУ, чем на один узел, присоединившийся к одному каналу. Как примерная оценка, для равноправного узла требуется выделить втрое больше ресурсов, чем для единичного узла упорядочения (ниже будет показано, что для службы упорядочения рекомендуется использовать не менее трех, а лучше пять узлов). В качестве такой же оценки, удостоверяющий центр потребует в десять раз меньше ресурсов, чем равноправный узел. Следует позаботиться также о том, чтобы добавить дополнительную емкость кластеру (некоторые облачные провайдеры предоставляют доп. емкость хранения), потому что настроить Постоянные Тома или запрос на Постоянный Том вы не сможете, если изначально провайдер не предоставит вам под это емкость хранения.

Развернув модельную сеть и испытав ее под нагрзукой, вам станут виднее ваши потребности в ресурсах.

Управляя своей инфраструктурой
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Точные методы и инструменты управления своим бэк-ендом, конечно, зависят от того, какой у вас бэк-енд, но всё же можно сделать некоторые общие замечания.


* Использование секретных объектов для безопасного хранения важных файлов конфигурации в своем кластере. О "секретах" в Kubernetes см. `Kubernetes secrets <https://kubernetes.io/docs/concepts/configuration/secret/>`_. Также есть возможность использовать модули с усиленной защитой (HSM) или зашифрованные постоянные тома (PV). В том же духе, развернув компоненты Fabric, вы, вероятно, захотите связаться с контейнером в своем собственном бэк-енде, например, используя свой репозиторий в сервисе наподобие Docker Hub. Тогда вам придется записать имя входа как информацию в виде секрета Kubernetes и включить его в YAML file при разворачивании компонентов.
* Соображения о кластерах и размере узлов. Выше, в этапе 2, мы изложили общую канву рассуждений о размерах узлов. Единственным критерием истины в представлении о размере ваших равноправных узлов, узлов упорядочивания и УЦ, может служить лишь ваш конкретный бизнес-кейс и достаточно продолжительный период разработки.
* Как вы решите подключать свои тома. Считается хорошей практикой подключать тома, относящиеся к узлам, вне того места, где развернуты сами узлы. Это позволит ссылаться на эти тома впоследствии (например, при перезапуске узла или контейнера после сбоя) без необходимости перезапуска или воссоздания ваших шифрованных материалов.
* Мониторинг ресурсов. Критически важно утвердить стратегию и метод мониторинга ресурсов, используемых индивидуальными узлами по отдельности и выделенных кластеру в целом. Когда вы будете присоединять свои узлы ко все большему числу каналов, потребуется выделение большей памяти и мощности ЦПУ. Также, убедитесь в том, что вам достаточно емкости хранения для базы данных состояния и блокчейна.

.. _dg-step-three-set-up-your-cas:

Этап третий: Запуск собственных удостоверяющих центров
---------------------------

Удостоверяющий центр это первый по очереди компонент, который нужно развернуть в Fabric, потому что сертификаты для узла должны быть созданы раньше, чем развернут сам узел (и не только сертификат самого узла, но и сертификаты тех, кто имеет право администрирования узла). Использовать УЦ Fabric для создания этих сертификатов не обязательно, но УЦ Fabric также создаст и структуры служб членства, которые требуются для надлежащего определения компонентов и организаций. Если вы решите использовать другой УЦ, то вам потребуется создать папки служб членства самостоятельно.

* Один УЦ (или больше, если будете использовать промежуточные УЦ, подробнее о которых поговорим ниже) используется для генерации сертификатов администратора или организации (процесс называется "регистрация пользователя"), сертификатов службы членства данной организации или сертификатов узлов данной организации. Этот УЦ также генерирует сертификаты для всех дополнительных пользователей. Из-за своей регистрирующей функции этот УЦ иногда называют "регистрирующим УЦ" или "ecert УЦ".
* Другой УЦ генерирует сертификаты для обеспечения безопасного обмена информацией по протоколу безопасности транспортного уровня (TLS). Поэтому его часто называют "TLS CA" (TLS УЦ). Эти сертификаты TLS применяются для предотвращения атак типа "man in the middle". Отметим, что TLS УЦ применяется только для выпуска сертификатов для узлов и могут быть остановлены, когда выпуск завершен. Пользователи как вариант могут использовать или односторонний протокол безопасности транспортного уровня  (клиентский) или двусторонний (клиент и сервер), который еще называют "взаимным". Протокол безопасности транспортного уровня использовать - рекомендуется, и использование этого протокола должно быть описано до развертывания "регистрирующего УЦ" (в файле YAML, описывающем конфигурацию этого УЦ, есть поле для включения TLS), то сначала необходимо развернуть TLS УЦ и использовать его корневой сертфикат для стартовой загрузки регистрационного УЦ. Этот сертификат TLS также будет использован клиентом ``fabric-ca client`` при соединении с регистрирующим УЦ для регистрации идентификаторов пользователей и узлов.

При том, что все не-TLS сертификаты, связанные с организацией, могут быть созданы единственным "корневым" УЦ (т.е. УЦ, который имеет свой собственный "корень доверия"/"root-of-trust") для дополнительной безопасности можно использовать "промежуточные" УЦ, чьи сертификаты созданы корневым УЦ (или другим промежуточным УЦ, в итоге приводящим к корневому УЦ). Использование промежуточных УЦ является удобным способом снизить риск для корневого УЦ, поскольку компрометация корневого УЦ приведет к схлопыванию всей области доверия (сертификаты администраторов, узлов и других УЦ). Будете ли вы использовать промежуточные УЦ - зависит от вашего бизнес-кейса, их использование необязательно. Заметим, что также возможно настроить LDAP (облегченный протокол доступа к каталогам), чтобы управлять идентификаторами в сети Fabric для тех предприятий, у которых уже есть такая реализация и которые не желают усложнять существующую инфраструктуру еще одним уровнем идентификации. Протокол LDAP на деле заранее регистрирует всех членов в каталоге и допускает их к регистрации по заранее заданным критериям допуска.

**Для рабочей сети рекомендуется развернуть хотя бы один УЦ на каждую организацию для целей регистрации и еще один для протокола TLS.** Например, если вы разворачиваете три равноправных узла, связанных с одной организацией и узел упорядочения, тогда вам понадобится по меньшей мере четыре УЦ. Два будут отвечать за организацию работы с равноправными узлами (генерируя сертификаты регистрации и сертификаты протокола безопасности транспортного уровня для узла, администраторов и сообшений, и структуру каталогов службы членства, представляющей организацию) и еще два будут предназначены для упорядочивающей организации. Заметим, что пользователи обычно будут регистрироваться в регистрирующем УЦ, в то время как узлы будут регистрироваться и в регистрирующем УЦ (который будет выдавать сертификаты подписи узлу, которыми он будет идентифицироваться при попытках подписи своих действий) и в УЦ протокола транспортного уровня безопасности (от которого они будут получать сертификаты протокола транспортного уровня безопасности для подтверждения своих сообщений).

За примером настройки УЦ организации, УЦ протокола транспортного уровня безопасности и регистрации идентификатора для администратора, обращайтесь к разделу  `Fabric CA Deployment Guide <https://hyperledger-fabric-ca.readthedocs.io/en/latest/deployguide/ca-deploy.html>`__.  Это руководство использует клиент УЦ Fabric для регистрации идентификаторов, необходимых для настройки УЦ.

.. _dg-step-four-use-the-ca-to-create-identities-and-msps:

Этап четыре: Как использовать УЦ для создания идентификаторов и службы членства (MSP).
---------------------------------------------------

После того, как вы создали свои УЦ, вы можете использовать их для создания сертификатов для идентификаторов и компонентов, связанных с вашей организацией (представленной службой членства). Для каждой организации нужно сделать как минимум следующее:

* **Зарегистрировать идентификатор администратор и создать службу членства**. После того, как вы создадите УЦ, связанный с организацией, его можно использовать для регистрации идентификатора и входа с этим идентификатором. В идентификаторе можно указать атрибуты и свойства принадлежности, такие как "функция" или "администратор" (требуется для администраторов организации). После того, как идентификатор зарегистрирован, с ним можно войти, используя имя пользователя и пароль. УЦ сгенерирует два сертификата для этого идентификатора -- открытый для всех пользователей сети сертификат (называемый signcert или "публичный сертификат") и приватный ключ, который будет храниться в каталоге ``keystore`` и использоваться для подписания действий под данным идентификатором. УЦ также сгенерирует ряд каталогов под названием MSP, в котором будет содержаться открытый сертификат УЦ, выпускающего сертификат, и корень доверия/root-of-trust для УЦ (который может быть тем же самым УЦ). Как считается, этот MSP представляет организацию, связанную с идентификатором администратора. Если, как обычно, администратор организации является одновременно и администратором узла, то в данном случае **вы обязаны создать идентификатор администратора прежде, чем создавать локальный каталог MSP для узла, по той причине, что для создания локального MSP вам потребуется сертификат администратора узла**.

* **Регистрация и вход с идентификаторами узлов**. Ровно так же, как регистрируется и используется для входа идентификатор администратора, так же и идентификатор узла должен быть зарегистрирован и использован для входа у регистрирующего УЦ и у УЦ протокола безопасности транспортного уровня (последний генерирует сертификаты для безопасного обмена сообщениями). Вместо записывания роли "админ" или "пользователь" при регистрации у регистрирующего УЦ, присвойте ему роль "равноправный узел (peer)" или "узел упорядочения (orderer)". Так же, как и для администратора, этому идентификатору можно присвоить атрибуты и свойства принадлежности. Структура каталога MSP для узла называется "локальный MSP", потому что разрешения для идентификаторов действуют только на локальном уровне этого узла. Этот MSP создается при создании идентификатора узла, а используется при стартовой загрузке узла.

Для более общего описания концепций вокруг понятий идентификаторов и разрешений в блокчейн-сети Fabric, см. :doc:`identity/identity` and :doc:`membership/membership`.

Более подробно об использовании УЦ для регистрации и входа с идентификаторамиЮ, включая примеры команд, просим смотреть  `Регистрация и запись идентификаторов удостоверяющим центром <https://hyperledger-fabric-ca.readthedocs.io/en/latest/deployguide/use_CA.html>`_.

.. _dg-step-five-deploy-nodes:

Этап пять: Развертывание узлов
-----------------------

Как только вы собрали все сертификаты и каталоги MSP, до создания узла осталось недолго. Как и было сказано выше, развернуть узлы можно по-разному.

.. _dg-create-a-peer:

Создать равноправный узел
~~~~~~~~~~~~~

Чтобы иметь возможность создать равноправный узел, вам нужно настроить для него файл конфигурации. В Fabric этот файл называется ``core.yaml``. Пример файла  ``core.yaml`` содержится в каталоге sampleconfig в Hyperledger Fabric <https://github.com/hyperledger/fabric/blob/master/sampleconfig/core.yaml>`_.

В этом файле наглядно присутствует целый ряд необходимых или опциональных параметров, которые позволяют настроить корректную работу узла. Например, значение настройки (tuning value) вам в большинстве случаев трогать не понадобится, а вот различные адреса, тип базы данных, которую вы будете использовать, и место расположения каталога MSP для даннного узла - всё это вам придется настроить, указать или определить.

Для тонкой настройки своей конфигурации есть три основных пути.

1. Редактировать файл YAML, сопряженный с бинарными файлами.
2. При развертывании использовать переопределение переменных среды.
3. Указать флаги CLI команд.

Вариант 1 хорош тем, что внесенные вами изменения не теряются при перезапуске узла, но его недостаток состоит в том, что вам нужно будет переносить ваши настройки каждый раз в новый YAML-файл при каждом обновлении бинарных файлов (при обновлении до новой версии вам нужен будет YAML последней версии).

В любом случае, эти значения в ``core.yaml`` вам придется определять.

* ``peer.localMspID``: название локального MSP вашей организации. В этом MSP будут указаны списком все администраторы вашей организации, а также сертификаты корневого УЦ и УЦ TLS.

* ``peer.mspConfigPath``: путь к месту хранения локального MSP организации. Обратите внимание, что лучшей практикой является содержание этого тома вне вашего контейнера для обеспечения сохранности MSP даже в случае остановки контейнера (например, на профилактику или регламентные работы).

* ``peer.address``: конечная точка для других равноправных узлов в той же организации, важное понятие для организации gossip-коммуникации внутри организации.

* ``peer.tls``: Когда вы запустите рабочую сеть и для этого выставите значение параметра ``enabled`` как ``true``, вам придется указать места расположения сертификатов протокола безопасности транспортного уровня. Заметьте, что для всех узлов сети (как равноправных узлов, так и узлов упорядочения) протокол транспортного уровня безопасности должен быть одновременно включен или одновременно выключен. Для рабочих сетей настоятельно рекомендуется держать его включенным. Так же, как и для MSP, содержать этот том лучше вне своего контейнера.

* ``ledger``: по поводу реестра необходимо определиться с несколькими вещами, как то: база данных состояний (LevelDB или CouchDB, например) и ее расположение (указано в ``fileSystemPath``). Заметим, что для CouchDB является хорошим правилом содержание базы данных состояний вне своей организации (например, в отдельном контейнере). Таким образом будет легче распределять конкретные ресурсы для базы данных. Из соображений управления задержкой и соображений безопасности, лучше содержать контейнер CouchDB на том же сервере, что и равноправный узел. Доступ к контейнеру CouchDB должен ограничиваться только контейнером организации.

* ``gossip``: для этого протокола необходимо позаботиться о целом ряде настроек конфигурации :doc:`gossip`, включая ``externalEndpoint`` (благодаря которой равноправные узлы могут обнаруживаться узлами из другой организации), а также адрес стартовой загрузки (который служит идентификатором равноправного узла в его собственной организации).

* ``chaincode.externalBuilders``: для использования :doc:`cc_service` крайне важно настроить значение этого поля.

Если вас устраивает конфигурация вашего равноправного узла, устраивает расположение ваших томов, конфигурация бэк-енда, вы можете отдать команду на запуск вашего равноправного узла (форма команды зависит от конфигурации вашего бэк-енда).

.. _dg-create-an-ordering-node:

Создать узел упорядочения
~~~~~~~~~~~~~~~~~~~~~~~

В отличие от создания равноправного узла, вам потребуется создание первичного боока (или ссылка на ранее созданный блок при добавлении узла упорядочения к существующей службе упорядочения) и указание пути к нему перед запуском узла упорядочения.

В Fabric, этот файл конфигурации для узлов упорядочения называется ``orderer.yaml``. Образец файла  ``orderer.yaml`` находится `в каталоге sampleconfig у  Hyperledger Fabric <https://github.com/hyperledger/fabric/blob/master/sampleconfig/orderer.yaml>`__. Заметим, что  ``orderer.yaml`` отличается от "первичного блока" сдужбы упорядочения. Этот блок , включающий начальную конфигурацию системного канала упорядочения, должен быть создан до создания узла упорядочения, потому что они будет использован при стартовой загрузке узла.

Сходно с равноправным узлом, вы увидите, что для корректной работы узла вам потребуется установление целого ряда параметров. И снова, если переменная настройки/tuning value вам не нужна, лучше ее не меняйте.

Для тонкой настройки своей конфигурации есть три основных пути.

1. Редактировать файл YAML, сопряженный с бинарными файлами.
2. При развертывании использовать переопределение переменных среды.
3. Указать флаги CLI команд.

Вариант 1 хорош тем, что внесенные вами изменения не теряются при перезапуске узла, но его недостаток состоит в том, что вам нужно будет переносить ваши настройки каждый раз в новый YAML-файл при каждом обновлении бинарных файлов (при обновлении до новой версии вам нужен будет YAML последней версии).

В любом случае, эти значения в ``orderer.yaml`` вам придется определять. Легко заметить, что некоторые из этих полей те же, что и в ``core.yaml``, только под другими названиями.

* ``General.LocalMSPID``: название локального MSP, сгенерированного вашим УЦ, вашей организацией упорядочения.

* ``General.LocalMSPDir``: место нахождения локального MSP узла упорядочения. Лучше хранить этот том вне вашего контейнера.

* ``General.ListenAddress`` и ``General.ListenPort``: представляют собой конечную точку для других узлов упорядочения вашей организации.

* ``FileLedger``: несмотря на то, что узлы упорядочения не имеют базы данных состояний, они всё же хранят копии блокчейна, что позволяет им верифицировать разрешения, сверяясь с последним блоком конфигурации. Поэтому полям реестра должен быть назначен корректный путь к файлу.

* ``Cluster``: эти значения необходимы для тех узлов службы упорядочения, что общаются с другими такими же узлами, как это обстоит, например, в службе упорядочения на основе Raft.

* ``General.BootstrapFile``: это название блока конфигурации, используемого для стартовой загрузки узла упорядочения. Если этот узел при создании службы упорядочения создан не в первую очередь, тогда необходимо сгенерировать этот файл, который в этом случае будет называть "первичный блок".

* ``General.BootstrapMethod``: метод, которым задается блок стартовой загрузки. В настоящее время он может быть только в виде ``file``, которым определяется файл для ``BootstrapFile``. Начиная с версии 2.0, вы можете выставить значение ``none`` для того, чтобы запускать службу упорядочения без стартовой загрузки.

* ``Consensus``: определяет пары ключ/значение, разрешенные модулем консенсуса (поддерживаются и рекомендуются к использованию упорядочивающие сервисы протокола Raft) для журналов Write Ahead (``WALDir``) и Snapshots (``SnapDir``).

В тот момент, когда вас устраивает конфигурация вашего узла упорядочения и то, как подключены ваши тома, а также удовлетворяет конфигурация бэк-енда, можете отдать команду на запуск узла упорядочения (сама команда зависит от конфигурации бэк-енда).

Следующие шаги
----------

Блокчейн-сети полностью определяются связями, так что, когда вы развернете свои узлы, вы, разумеется, пожелаете соединить их с другими узлами! Если у вас есть организация и ее равноправный узел, вы пожелаете, чтобы ваша организация вошла в консорциум и присоединилась к  :doc:`channels`. Если у вас есть узел упорядочивания, вы пожелаете добавить другие организации к своему консорциуму. Также вы захотите научиться разрабатывать чейнкод, о чем вы можете узнать из разделов :doc:`developapps/scenario` и :doc:`chaincode4ade`.

В процессе соединения узлов и создания каналов вам придется модифицировать установленные правила для соответствия бизнес-кейсам ваших деловых сетей. Дополнительная информация об установленных правилах содержится здесь: :doc:`policies/policies`.

В Fabric на постоянной основе приходится заниматься редактированием существующих каналов. Руководство на этот счет содержится в  :doc:`config_update`. Участникам часто приходится добавлять организатора в существующий канал. Руководство по этому конкретному процессу соодержится в :doc:`channel_update_tutorial`. Обновление и изменение узлов после развертывания описывается в :doc:`upgrading_your_components`.

.. toctree::
   :maxdepth: 1
   :caption: Deploying a Production CA

   Planning for a CA <https://hyperledger-fabric-ca.readthedocs.io/en/latest/deployguide/ca-deploy-topology.html>
   Checklist for a production CA server <https://hyperledger-fabric-ca.readthedocs.io/en/latest/deployguide/ca-config.html>
   CA deployment steps <https://hyperledger-fabric-ca.readthedocs.io/en/latest/deployguide/cadeploy.html>

.. Licensed under Creative Commons Attribution 4.0 International License
   https://creativecommons.org/licenses/by/4.0/
