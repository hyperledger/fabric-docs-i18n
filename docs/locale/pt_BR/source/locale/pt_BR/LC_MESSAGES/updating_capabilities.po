# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, hyperledger
# This file is distributed under the same license as the
# hyperledger-fabricdocs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: hyperledger-fabricdocs master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-24 19:11-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../source/updating_capabilities.md:1
msgid "Updating the capability level of a channel"
msgstr ""

#: ../../source/updating_capabilities.md:3
msgid "Audience: network administrators, node administrators"
msgstr ""

#: ../../source/updating_capabilities.md:5
msgid ""
"If you're not familiar with capabilities, check out Capabilities before "
"proceeding, paying particular attention to the fact that peers and "
"orderers that belong to the channel must be upgraded before enabling "
"capabilities."
msgstr ""

#: ../../source/updating_capabilities.md:7
msgid ""
"For information about any new capability levels in the latest release of "
"Fabric, check out Upgrading your components."
msgstr ""

#: ../../source/updating_capabilities.md:9
msgid ""
"Note: when we use the term “upgrade” in Hyperledger Fabric, we’re "
"referring to changing the version of a component (for example, going from"
" one version of a binary to the next version). The term “update,” on the "
"other hand, refers not to versions but to configuration changes, such as "
"updating a channel configuration or a deployment script. As there is no "
"data migration, technically speaking, in Fabric, we will not use the term"
" \"migration\" or \"migrate\" here."
msgstr ""

#: ../../source/updating_capabilities.md:11
msgid "Prerequisites and considerations"
msgstr ""

#: ../../source/updating_capabilities.md:13
msgid ""
"If you haven’t already done so, ensure you have all of the dependencies "
"on your machine as described in Prerequisites. This will ensure that you "
"have the latest versions of the tools required to make a channel "
"configuration update."
msgstr ""

#: ../../source/updating_capabilities.md:15
msgid ""
"Although Fabric binaries can and should be upgraded in a rolling fashion,"
" it is important to finish upgrading binaries before enabling "
"capabilities. Any binaries which are not upgraded to at least the level "
"of the relevant capabilities will crash to indicate a misconfiguration "
"which could otherwise result in a ledger fork."
msgstr ""

#: ../../source/updating_capabilities.md:17
msgid ""
"Once a capability has been enabled, it becomes part of the permanent "
"record for that channel. This means that even after disabling the "
"capability, old binaries will not be able to participate in the channel "
"because they cannot process beyond the block which enabled the capability"
" to get to the block which disables it. As a result, once a capability "
"has been enabled, disabling it is neither recommended nor supported."
msgstr ""

#: ../../source/updating_capabilities.md:19
msgid ""
"For this reason, think of enabling channel capabilities as a point of no "
"return. Please experiment with the new capabilities in a test setting and"
" be confident before proceeding to enable them in production."
msgstr ""

#: ../../source/updating_capabilities.md:21
msgid "Overview"
msgstr ""

#: ../../source/updating_capabilities.md:23
msgid ""
"In this tutorial, we will show the process for updating capabilities in "
"all of the parts of the configuration of both the ordering system channel"
" and any application channels."
msgstr ""

#: ../../source/updating_capabilities.md:25
msgid ""
"Whether you will need to update every part of the configuration for all "
"of your channels will depend on the contents of the latest release as "
"well as your own use case. For more information, check out Upgrading to "
"the latest version of Fabric. Note that it may be necessary to update to "
"the newest capability levels before using the features in the latest "
"release, and it is considered a best practice to always be at the latest "
"binary versions and capability levels."
msgstr ""

#: ../../source/updating_capabilities.md:27
msgid ""
"Because updating the capability level of a channel involves the "
"configuration update transaction process, we will be relying on our "
"Updating a channel configuration topic for many of the commands."
msgstr ""

#: ../../source/updating_capabilities.md:29
msgid ""
"As with any channel configuration update, updating capabilities is, at a "
"high level, a three step process (for each channel):"
msgstr ""

#: ../../source/updating_capabilities.md:31
msgid "Get the latest channel config"
msgstr ""

#: ../../source/updating_capabilities.md:32
msgid "Create a modified channel config"
msgstr ""

#: ../../source/updating_capabilities.md:33
msgid "Create a config update transaction"
msgstr ""

#: ../../source/updating_capabilities.md:35
msgid "We will enable these capabilities in the following order:"
msgstr ""

#: ../../source/updating_capabilities.md:37
msgid "Orderer system channel"
msgstr ""

#: ../../source/updating_capabilities.md:39
#: ../../source/updating_capabilities.md:44
#: ../../source/updating_capabilities.md:114
#: ../../source/updating_capabilities.md:156
msgid "Orderer group"
msgstr ""

#: ../../source/updating_capabilities.md:40
#: ../../source/updating_capabilities.md:45
#: ../../source/updating_capabilities.md:126
#: ../../source/updating_capabilities.md:168
msgid "Channel group"
msgstr ""

#: ../../source/updating_capabilities.md:42
msgid "Application channels"
msgstr ""

#: ../../source/updating_capabilities.md:46
#: ../../source/updating_capabilities.md:180
msgid "Application group"
msgstr ""

#: ../../source/updating_capabilities.md:48
msgid ""
"While it is possible to edit multiple parts of the configuration of a "
"channel at the same time, in this tutorial we will show how this process "
"is done incrementally. In other words, we will not bundle a change to the"
" Orderer group and the Channel group of the system channel into one "
"configuration change. This is because not every release will have both a "
"new Orderer group capability and a Channel group capability."
msgstr ""

#: ../../source/updating_capabilities.md:50
msgid ""
"Note that in production networks, it will not be possible or desirable "
"for one user to be able to update all of these channels (and parts of "
"configurations) unilaterally. The orderer system channel, for example, is"
" administered exclusively by ordering organization admins (though it is "
"possible to add peer organizations as ordering service organizations). "
"Similarly, updating either the Orderer or Channel groups of a channel "
"configuration requires the signature of an ordering service organization "
"in addition to peer organizations. Distributed systems require "
"collaborative management."
msgstr ""

#: ../../source/updating_capabilities.md:52
msgid "Create a capabilities config file"
msgstr ""

#: ../../source/updating_capabilities.md:54
msgid ""
"Note that this tutorial presumes that a file called capabilities.json has"
" been created and includes the capability updates you want to make to the"
" various sections of the config. It also uses jq to apply the edits to "
"the modified config file."
msgstr ""

#: ../../source/updating_capabilities.md:56
msgid ""
"Note that you are not obligated to create a file like capabilities.json "
"or to use a tool like jq. The modified config can also be edited manually"
" (after it has been pulled, translated, and scoped). Check out this "
"sample channel configuration for reference."
msgstr ""

#: ../../source/updating_capabilities.md:58
msgid ""
"However, the process described here (using a JSON file and a tool like "
"jq) does have the advantage of being scriptable, making it suitable for "
"proposing configuration updates to a large number of channels. This is "
"why it is the recommended way to update channels."
msgstr ""

#: ../../source/updating_capabilities.md:60
msgid ""
"In this example, the capabilities.json file looks like this (note: if you"
" are updating your channel as part of Upgrading to the latest version of "
"Fabric you will need to set the capabilities to the levels appropriate to"
" that release):"
msgstr ""

#: ../../source/updating_capabilities.md:94
msgid ""
"Note that by default peer organizations are not admins of the orderer "
"system channel and will therefore be unable to propose configuration "
"updates to it. An orderer organization admin would have to create a file "
"like this (without the application group capability, which does not exist"
" in the system channel) to propose updating the system channel "
"configuration. Note that because application channel copy the system "
"channel configuration by default, unless a different channel profile is "
"created which specifies capability levels, the Channel and Orderer group "
"capabilities for the application channel will be the same as those in the"
" network's system channel."
msgstr ""

#: ../../source/updating_capabilities.md:96
msgid "Orderer system channel capabilities"
msgstr ""

#: ../../source/updating_capabilities.md:98
msgid ""
"Because application channels copy the configuration of the orderer system"
" channel by default, it is considered a best practice to update the "
"capabilities of the system channel before any application channels. This "
"mirrors the process of updating ordering nodes to the newest version "
"before peers, as described in Upgrading your components."
msgstr ""

#: ../../source/updating_capabilities.md:100
msgid ""
"Note that the orderer system channel is administered by ordering service "
"organizations. By default this will be a single organization (the "
"organization that created the initial nodes in the ordering service), but"
" more organizations can be added here (for example, if multiple "
"organizations have contributed nodes to the ordering service)."
msgstr ""

#: ../../source/updating_capabilities.md:102
msgid ""
"Make sure all of the ordering nodes in your ordering service have been "
"upgraded to the required binary level before updating the Orderer and "
"Channel capability. If an ordering node is not at the required level, it "
"will be unable to process the config block with the capability and will "
"crash. Similarly, note that if a new channel is created on this ordering "
"service, all of the peers that will be joined to it must be at least to "
"the node level corresponding to the Channel and Application capabilities,"
" otherwise they will also crash when attempting to process the config "
"block. For more information, check out Capabilities."
msgstr ""

#: ../../source/updating_capabilities.md:104
#: ../../source/updating_capabilities.md:146
msgid "Set environment variables"
msgstr ""

#: ../../source/updating_capabilities.md:106
#: ../../source/updating_capabilities.md:148
msgid "You will need to export the following variables:"
msgstr ""

#: ../../source/updating_capabilities.md:108
msgid "CH_NAME: the name of the system channel being updated."
msgstr ""

#: ../../source/updating_capabilities.md:109
msgid ""
"CORE_PEER_LOCALMSPID: the MSP ID of the organization proposing the "
"channel update. This will be the MSP of one of the orderer organizations."
msgstr ""

#: ../../source/updating_capabilities.md:110
msgid "TLS_ROOT_CA: the absolute path to the TLS cert of your ordering node(s)."
msgstr ""

#: ../../source/updating_capabilities.md:111
#: ../../source/updating_capabilities.md:153
msgid ""
"CORE_PEER_MSPCONFIGPATH: the absolute path to the MSP representing your "
"organization."
msgstr ""

#: ../../source/updating_capabilities.md:112
#: ../../source/updating_capabilities.md:154
msgid ""
"ORDERER_CONTAINER: the name of an ordering node container. When targeting"
" the ordering service, you can target any particular node in the ordering"
" service. Your requests will be forwarded to the leader automatically."
msgstr ""

#: ../../source/updating_capabilities.md:116
msgid ""
"For the commands on how to pull, translate, and scope the channel config,"
" navigate to Step 1: Pull and translate the config. Once you have a "
"modified_config.json, add the capabilities to the Orderer group of the "
"config (as listed in capabilities.json) using this command:"
msgstr ""

#: ../../source/updating_capabilities.md:122
#: ../../source/updating_capabilities.md:134
#: ../../source/updating_capabilities.md:164
#: ../../source/updating_capabilities.md:176
#: ../../source/updating_capabilities.md:188
msgid "Then, follow the steps at Step 3: Re-encode and submit the config."
msgstr ""

#: ../../source/updating_capabilities.md:124
msgid ""
"Note that because you are updating the system channel, the mod_policy for"
" the system channel will only require the signature of ordering service "
"organization admins."
msgstr ""

#: ../../source/updating_capabilities.md:128
msgid ""
"Once again, navigate to Step 1: Pull and translate the config. Once you "
"have a modified_config.json, add the capabilities to the Channel group of"
" the config (as listed in capabilities.json) using this command:"
msgstr ""

#: ../../source/updating_capabilities.md:136
msgid ""
"Note that because you are updating the system channel, the mod_policy for"
" the system channel will only require the signature of ordering service "
"organization admins. In an application channel, as you'll see, you would "
"normally need to satisfy both the MAJORITY Admins policy of both the "
"Application group (consisting of the MSPs of peer organizations) and the "
"Orderer group (consisting of ordering service organizations), assuming "
"you have not changed the default values."
msgstr ""

#: ../../source/updating_capabilities.md:138
msgid "Enable capabilities on existing channels"
msgstr ""

#: ../../source/updating_capabilities.md:140
msgid ""
"Now that we have updating the capabilities on the orderer system channel,"
" we need to updating the configuration of any existing application "
"channels you want to update."
msgstr ""

#: ../../source/updating_capabilities.md:142
msgid ""
"As you will see, the configuration of application channels is very "
"similar to that of the system channel. This is what allows us to re-use "
"capabilities.json and the same commands we used for updating the system "
"channel (using different environment variables which we will discuss "
"below)."
msgstr ""

#: ../../source/updating_capabilities.md:144
msgid ""
"Make sure all of the ordering nodes in your ordering service and peers on"
" the channel have been upgraded to the required binary level before "
"updating capabilities. If a peer or an ordering node is not at the "
"required level, it will be unable to process the config block with the "
"capability and will crash. For more information, check out Capabilities."
msgstr ""

#: ../../source/updating_capabilities.md:150
msgid ""
"CH_NAME: the name of the application channel being updated. You will have"
" to reset this variable for every channel you update."
msgstr ""

#: ../../source/updating_capabilities.md:151
msgid ""
"CORE_PEER_LOCALMSPID: the MSP ID of the organization proposing the "
"channel update. This will be the MSP of your peer organization."
msgstr ""

#: ../../source/updating_capabilities.md:152
msgid "TLS_ROOT_CA: the absolute path to the TLS cert of your peer organization."
msgstr ""

#: ../../source/updating_capabilities.md:158
msgid ""
"Navigate to Step 1: Pull and translate the config. Once you have a "
"modified_config.json, add the capabilities to the Orderer group of the "
"config (as listed in capabilities.json) using this command:"
msgstr ""

#: ../../source/updating_capabilities.md:166
msgid ""
"Note the mod_policy for this capability defaults to the MAJORITY of the "
"Admins of the Orderer group (in other words, a majority of the admins of "
"the ordering service). Peer organizations can propose an update to this "
"capability, but their signatures will not satisfy the relevant policy in "
"this case."
msgstr ""

#: ../../source/updating_capabilities.md:170
msgid ""
"Navigate to Step 1: Pull and translate the config. Once you have a "
"modified_config.json, add the capabilities to the Channel group of the "
"config (as listed in capabilities.json) using this command:"
msgstr ""

#: ../../source/updating_capabilities.md:178
msgid ""
"Note that the mod_policy for this capability defaults to requiring "
"signatures from both the MAJORITY of Admins in the Application and "
"Orderer groups. In other words, both a majority of the peer organization "
"admins and ordering service organization admins must sign this request."
msgstr ""

#: ../../source/updating_capabilities.md:182
msgid ""
"Navigate to Step 1: Pull and translate the config. Once you have a "
"modified_config.json, add the capabilities to the Application group of "
"the config (as listed in capabilities.json) using this command:"
msgstr ""

#: ../../source/updating_capabilities.md:190
msgid ""
"Note that the mod_policy for this capability defaults to requiring "
"signatures from the MAJORITY of Admins in the Application group. In other"
" words, a majority of peer organizations will need to approve. Ordering "
"service admins have no say in this capability."
msgstr ""

#: ../../source/updating_capabilities.md:192
msgid ""
"As a result, be very careful to not change this capability to a level "
"that does not exist. Because ordering nodes neither understand nor "
"validate Application capabilities, they will approve a configuration to "
"any level and send the new config block to the peers to be committed to "
"their ledgers. However, the peers will be unable to process the "
"capability and will crash. And even it was possible to drive a corrected "
"configuration change to a valid capability level, the previous config "
"block with the faulty capability would still exist on the ledger and "
"cause peers to crash when trying to process it."
msgstr ""

#: ../../source/updating_capabilities.md:194
msgid ""
"This is one reason why a file like capabilities.json can be useful. It "
"prevents a simple user error --- for example, setting the Application "
"capability to V20 when the intent was to set it to V2_0 --- that can "
"cause a channel to be unusable and unrecoverable."
msgstr ""

#: ../../source/updating_capabilities.md:196
msgid "Verify a transaction after capabilities have been enabled"
msgstr ""

#: ../../source/updating_capabilities.md:198
msgid ""
"It's a best practice to ensure that capabilities have been enabled "
"successfully with a chaincode invoke on all channels. If any nodes that "
"do not understand new capabilities have not been upgraded to a sufficient"
" binary level, they will crash. You will have to upgrade their binary "
"level before they can be successfully restarted."
msgstr ""

#~ msgid "Updating the capability level of a channel"
#~ msgstr ""

#~ msgid "Audience: network administrators, node administrators"
#~ msgstr ""

#~ msgid ""
#~ "If you're not familiar with "
#~ "capabilities, check out Capabilities before"
#~ " proceeding, paying particular attention to"
#~ " the fact that peers and orderers "
#~ "that belong to the channel must be"
#~ " upgraded before enabling capabilities."
#~ msgstr ""

#~ msgid ""
#~ "For information about any new capability"
#~ " levels in the latest release of "
#~ "Fabric, check out Upgrading your "
#~ "components."
#~ msgstr ""

#~ msgid "Prerequisites and considerations"
#~ msgstr ""

#~ msgid ""
#~ "If you haven’t already done so, "
#~ "ensure you have all of the "
#~ "dependencies on your machine as "
#~ "described in Prerequisites. This will "
#~ "ensure that you have the latest "
#~ "versions of the tools required to "
#~ "make a channel configuration update."
#~ msgstr ""

#~ msgid ""
#~ "Although Fabric binaries can and should"
#~ " be upgraded in a rolling fashion,"
#~ " it is important to finish upgrading"
#~ " binaries before enabling capabilities. Any"
#~ " binaries which are not upgraded to"
#~ " at least the level of the "
#~ "relevant capabilities will crash to "
#~ "indicate a misconfiguration which could "
#~ "otherwise result in a ledger fork."
#~ msgstr ""

#~ msgid "Overview"
#~ msgstr ""

#~ msgid ""
#~ "Whether you will need to update "
#~ "every part of the configuration for "
#~ "all of your channels will depend "
#~ "on the contents of the latest "
#~ "release as well as your own use"
#~ " case. For more information, check "
#~ "out Upgrading to the latest version "
#~ "of Fabric. Note that it may be "
#~ "necessary to update to the newest "
#~ "capability levels before using the "
#~ "features in the latest release, and "
#~ "it is considered a best practice "
#~ "to always be at the latest binary"
#~ " versions and capability levels."
#~ msgstr ""

#~ msgid ""
#~ "Because updating the capability level of"
#~ " a channel involves the configuration "
#~ "update transaction process, we will be"
#~ " relying on our Updating a channel"
#~ " configuration topic for many of the"
#~ " commands."
#~ msgstr ""

#~ msgid "Orderer system channel"
#~ msgstr ""

#~ msgid "Application channels"
#~ msgstr ""

#~ msgid ""
#~ "While it is possible to edit "
#~ "multiple parts of the configuration of"
#~ " a channel at the same time, in"
#~ " this tutorial we will show how "
#~ "this process is done incrementally. In"
#~ " other words, we will not bundle "
#~ "a change to the Orderer group and"
#~ " the Channel group of the system "
#~ "channel into one configuration change. "
#~ "This is because not every release "
#~ "will have both a new Orderer group"
#~ " capability and a Channel group "
#~ "capability."
#~ msgstr ""

#~ msgid ""
#~ "Note that in production networks, it "
#~ "will not be possible or desirable "
#~ "for one user to be able to "
#~ "update all of these channels (and "
#~ "parts of configurations) unilaterally. The "
#~ "orderer system channel, for example, is"
#~ " administered exclusively by ordering "
#~ "organization admins (though it is "
#~ "possible to add peer organizations as"
#~ " ordering service organizations). Similarly, "
#~ "updating either the Orderer or Channel"
#~ " groups of a channel configuration "
#~ "requires the signature of an ordering"
#~ " service organization in addition to "
#~ "peer organizations. Distributed systems "
#~ "require collaborative management."
#~ msgstr ""

#~ msgid "Create a capabilities config file"
#~ msgstr ""

#~ msgid ""
#~ "Note that this tutorial presumes that"
#~ " a file called capabilities.json has "
#~ "been created and includes the capability"
#~ " updates you want to make to "
#~ "the various sections of the config. "
#~ "It also uses jq to apply the "
#~ "edits to the modified config file."
#~ msgstr ""

#~ msgid ""
#~ "Note that you are not obligated to"
#~ " create a file like capabilities.json "
#~ "or to use a tool like jq. "
#~ "The modified config can also be "
#~ "edited manually (after it has been "
#~ "pulled, translated, and scoped). Check "
#~ "out this sample channel configuration "
#~ "for reference."
#~ msgstr ""

#~ msgid ""
#~ "However, the process described here "
#~ "(using a JSON file and a tool "
#~ "like jq) does have the advantage "
#~ "of being scriptable, making it suitable"
#~ " for proposing configuration updates to "
#~ "a large number of channels. This "
#~ "is why it is the recommended way"
#~ " to update channels."
#~ msgstr ""

#~ msgid ""
#~ "In this example, the capabilities.json "
#~ "file looks like this (note: if you"
#~ " are updating your channel as part"
#~ " of Upgrading to the latest version"
#~ " of Fabric you will need to set"
#~ " the capabilities to the levels "
#~ "appropriate to that release):"
#~ msgstr ""

#~ msgid ""
#~ "Note that by default peer organizations"
#~ " are not admins of the orderer "
#~ "system channel and will therefore be "
#~ "unable to propose configuration updates "
#~ "to it. An orderer organization admin "
#~ "would have to create a file like"
#~ " this (without the application group "
#~ "capability, which does not exist in "
#~ "the system channel) to propose updating"
#~ " the system channel configuration. Note "
#~ "that because application channel copy "
#~ "the system channel configuration by "
#~ "default, unless a different channel "
#~ "profile is created which specifies "
#~ "capability levels, the Channel and "
#~ "Orderer group capabilities for the "
#~ "application channel will be the same "
#~ "as those in the network's system "
#~ "channel."
#~ msgstr ""

#~ msgid "Orderer system channel capabilities"
#~ msgstr ""

#~ msgid ""
#~ "Because application channels copy the "
#~ "configuration of the orderer system "
#~ "channel by default, it is considered "
#~ "a best practice to update the "
#~ "capabilities of the system channel "
#~ "before any application channels. This "
#~ "mirrors the process of updating ordering"
#~ " nodes to the newest version before"
#~ " peers, as described in Upgrading "
#~ "your components."
#~ msgstr ""

#~ msgid ""
#~ "Make sure all of the ordering "
#~ "nodes in your ordering service have "
#~ "been upgraded to the required binary "
#~ "level before updating the Orderer and"
#~ " Channel capability. If an ordering "
#~ "node is not at the required level,"
#~ " it will be unable to process "
#~ "the config block with the capability "
#~ "and will crash. Similarly, note that "
#~ "if a new channel is created on "
#~ "this ordering service, all of the "
#~ "peers that will be joined to it"
#~ " must be at least to the node"
#~ " level corresponding to the Channel "
#~ "and Application capabilities, otherwise they"
#~ " will also crash when attempting to"
#~ " process the config block. For more"
#~ " information, check out Capabilities."
#~ msgstr ""

#~ msgid "Set environment variables"
#~ msgstr ""

#~ msgid "CH_NAME: the name of the system channel being updated."
#~ msgstr ""

#~ msgid ""
#~ "CORE_PEER_LOCALMSPID: the MSP ID of the"
#~ " organization proposing the channel update."
#~ " This will be the MSP of one"
#~ " of the orderer organizations."
#~ msgstr ""

#~ msgid ""
#~ "TLS_ROOT_CA: the absolute path to the"
#~ " TLS cert of your ordering node(s)."
#~ msgstr ""

#~ msgid ""
#~ "CORE_PEER_MSPCONFIGPATH: the absolute path to"
#~ " the MSP representing your organization."
#~ msgstr ""

#~ msgid ""
#~ "ORDERER_CONTAINER: the name of an "
#~ "ordering node container. When targeting "
#~ "the ordering service, you can target "
#~ "any particular node in the ordering "
#~ "service. Your requests will be forwarded"
#~ " to the leader automatically."
#~ msgstr ""

#~ msgid ""
#~ "For the commands on how to pull,"
#~ " translate, and scope the channel "
#~ "config, navigate to Step 1: Pull "
#~ "and translate the config. Once you "
#~ "have a modified_config.json, add the "
#~ "capabilities to the Orderer group of "
#~ "the config (as listed in "
#~ "capabilities.json) using this command:"
#~ msgstr ""

#~ msgid "Then, follow the steps at Step 3: Re-encode and submit the config."
#~ msgstr ""

#~ msgid ""
#~ "Note that because you are updating "
#~ "the system channel, the mod_policy for"
#~ " the system channel will only require"
#~ " the signature of ordering service "
#~ "organization admins."
#~ msgstr ""

#~ msgid ""
#~ "Once again, navigate to Step 1: "
#~ "Pull and translate the config. Once "
#~ "you have a modified_config.json, add the"
#~ " capabilities to the Channel group of"
#~ " the config (as listed in "
#~ "capabilities.json) using this command:"
#~ msgstr ""

#~ msgid ""
#~ "Note that because you are updating "
#~ "the system channel, the mod_policy for"
#~ " the system channel will only require"
#~ " the signature of ordering service "
#~ "organization admins. In an application "
#~ "channel, as you'll see, you would "
#~ "normally need to satisfy both the "
#~ "MAJORITY Admins policy of both the "
#~ "Application group (consisting of the "
#~ "MSPs of peer organizations) and the "
#~ "Orderer group (consisting of ordering "
#~ "service organizations), assuming you have "
#~ "not changed the default values."
#~ msgstr ""

#~ msgid "Enable capabilities on existing channels"
#~ msgstr ""

#~ msgid ""
#~ "As you will see, the configuration "
#~ "of application channels is very similar"
#~ " to that of the system channel. "
#~ "This is what allows us to re-"
#~ "use capabilities.json and the same "
#~ "commands we used for updating the "
#~ "system channel (using different environment"
#~ " variables which we will discuss "
#~ "below)."
#~ msgstr ""

#~ msgid ""
#~ "Make sure all of the ordering "
#~ "nodes in your ordering service and "
#~ "peers on the channel have been "
#~ "upgraded to the required binary level"
#~ " before updating capabilities. If a "
#~ "peer or an ordering node is not"
#~ " at the required level, it will "
#~ "be unable to process the config "
#~ "block with the capability and will "
#~ "crash. For more information, check out"
#~ " Capabilities."
#~ msgstr ""

#~ msgid ""
#~ "CH_NAME: the name of the application "
#~ "channel being updated. You will have "
#~ "to reset this variable for every "
#~ "channel you update."
#~ msgstr ""

#~ msgid ""
#~ "CORE_PEER_LOCALMSPID: the MSP ID of the"
#~ " organization proposing the channel update."
#~ " This will be the MSP of your"
#~ " peer organization."
#~ msgstr ""

#~ msgid ""
#~ "TLS_ROOT_CA: the absolute path to the"
#~ " TLS cert of your peer organization."
#~ msgstr ""

#~ msgid ""
#~ "Navigate to Step 1: Pull and "
#~ "translate the config. Once you have "
#~ "a modified_config.json, add the capabilities"
#~ " to the Orderer group of the "
#~ "config (as listed in capabilities.json) "
#~ "using this command:"
#~ msgstr ""

#~ msgid ""
#~ "Note the mod_policy for this capability"
#~ " defaults to the MAJORITY of the "
#~ "Admins of the Orderer group (in "
#~ "other words, a majority of the "
#~ "admins of the ordering service). Peer"
#~ " organizations can propose an update "
#~ "to this capability, but their signatures"
#~ " will not satisfy the relevant policy"
#~ " in this case."
#~ msgstr ""

#~ msgid ""
#~ "Navigate to Step 1: Pull and "
#~ "translate the config. Once you have "
#~ "a modified_config.json, add the capabilities"
#~ " to the Channel group of the "
#~ "config (as listed in capabilities.json) "
#~ "using this command:"
#~ msgstr ""

#~ msgid ""
#~ "Note that the mod_policy for this "
#~ "capability defaults to requiring signatures"
#~ " from both the MAJORITY of Admins "
#~ "in the Application and Orderer groups."
#~ " In other words, both a majority "
#~ "of the peer organization admins and "
#~ "ordering service organization admins must "
#~ "sign this request."
#~ msgstr ""

#~ msgid ""
#~ "Navigate to Step 1: Pull and "
#~ "translate the config. Once you have "
#~ "a modified_config.json, add the capabilities"
#~ " to the Application group of the "
#~ "config (as listed in capabilities.json) "
#~ "using this command:"
#~ msgstr ""

#~ msgid ""
#~ "Note that the mod_policy for this "
#~ "capability defaults to requiring signatures"
#~ " from the MAJORITY of Admins in "
#~ "the Application group. In other words,"
#~ " a majority of peer organizations "
#~ "will need to approve. Ordering service"
#~ " admins have no say in this "
#~ "capability."
#~ msgstr ""

#~ msgid ""
#~ "As a result, be very careful to"
#~ " not change this capability to a "
#~ "level that does not exist. Because "
#~ "ordering nodes neither understand nor "
#~ "validate Application capabilities, they will"
#~ " approve a configuration to any level"
#~ " and send the new config block "
#~ "to the peers to be committed to"
#~ " their ledgers. However, the peers "
#~ "will be unable to process the "
#~ "capability and will crash. And even "
#~ "it was possible to drive a "
#~ "corrected configuration change to a "
#~ "valid capability level, the previous "
#~ "config block with the faulty capability"
#~ " would still exist on the ledger "
#~ "and cause peers to crash when "
#~ "trying to process it."
#~ msgstr ""

#~ msgid ""
#~ "This is one reason why a file "
#~ "like capabilities.json can be useful. It"
#~ " prevents a simple user error --- "
#~ "for example, setting the Application "
#~ "capability to V20 when the intent "
#~ "was to set it to V2_0 --- "
#~ "that can cause a channel to be "
#~ "unusable and unrecoverable."
#~ msgstr ""

#~ msgid "Verify a transaction after capabilities have been enabled"
#~ msgstr ""

#~ msgid "# Updating the capability level of a channel"
#~ msgstr ""

#~ msgid "*Audience: network administrators, node administrators*"
#~ msgstr ""

#~ msgid ""
#~ "If you're not familiar with "
#~ "capabilities, check out "
#~ "[Capabilities](./capabilities_concept.html) before "
#~ "proceeding, paying particular attention to "
#~ "the fact that **peers and orderers "
#~ "that belong to the channel must be"
#~ " upgraded before enabling capabilities**."
#~ msgstr ""

#~ msgid ""
#~ "For information about any new capability"
#~ " levels in the latest release of "
#~ "Fabric, check out [Upgrading your "
#~ "components](./upgrade_to_newest_version.html#Capabilities)."
#~ msgstr ""

#~ msgid "## Prerequisites and considerations"
#~ msgstr ""

#~ msgid ""
#~ "If you haven’t already done so, "
#~ "ensure you have all of the "
#~ "dependencies on your machine as "
#~ "described in [Prerequisites](./prereqs.html). This"
#~ " will ensure that you have the "
#~ "latest versions of the tools required"
#~ " to make a channel configuration "
#~ "update."
#~ msgstr ""

#~ msgid ""
#~ "Although Fabric binaries can and should"
#~ " be upgraded in a rolling fashion,"
#~ " it is important to **finish "
#~ "upgrading binaries before enabling "
#~ "capabilities**. Any binaries which are "
#~ "not upgraded to at least the level"
#~ " of the relevant capabilities will "
#~ "crash to indicate a misconfiguration "
#~ "which could otherwise result in a "
#~ "ledger fork."
#~ msgstr ""

#~ msgid "## Overview"
#~ msgstr ""

#~ msgid ""
#~ "Whether you will need to update "
#~ "every part of the configuration for "
#~ "all of your channels will depend "
#~ "on the contents of the latest "
#~ "release as well as your own use"
#~ " case. For more information, check "
#~ "out [Upgrading to the latest version "
#~ "of Fabric](./upgrade_to_newest_version.html). Note "
#~ "that it may be necessary to update"
#~ " to the newest capability levels "
#~ "before using the features in the "
#~ "latest release, and it is considered "
#~ "a best practice to always be at"
#~ " the latest binary versions and "
#~ "capability levels."
#~ msgstr ""

#~ msgid ""
#~ "Because updating the capability level of"
#~ " a channel involves the configuration "
#~ "update transaction process, we will be"
#~ " relying on our [Updating a channel"
#~ " configuration](./config_update.html) topic for "
#~ "many of the commands."
#~ msgstr ""

#~ msgid "[Orderer system channel](#orderer-system-channel-capabilities)"
#~ msgstr ""

#~ msgid "[Application channels](#enable-capabilities-on-existing-channels)"
#~ msgstr ""

#~ msgid ""
#~ "While it is possible to edit "
#~ "multiple parts of the configuration of"
#~ " a channel at the same time, in"
#~ " this tutorial we will show how "
#~ "this process is done incrementally. In"
#~ " other words, we will not bundle "
#~ "a change to the `Orderer` group "
#~ "and the `Channel` group of the "
#~ "system channel into one configuration "
#~ "change. This is because not every "
#~ "release will have both a new "
#~ "`Orderer` group capability and a "
#~ "`Channel` group capability."
#~ msgstr ""

#~ msgid ""
#~ "Note that in production networks, it "
#~ "will not be possible or desirable "
#~ "for one user to be able to "
#~ "update all of these channels (and "
#~ "parts of configurations) unilaterally. The "
#~ "orderer system channel, for example, is"
#~ " administered exclusively by ordering "
#~ "organization admins (though it is "
#~ "possible to add peer organizations as"
#~ " ordering service organizations). Similarly, "
#~ "updating either the `Orderer` or "
#~ "`Channel` groups of a channel "
#~ "configuration requires the signature of "
#~ "an ordering service organization in "
#~ "addition to peer organizations. Distributed"
#~ " systems require collaborative management."
#~ msgstr ""

#~ msgid "#### Create a capabilities config file"
#~ msgstr ""

#~ msgid ""
#~ "Note that this tutorial presumes that"
#~ " a file called `capabilities.json` has "
#~ "been created and includes the capability"
#~ " updates you want to make to "
#~ "the various sections of the config. "
#~ "It also uses `jq` to apply the "
#~ "edits to the modified config file."
#~ msgstr ""

#~ msgid ""
#~ "Note that you are not obligated to"
#~ " create a file like `capabilities.json` "
#~ "or to use a tool like `jq`. "
#~ "The modified config can also be "
#~ "edited manually (after it has been "
#~ "pulled, translated, and scoped). Check "
#~ "out this [sample channel "
#~ "configuration](./config_update.html#sample-channel-"
#~ "configuration) for reference."
#~ msgstr ""

#~ msgid ""
#~ "However, the process described here "
#~ "(using a JSON file and a tool "
#~ "like `jq`) does have the advantage "
#~ "of being scriptable, making it suitable"
#~ " for proposing configuration updates to "
#~ "a large number of channels. This "
#~ "is why it is **the recommended way"
#~ " to update channels**."
#~ msgstr ""

#~ msgid ""
#~ "In this example, the ``capabilities.json`` "
#~ "file looks like this (note: if you"
#~ " are updating your channel as part"
#~ " of [Upgrading to the latest version"
#~ " of Fabric](./upgrade_to_newest_version.html) you "
#~ "will need to set the capabilities "
#~ "to the levels appropriate to that "
#~ "release):"
#~ msgstr ""

#~ msgid "```"
#~ msgstr ""

#~ msgid "{"
#~ msgstr ""

#~ msgid "\"channel\": {"
#~ msgstr ""

#~ msgid "\"mod_policy\": \"Admins\","
#~ msgstr ""

#~ msgid "\"value\": {"
#~ msgstr ""

#~ msgid "\"capabilities\": {"
#~ msgstr ""

#~ msgid "\"V2_0\": {}"
#~ msgstr ""

#~ msgid "}"
#~ msgstr ""

#~ msgid "},"
#~ msgstr ""

#~ msgid "\"version\": \"0\""
#~ msgstr ""

#~ msgid "}, \"orderer\": {"
#~ msgstr ""

#~ msgid "}, \"application\": {"
#~ msgstr ""

#~ msgid ""
#~ "Note that by default peer organizations"
#~ " are not admins of the orderer "
#~ "system channel and will therefore be "
#~ "unable to propose configuration updates "
#~ "to it. An orderer organization admin "
#~ "would have to create a file like"
#~ " this (without the `application` group "
#~ "capability, which does not exist in "
#~ "the system channel) to propose updating"
#~ " the system channel configuration. Note "
#~ "that because application channel copy "
#~ "the system channel configuration by "
#~ "default, unless a different channel "
#~ "profile is created which specifies "
#~ "capability levels, the `Channel` and "
#~ "`Orderer` group capabilities for the "
#~ "application channel will be the same "
#~ "as those in the network's system "
#~ "channel."
#~ msgstr ""

#~ msgid "## Orderer system channel capabilities"
#~ msgstr ""

#~ msgid ""
#~ "Because application channels copy the "
#~ "configuration of the orderer system "
#~ "channel by default, it is considered "
#~ "a best practice to update the "
#~ "capabilities of the system channel "
#~ "before any application channels. This "
#~ "mirrors the process of updating ordering"
#~ " nodes to the newest version before"
#~ " peers, as described in [Upgrading "
#~ "your components](./upgrading_your_components.html)."
#~ msgstr ""

#~ msgid ""
#~ "Make sure all of the ordering "
#~ "nodes in your ordering service have "
#~ "been upgraded to the required binary "
#~ "level before updating the `Orderer` and"
#~ " `Channel` capability. If an ordering "
#~ "node is not at the required level,"
#~ " it will be unable to process "
#~ "the config block with the capability "
#~ "and will crash. Similarly, note that "
#~ "if a new channel is created on "
#~ "this ordering service, all of the "
#~ "peers that will be joined to it"
#~ " must be at least to the node"
#~ " level corresponding to the `Channel` "
#~ "and `Application` capabilities, otherwise they"
#~ " will also crash when attempting to"
#~ " process the config block. For more"
#~ " information, check out "
#~ "[Capabilities](./capabilities_concept.html)."
#~ msgstr ""

#~ msgid "### Set environment variables"
#~ msgstr ""

#~ msgid "`CH_NAME`: the name of the system channel being updated."
#~ msgstr ""

#~ msgid ""
#~ "`CORE_PEER_LOCALMSPID`: the MSP ID of "
#~ "the organization proposing the channel "
#~ "update. This will be the MSP of"
#~ " one of the orderer organizations."
#~ msgstr ""

#~ msgid ""
#~ "`TLS_ROOT_CA`: the absolute path to the"
#~ " TLS cert of your ordering node(s)."
#~ msgstr ""

#~ msgid ""
#~ "`CORE_PEER_MSPCONFIGPATH`: the absolute path "
#~ "to the MSP representing your "
#~ "organization."
#~ msgstr ""

#~ msgid ""
#~ "`ORDERER_CONTAINER`: the name of an "
#~ "ordering node container. When targeting "
#~ "the ordering service, you can target "
#~ "any particular node in the ordering "
#~ "service. Your requests will be forwarded"
#~ " to the leader automatically."
#~ msgstr ""

#~ msgid "### `Orderer` group"
#~ msgstr ""

#~ msgid ""
#~ "For the commands on how to pull,"
#~ " translate, and scope the channel "
#~ "config, navigate to [Step 1: Pull "
#~ "and translate the "
#~ "config](./config_update.html#step-1-pull-and-translate-"
#~ "the-config). Once you have a "
#~ "`modified_config.json`, add the capabilities "
#~ "to the `Orderer` group of the "
#~ "config (as listed in `capabilities.json`) "
#~ "using this command:"
#~ msgstr ""

#~ msgid ""
#~ "``` jq -s '.[0] * "
#~ "{\"channel_group\":{\"groups\":{\"Orderer\": {\"values\": "
#~ "{\"Capabilities\": .[1].orderer}}}}}' config.json "
#~ "./capabilities.json > modified_config.json ```"
#~ msgstr ""

#~ msgid ""
#~ "Then, follow the steps at [Step 3:"
#~ " Re-encode and submit the "
#~ "config](./config_update.html#step-3-re-encode-and-"
#~ "submit-the-config)."
#~ msgstr ""

#~ msgid ""
#~ "Note that because you are updating "
#~ "the system channel, the `mod_policy` for"
#~ " the system channel will only require"
#~ " the signature of ordering service "
#~ "organization admins."
#~ msgstr ""

#~ msgid "### `Channel` group"
#~ msgstr ""

#~ msgid ""
#~ "Once again, navigate to [Step 1: "
#~ "Pull and translate the "
#~ "config](./config_update.html#step-1-pull-and-translate-"
#~ "the-config). Once you have a "
#~ "`modified_config.json`, add the capabilities "
#~ "to the `Channel` group of the "
#~ "config (as listed in `capabilities.json`) "
#~ "using this command:"
#~ msgstr ""

#~ msgid ""
#~ "``` jq -s '.[0] * "
#~ "{\"channel_group\":{\"values\": {\"Capabilities\": "
#~ ".[1].channel}}}' config.json ./capabilities.json >"
#~ " modified_config.json ```"
#~ msgstr ""

#~ msgid ""
#~ "Note that because you are updating "
#~ "the system channel, the `mod_policy` for"
#~ " the system channel will only require"
#~ " the signature of ordering service "
#~ "organization admins. In an application "
#~ "channel, as you'll see, you would "
#~ "normally need to satisfy both the "
#~ "`MAJORITY` `Admins` policy of both the"
#~ " `Application` group (consisting of the "
#~ "MSPs of peer organizations) and the "
#~ "`Orderer` group (consisting of ordering "
#~ "service organizations), assuming you have "
#~ "not changed the default values."
#~ msgstr ""

#~ msgid "## Enable capabilities on existing channels"
#~ msgstr ""

#~ msgid ""
#~ "As you will see, the configuration "
#~ "of application channels is very similar"
#~ " to that of the system channel. "
#~ "This is what allows us to re-"
#~ "use `capabilities.json` and the same "
#~ "commands we used for updating the "
#~ "system channel (using different environment"
#~ " variables which we will discuss "
#~ "below)."
#~ msgstr ""

#~ msgid ""
#~ "**Make sure all of the ordering "
#~ "nodes in your ordering service and "
#~ "peers on the channel have been "
#~ "upgraded to the required binary level"
#~ " before updating capabilities. If a "
#~ "peer or an ordering node is not"
#~ " at the required level, it will "
#~ "be unable to process the config "
#~ "block with the capability and will "
#~ "crash**. For more information, check out"
#~ " [Capabilities](./capabilities_concept.html)."
#~ msgstr ""

#~ msgid ""
#~ "`CH_NAME`: the name of the application"
#~ " channel being updated. You will have"
#~ " to reset this variable for every "
#~ "channel you update."
#~ msgstr ""

#~ msgid ""
#~ "`CORE_PEER_LOCALMSPID`: the MSP ID of "
#~ "the organization proposing the channel "
#~ "update. This will be the MSP of"
#~ " your peer organization."
#~ msgstr ""

#~ msgid ""
#~ "`TLS_ROOT_CA`: the absolute path to the"
#~ " TLS cert of your peer organization."
#~ msgstr ""

#~ msgid ""
#~ "Navigate to [Step 1: Pull and "
#~ "translate the config](./config_update.html#step-1-pull-"
#~ "and-translate-the-config). Once you "
#~ "have a `modified_config.json`, add the "
#~ "capabilities to the `Orderer` group of"
#~ " the config (as listed in "
#~ "`capabilities.json`) using this command:"
#~ msgstr ""

#~ msgid ""
#~ "Note the `mod_policy` for this "
#~ "capability defaults to the `MAJORITY` of"
#~ " the `Admins` of the `Orderer` group"
#~ " (in other words, a majority of "
#~ "the admins of the ordering service). "
#~ "Peer organizations can propose an update"
#~ " to this capability, but their "
#~ "signatures will not satisfy the relevant"
#~ " policy in this case."
#~ msgstr ""

#~ msgid ""
#~ "Navigate to [Step 1: Pull and "
#~ "translate the config](./config_update.html#step-1-pull-"
#~ "and-translate-the-config). Once you "
#~ "have a `modified_config.json`, add the "
#~ "capabilities to the `Channel` group of"
#~ " the config (as listed in "
#~ "`capabilities.json`) using this command:"
#~ msgstr ""

#~ msgid ""
#~ "Note that the `mod_policy` for this "
#~ "capability defaults to requiring signatures"
#~ " from both the `MAJORITY` of `Admins`"
#~ " in the `Application` and `Orderer` "
#~ "groups. In other words, both a "
#~ "majority of the peer organization admins"
#~ " and ordering service organization admins"
#~ " must sign this request."
#~ msgstr ""

#~ msgid "### `Application` group"
#~ msgstr ""

#~ msgid ""
#~ "Navigate to [Step 1: Pull and "
#~ "translate the config](./config_update.html#step-1-pull-"
#~ "and-translate-the-config). Once you "
#~ "have a `modified_config.json`, add the "
#~ "capabilities to the `Application` group "
#~ "of the config (as listed in "
#~ "`capabilities.json`) using this command:"
#~ msgstr ""

#~ msgid ""
#~ "``` jq -s '.[0] * "
#~ "{\"channel_group\":{\"groups\":{\"Application\": {\"values\":"
#~ " {\"Capabilities\": .[1].application}}}}}' config.json"
#~ " ./capabilities.json > modified_config.json ```"
#~ msgstr ""

#~ msgid ""
#~ "Note that the `mod_policy` for this "
#~ "capability defaults to requiring signatures"
#~ " from the `MAJORITY` of `Admins` in"
#~ " the `Application` group. In other "
#~ "words, a majority of peer organizations"
#~ " will need to approve. Ordering "
#~ "service admins have no say in this"
#~ " capability."
#~ msgstr ""

#~ msgid ""
#~ "**As a result, be very careful to"
#~ " not change this capability to a "
#~ "level that does not exist**. Because "
#~ "ordering nodes neither understand nor "
#~ "validate `Application` capabilities, they will"
#~ " approve a configuration to any level"
#~ " and send the new config block "
#~ "to the peers to be committed to"
#~ " their ledgers. However, the peers "
#~ "will be unable to process the "
#~ "capability and will crash. And even "
#~ "it was possible to drive a "
#~ "corrected configuration change to a "
#~ "valid capability level, the previous "
#~ "config block with the faulty capability"
#~ " would still exist on the ledger "
#~ "and cause peers to crash when "
#~ "trying to process it."
#~ msgstr ""

#~ msgid ""
#~ "This is one reason why a file "
#~ "like `capabilities.json` can be useful. "
#~ "It prevents a simple user error "
#~ "--- for example, setting the "
#~ "`Application` capability to `V20` when "
#~ "the intent was to set it to "
#~ "`V2_0` --- that can cause a "
#~ "channel to be unusable and "
#~ "unrecoverable."
#~ msgstr ""

#~ msgid "## Verify a transaction after capabilities have been enabled"
#~ msgstr ""

#~ msgid ""
#~ "<!--- Licensed under Creative Commons "
#~ "Attribution 4.0 International License "
#~ "https://creativecommons.org/licenses/by/4.0/ -->"
#~ msgstr ""

