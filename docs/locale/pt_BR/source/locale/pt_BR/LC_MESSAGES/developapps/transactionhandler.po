# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, hyperledger
# This file is distributed under the same license as the
# hyperledger-fabricdocs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: hyperledger-fabricdocs master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-24 19:11-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../source/developapps/transactionhandler.md:1
msgid "Transaction handlers"
msgstr ""

#: ../../source/developapps/transactionhandler.md:3
msgid "Audience: Architects, Application and smart contract developers"
msgstr ""

#: ../../source/developapps/transactionhandler.md:5
msgid ""
"Transaction handlers allow smart contract developers to define common "
"processing at key points during the interaction between an application "
"and a smart contract. Transaction handlers are optional but, if defined, "
"they will receive control before or after every transaction in a smart "
"contract is invoked. There is also a specific handler which receives "
"control when a request is made to invoke a transaction not defined in a "
"smart contract."
msgstr ""

#: ../../source/developapps/transactionhandler.md:12
msgid ""
"Here's an example of transaction handlers for the commercial paper smart "
"contract sample:"
msgstr ""

#: ../../source/developapps/transactionhandler.md:15
msgid "develop.transactionhandler"
msgstr ""

#: ../../source/developapps/transactionhandler.md:17
msgid ""
"Before, After and Unknown transaction handlers. In this example, "
"beforeTransaction() is called before the issue, buy and redeem "
"transactions. afterTransaction() is called after the issue, buy and "
"redeem transactions. unknownTransaction() is only called if a request is "
"made to invoke a transaction not defined in the smart contract.  (The "
"diagram is simplified by not repeating beforeTransaction and "
"afterTransaction boxes for each transaction.)"
msgstr ""

#: ../../source/developapps/transactionhandler.md:25
msgid "Types of handler"
msgstr ""

#: ../../source/developapps/transactionhandler.md:27
msgid ""
"There are three types of transaction handlers which cover different "
"aspects of the interaction between an application and a smart contract:"
msgstr ""

#: ../../source/developapps/transactionhandler.md:30
msgid ""
"Before handler: is called before every smart contract transaction is "
"invoked. The handler will usually modify the transaction context to be "
"used by the transaction. The handler has access to the full range of "
"Fabric APIs; for example, it can issue getState() and putState()."
msgstr ""

#: ../../source/developapps/transactionhandler.md:36
msgid ""
"After handler: is called after every smart contract transaction is "
"invoked. The handler will usually perform post-processing common to all "
"transactions, and also has full access to the Fabric APIs."
msgstr ""

#: ../../source/developapps/transactionhandler.md:41
msgid ""
"Unknown handler: is called if an attempt is made to invoke a transaction "
"that is not defined in a smart contract. Typically, the handler will "
"record the failure for subsequent processing by an administrator. The "
"handler has full access to the Fabric APIs."
msgstr ""

#: ../../source/developapps/transactionhandler.md:46
msgid ""
"Defining a transaction handler is optional; a smart contract will perform"
" correctly without handlers being defined. A smart contract can define at"
" most one handler of each type."
msgstr ""

#: ../../source/developapps/transactionhandler.md:50
msgid "Defining a handler"
msgstr ""

#: ../../source/developapps/transactionhandler.md:52
msgid ""
"Transaction handlers are added to the smart contract as methods with well"
" defined names.  Here's an example which adds a handler of each type:"
msgstr ""

#: ../../source/developapps/transactionhandler.md:78
msgid ""
"The form of a transaction handler definition is the similar for all "
"handler types, but notice how the afterTransaction(ctx, result) also "
"receives any result returned by the transaction. The API documentation "
"shows you the exact form of these handlers."
msgstr ""

#: ../../source/developapps/transactionhandler.md:84
msgid "Handler processing"
msgstr ""

#: ../../source/developapps/transactionhandler.md:86
msgid ""
"Once a handler has been added to the smart contract, it will be invoked "
"during transaction processing. During processing, the handler receives "
"ctx, the transaction context, performs some processing, and returns "
"control as it completes. Processing continues as follows:"
msgstr ""

#: ../../source/developapps/transactionhandler.md:91
msgid ""
"Before handler: If the handler completes successfully, the transaction is"
" called with the updated context. If the handler throws an exception, "
"then the transaction is not called and the smart contract fails with the "
"exception error message."
msgstr ""

#: ../../source/developapps/transactionhandler.md:97
msgid ""
"After handler: If the handler completes successfully, then the smart "
"contract completes as determined by the invoked transaction. If the "
"handler throws an exception, then the transaction fails with the "
"exception error message."
msgstr ""

#: ../../source/developapps/transactionhandler.md:103
msgid ""
"Unknown handler: The handler should complete by throwing an exception "
"with the required error message. If an Unknown handler is not specified, "
"or an exception is not thrown by it, there is sensible default "
"processing; the smart contract will fail with an unknown transaction "
"error message."
msgstr ""

#: ../../source/developapps/transactionhandler.md:108
msgid ""
"If the handler requires access to the function and parameters, then it is"
" easy to do this:"
msgstr ""

#: ../../source/developapps/transactionhandler.md:120
msgid ""
"See how this handler uses the utility API getFunctionAndParameters via "
"the transaction context."
msgstr ""

#: ../../source/developapps/transactionhandler.md:123
msgid "Multiple handlers"
msgstr ""

#: ../../source/developapps/transactionhandler.md:125
msgid ""
"It is only possible to define at most one handler of each type for a "
"smart contract. If a smart contract needs to invoke multiple functions "
"during before, after or unknown handling, it should coordinate this from "
"within the appropriate function."
msgstr ""

#~ msgid "Transaction handlers"
#~ msgstr ""

#~ msgid "Audience: Architects, Application and smart contract developers"
#~ msgstr ""

#~ msgid ""
#~ "Here's an example of transaction "
#~ "handlers for the commercial paper smart"
#~ " contract sample:"
#~ msgstr ""

#~ msgid "develop.transactionhandler"
#~ msgstr ""

#~ msgid ""
#~ "Before, After and Unknown transaction "
#~ "handlers. In this example, beforeTransaction()"
#~ " is called before the issue, buy "
#~ "and redeem transactions. afterTransaction() is"
#~ " called after the issue, buy and "
#~ "redeem transactions. unknownTransaction() is "
#~ "only called if a request is made"
#~ " to invoke a transaction not defined"
#~ " in the smart contract.  (The diagram"
#~ " is simplified by not repeating "
#~ "beforeTransaction and afterTransaction boxes "
#~ "for each transaction.)"
#~ msgstr ""

#~ msgid "Types of handler"
#~ msgstr ""

#~ msgid ""
#~ "Before handler: is called before every"
#~ " smart contract transaction is invoked. "
#~ "The handler will usually modify the "
#~ "transaction context to be used by "
#~ "the transaction. The handler has access"
#~ " to the full range of Fabric "
#~ "APIs; for example, it can issue "
#~ "getState() and putState()."
#~ msgstr ""

#~ msgid ""
#~ "After handler: is called after every "
#~ "smart contract transaction is invoked. "
#~ "The handler will usually perform "
#~ "post-processing common to all transactions,"
#~ " and also has full access to "
#~ "the Fabric APIs."
#~ msgstr ""

#~ msgid ""
#~ "Unknown handler: is called if an "
#~ "attempt is made to invoke a "
#~ "transaction that is not defined in "
#~ "a smart contract. Typically, the handler"
#~ " will record the failure for "
#~ "subsequent processing by an administrator. "
#~ "The handler has full access to the"
#~ " Fabric APIs."
#~ msgstr ""

#~ msgid "Defining a handler"
#~ msgstr ""

#~ msgid ""
#~ "The form of a transaction handler "
#~ "definition is the similar for all "
#~ "handler types, but notice how the "
#~ "afterTransaction(ctx, result) also receives "
#~ "any result returned by the transaction."
#~ " The API documentation shows you the"
#~ " exact form of these handlers."
#~ msgstr ""

#~ msgid "Handler processing"
#~ msgstr ""

#~ msgid ""
#~ "Once a handler has been added to"
#~ " the smart contract, it will be "
#~ "invoked during transaction processing. During"
#~ " processing, the handler receives ctx, "
#~ "the transaction context, performs some "
#~ "processing, and returns control as it"
#~ " completes. Processing continues as "
#~ "follows:"
#~ msgstr ""

#~ msgid ""
#~ "Before handler: If the handler completes"
#~ " successfully, the transaction is called"
#~ " with the updated context. If the "
#~ "handler throws an exception, then the"
#~ " transaction is not called and the"
#~ " smart contract fails with the "
#~ "exception error message."
#~ msgstr ""

#~ msgid ""
#~ "After handler: If the handler completes"
#~ " successfully, then the smart contract "
#~ "completes as determined by the invoked"
#~ " transaction. If the handler throws "
#~ "an exception, then the transaction fails"
#~ " with the exception error message."
#~ msgstr ""

#~ msgid ""
#~ "Unknown handler: The handler should "
#~ "complete by throwing an exception with"
#~ " the required error message. If an"
#~ " Unknown handler is not specified, or"
#~ " an exception is not thrown by "
#~ "it, there is sensible default "
#~ "processing; the smart contract will fail"
#~ " with an unknown transaction error "
#~ "message."
#~ msgstr ""

#~ msgid ""
#~ "See how this handler uses the "
#~ "utility API getFunctionAndParameters via the"
#~ " transaction context."
#~ msgstr ""

#~ msgid "Multiple handlers"
#~ msgstr ""

#~ msgid "# Transaction handlers"
#~ msgstr ""

#~ msgid "**Audience**: Architects, Application and smart contract developers"
#~ msgstr ""

#~ msgid ""
#~ "Here's an example of transaction "
#~ "handlers for the [commercial paper smart"
#~ " contract sample](./smartcontract.html):"
#~ msgstr ""

#~ msgid "![develop.transactionhandler](./develop.diagram.2.png)"
#~ msgstr ""

#~ msgid ""
#~ "*Before, After and Unknown transaction "
#~ "handlers. In this example, "
#~ "`beforeTransaction()` is called before the "
#~ "**issue**, **buy** and **redeem** "
#~ "transactions. `afterTransaction()` is called "
#~ "after the **issue**, **buy** and "
#~ "**redeem** transactions. `unknownTransaction()` is"
#~ " only called if a request is "
#~ "made to invoke a transaction not "
#~ "defined in the smart contract.  (The "
#~ "diagram is simplified by not repeating"
#~ " `beforeTransaction` and `afterTransaction` boxes"
#~ " for each transaction.)*"
#~ msgstr ""

#~ msgid "## Types of handler"
#~ msgstr ""

#~ msgid ""
#~ "**Before handler**: is called before "
#~ "every smart contract transaction is "
#~ "invoked. The handler will usually modify"
#~ " the transaction context to be used"
#~ " by the transaction. The handler has"
#~ " access to the full range of "
#~ "Fabric APIs; for example, it can "
#~ "issue `getState()` and `putState()`."
#~ msgstr ""

#~ msgid ""
#~ "**After handler**: is called after every"
#~ " smart contract transaction is invoked. "
#~ "The handler will usually perform "
#~ "post-processing common to all transactions,"
#~ " and also has full access to "
#~ "the Fabric APIs."
#~ msgstr ""

#~ msgid ""
#~ "**Unknown handler**: is called if an "
#~ "attempt is made to invoke a "
#~ "transaction that is not defined in "
#~ "a smart contract. Typically, the handler"
#~ " will record the failure for "
#~ "subsequent processing by an administrator. "
#~ "The handler has full access to the"
#~ " Fabric APIs."
#~ msgstr ""

#~ msgid "## Defining a handler"
#~ msgstr ""

#~ msgid "```JavaScript CommercialPaperContract extends Contract {"
#~ msgstr ""

#~ msgid "..."
#~ msgstr ""

#~ msgid "async beforeTransaction(ctx) {"
#~ msgstr ""

#~ msgid ""
#~ "// Write the transaction ID as an"
#~ " informational to the console "
#~ "console.info(ctx.stub.getTxID());"
#~ msgstr ""

#~ msgid "};"
#~ msgstr ""

#~ msgid "async afterTransaction(ctx, result) {"
#~ msgstr ""

#~ msgid ""
#~ "// This handler interacts with the "
#~ "ledger ctx.stub.cpList.putState(...);"
#~ msgstr ""

#~ msgid "async unknownTransaction(ctx) {"
#~ msgstr ""

#~ msgid ""
#~ "// This handler throws an exception "
#~ "throw new Error('Unknown transaction "
#~ "function');"
#~ msgstr ""

#~ msgid "}"
#~ msgstr ""

#~ msgid ""
#~ "The form of a transaction handler "
#~ "definition is the similar for all "
#~ "handler types, but notice how the "
#~ "`afterTransaction(ctx, result)` also receives "
#~ "any result returned by the transaction."
#~ " The [API documentation](https://hyperledger.github.io"
#~ "/fabric-chaincode-node/master/api/fabric-contract-"
#~ "api.Contract.html) shows you the exact "
#~ "form of these handlers."
#~ msgstr ""

#~ msgid "## Handler processing"
#~ msgstr ""

#~ msgid ""
#~ "Once a handler has been added to"
#~ " the smart contract, it will be "
#~ "invoked during transaction processing. During"
#~ " processing, the handler receives `ctx`,"
#~ " the [transaction context](./transationcontext.md), "
#~ "performs some processing, and returns "
#~ "control as it completes. Processing "
#~ "continues as follows:"
#~ msgstr ""

#~ msgid ""
#~ "**Before handler**: If the handler "
#~ "completes successfully, the transaction is "
#~ "called with the updated context. If "
#~ "the handler throws an exception, then"
#~ " the transaction is not called and"
#~ " the smart contract fails with the"
#~ " exception error message."
#~ msgstr ""

#~ msgid ""
#~ "**After handler**: If the handler "
#~ "completes successfully, then the smart "
#~ "contract completes as determined by the"
#~ " invoked transaction. If the handler "
#~ "throws an exception, then the "
#~ "transaction fails with the exception "
#~ "error message."
#~ msgstr ""

#~ msgid ""
#~ "**Unknown handler**: The handler should "
#~ "complete by throwing an exception with"
#~ " the required error message. If an"
#~ " **Unknown handler** is not specified, "
#~ "or an exception is not thrown by"
#~ " it, there is sensible default "
#~ "processing; the smart contract will fail"
#~ " with an **unknown transaction** error "
#~ "message."
#~ msgstr ""

#~ msgid "```JavaScript async beforeTransaction(ctx) {"
#~ msgstr ""

#~ msgid ""
#~ "// Retrieve details of the transaction"
#~ " let txnDetails = "
#~ "ctx.stub.getFunctionAndParameters();"
#~ msgstr ""

#~ msgid ""
#~ "console.info(`Calling function: ${txnDetails.fcn} "
#~ "`); console.info(util.format(`Function arguments :"
#~ " %j ${stub.getArgs()} ``);"
#~ msgstr ""

#~ msgid ""
#~ "See how this handler uses the "
#~ "utility API `getFunctionAndParameters` via the"
#~ " [transaction context](./transactioncontext.html#stub)."
#~ msgstr ""

#~ msgid "## Multiple handlers"
#~ msgstr ""

