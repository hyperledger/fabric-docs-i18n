# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, hyperledger
# This file is distributed under the same license as the
# hyperledger-fabricdocs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: hyperledger-fabricdocs master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-23 15:31-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../source/discovery-overview.rst:2
msgid "Service Discovery"
msgstr ""

#: ../../source/discovery-overview.rst:5
msgid "Why do we need service discovery?"
msgstr ""

#: ../../source/discovery-overview.rst:7
msgid ""
"In order to execute chaincode on peers, submit transactions to orderers, "
"and to be updated about the status of transactions, applications connect "
"to an API exposed by an SDK."
msgstr ""

#: ../../source/discovery-overview.rst:11
msgid ""
"However, the SDK needs a lot of information in order to allow "
"applications to connect to the relevant network nodes. In addition to the"
" CA and TLS certificates of the orderers and peers on the channel -- as "
"well as their IP addresses and port numbers -- it must know the relevant "
"endorsement policies as well as which peers have the chaincode installed "
"(so the application knows which peers to send chaincode proposals to)."
msgstr ""

#: ../../source/discovery-overview.rst:18
msgid ""
"Prior to v1.2, this information was statically encoded. However, this "
"implementation is not dynamically reactive to network changes (such as "
"the addition of peers who have installed the relevant chaincode, or peers"
" that are temporarily offline). Static configurations also do not allow "
"applications to react to changes of the endorsement policy itself (as "
"might happen when a new organization joins a channel)."
msgstr ""

#: ../../source/discovery-overview.rst:24
msgid ""
"In addition, the client application has no way of knowing which peers "
"have updated ledgers and which do not. As a result, the application might"
" submit proposals to peers whose ledger data is not in sync with the rest"
" of the network, resulting in transaction being invalidated upon commit "
"and wasting resources as a consequence."
msgstr ""

#: ../../source/discovery-overview.rst:29
msgid ""
"The **discovery service** improves this process by having the peers "
"compute the needed information dynamically and present it to the SDK in a"
" consumable manner."
msgstr ""

#: ../../source/discovery-overview.rst:34
msgid "How service discovery works in Fabric"
msgstr ""

#: ../../source/discovery-overview.rst:36
msgid ""
"The application is bootstrapped knowing about a group of peers which are "
"trusted by the application developer/administrator to provide authentic "
"responses to discovery queries. A good candidate peer to be used by the "
"client application is one that is in the same organization. Note that in "
"order for peers to be known to the discovery service, they must have an "
"``EXTERNAL_ENDPOINT`` defined. To see how to do this, check out our :doc"
":`discovery-cli` documentation."
msgstr ""

#: ../../source/discovery-overview.rst:43
msgid ""
"The application issues a configuration query to the discovery service and"
" obtains all the static information it would have otherwise needed to "
"communicate with the rest of the nodes of the network. This information "
"can be refreshed at any point by sending a subsequent query to the "
"discovery service of a peer."
msgstr ""

#: ../../source/discovery-overview.rst:48
msgid ""
"The service runs on peers -- not on the application -- and uses the "
"network metadata information maintained by the gossip communication layer"
" to find out which peers are online. It also fetches information, such as"
" any relevant endorsement policies, from the peer's state database."
msgstr ""

#: ../../source/discovery-overview.rst:53
msgid ""
"With service discovery, applications no longer need to specify which "
"peers they need endorsements from. The SDK can simply send a query to the"
" discovery service asking which peers are needed given a channel and a "
"chaincode ID. The discovery service will then compute a descriptor "
"comprised of two objects:"
msgstr ""

#: ../../source/discovery-overview.rst:58
msgid ""
"**Layouts**: a list of groups of peers and a corresponding amount of "
"peers from each group which should be selected."
msgstr ""

#: ../../source/discovery-overview.rst:60
msgid ""
"**Group to peer mapping**: from the groups in the layouts to the peers of"
" the channel. In practice, each group would most likely be peers that "
"represent individual organizations, but because the service API is "
"generic and ignorant of organizations this is just a \"group\"."
msgstr ""

#: ../../source/discovery-overview.rst:65
msgid ""
"The following is an example of a descriptor from the evaluation of a "
"policy of ``AND(Org1, Org2)`` where there are two peers in each of the "
"organizations."
msgstr ""

#: ../../source/discovery-overview.rst:81
msgid ""
"In other words, the endorsement policy requires a signature from one peer"
" in Org1 and one peer in Org2. And it provides the names of available "
"peers in those orgs who can endorse (``peer0`` and ``peer1`` in both Org1"
" and in Org2)."
msgstr ""

#: ../../source/discovery-overview.rst:85
msgid ""
"The SDK then selects a random layout from the list. In the example above,"
" the endorsement policy is Org1 ``AND`` Org2. If instead it was an ``OR``"
" policy, the SDK would randomly select either Org1 or Org2, since a "
"signature from a peer from either Org would satisfy the policy."
msgstr ""

#: ../../source/discovery-overview.rst:90
msgid ""
"After the SDK has selected a layout, it selects from the peers in the "
"layout based on a criteria specified on the client side (the SDK can do "
"this because it has access to metadata like ledger height). For example, "
"it can prefer peers with higher ledger heights over others -- or to "
"exclude peers that the application has discovered to be offline -- "
"according to the number of peers from each group in the layout. If no "
"single peer is preferable based on the criteria, the SDK will randomly "
"select from the peers that best meet the criteria."
msgstr ""

#: ../../source/discovery-overview.rst:99
msgid "Capabilities of the discovery service"
msgstr ""

#: ../../source/discovery-overview.rst:101
msgid "The discovery service can respond to the following queries:"
msgstr ""

#: ../../source/discovery-overview.rst:103
msgid ""
"**Configuration query**: Returns the ``MSPConfig`` of all organizations "
"in the channel along with the orderer endpoints of the channel."
msgstr ""

#: ../../source/discovery-overview.rst:105
msgid "**Peer membership query**: Returns the peers that have joined the channel."
msgstr ""

#: ../../source/discovery-overview.rst:106
msgid ""
"**Endorsement query**: Returns an endorsement descriptor for given "
"chaincode(s) in a channel."
msgstr ""

#: ../../source/discovery-overview.rst:108
msgid ""
"**Local peer membership query**: Returns the local membership information"
" of the peer that responds to the query. By default the client needs to "
"be an administrator for the peer to respond to this query."
msgstr ""

#: ../../source/discovery-overview.rst:113
msgid "Special requirements"
msgstr ""

#: ../../source/discovery-overview.rst:114
msgid ""
"When the peer is running with TLS enabled the client must provide a TLS "
"certificate when connecting to the peer. If the peer isn't configured to "
"verify client certificates (clientAuthRequired is false), this TLS "
"certificate can be self-signed."
msgstr ""

