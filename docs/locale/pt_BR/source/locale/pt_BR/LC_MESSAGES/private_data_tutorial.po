# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, hyperledger
# This file is distributed under the same license as the
# hyperledger-fabricdocs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: hyperledger-fabricdocs master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-23 15:31-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../source/private_data_tutorial.rst:2
msgid "Using Private Data in Fabric"
msgstr ""

#: ../../source/private_data_tutorial.rst:4
msgid ""
"This tutorial will demonstrate the use of collections to provide storage "
"and retrieval of private data on the blockchain network for authorized "
"peers of organizations."
msgstr ""

#: ../../source/private_data_tutorial.rst:8
msgid ""
"The information in this tutorial assumes knowledge of private data stores"
" and their use cases. For more information, check out :doc:`private-data"
"/private-data`."
msgstr ""

#: ../../source/private_data_tutorial.rst:11
msgid ""
"These instructions use the new Fabric chaincode lifecycle introduced in "
"the Fabric v2.0 release. If you would like to use the previous lifecycle "
"model to use private data with chaincode, visit the v1.4 version of the "
"`Using Private Data in Fabric tutorial <https://hyperledger-"
"fabric.readthedocs.io/en/release-1.4/private_data_tutorial.html>`__."
msgstr ""

#: ../../source/private_data_tutorial.rst:16
msgid ""
"The tutorial will take you through the following steps to practice "
"defining, configuring and using private data with Fabric:"
msgstr ""

#: ../../source/private_data_tutorial.rst:19
msgid ":ref:`pd-build-json`"
msgstr ""

#: ../../source/private_data_tutorial.rst:20
msgid ":ref:`pd-read-write-private-data`"
msgstr ""

#: ../../source/private_data_tutorial.rst:21
msgid ":ref:`pd-install-define_cc`"
msgstr ""

#: ../../source/private_data_tutorial.rst:22
msgid ":ref:`pd-store-private-data`"
msgstr ""

#: ../../source/private_data_tutorial.rst:23
msgid ":ref:`pd-query-authorized`"
msgstr ""

#: ../../source/private_data_tutorial.rst:24
msgid ":ref:`pd-query-unauthorized`"
msgstr ""

#: ../../source/private_data_tutorial.rst:25
msgid ":ref:`pd-purge`"
msgstr ""

#: ../../source/private_data_tutorial.rst:26
msgid ":ref:`pd-indexes`"
msgstr ""

#: ../../source/private_data_tutorial.rst:27
msgid ":ref:`pd-ref-material`"
msgstr ""

#: ../../source/private_data_tutorial.rst:29
msgid ""
"This tutorial will deploy the `marbles private data sample "
"<https://github.com/hyperledger/fabric-"
"samples/tree/master/chaincode/marbles02_private>`__ to the Fabric test "
"network to demonstrate how to create, deploy, and use a collection of "
"private data. You should have completed the task :doc:`install`."
msgstr ""

#: ../../source/private_data_tutorial.rst:36
msgid "Build a collection definition JSON file"
msgstr ""

#: ../../source/private_data_tutorial.rst:38
msgid ""
"The first step in privatizing data on a channel is to build a collection "
"definition which defines access to the private data."
msgstr ""

#: ../../source/private_data_tutorial.rst:41
msgid ""
"The collection definition describes who can persist data, how many peers "
"the data is distributed to, how many peers are required to disseminate "
"the private data, and how long the private data is persisted in the "
"private database. Later, we will demonstrate how chaincode APIs "
"``PutPrivateData`` and ``GetPrivateData`` are used to map the collection "
"to the private data being secured."
msgstr ""

#: ../../source/private_data_tutorial.rst:47
msgid "A collection definition is composed of the following properties:"
msgstr ""

#: ../../source/private_data_tutorial.rst:51
msgid "``name``: Name of the collection."
msgstr ""

#: ../../source/private_data_tutorial.rst:53
msgid ""
"``policy``: Defines the organization peers allowed to persist the "
"collection data."
msgstr ""

#: ../../source/private_data_tutorial.rst:55
msgid ""
"``requiredPeerCount``: Number of peers required to disseminate the "
"private data as a condition of the endorsement of the chaincode"
msgstr ""

#: ../../source/private_data_tutorial.rst:58
msgid ""
"``maxPeerCount``: For data redundancy purposes, the number of other peers"
" that the current endorsing peer will attempt to distribute the data to. "
"If an endorsing peer goes down, these other peers are available at commit"
" time if there are requests to pull the private data."
msgstr ""

#: ../../source/private_data_tutorial.rst:63
msgid ""
"``blockToLive``: For very sensitive information such as pricing or "
"personal information, this value represents how long the data should live"
" on the private database in terms of blocks. The data will live for this "
"specified number of blocks on the private database and after that it will"
" get purged, making this data obsolete from the network. To keep private "
"data indefinitely, that is, to never purge private data, set the "
"``blockToLive`` property to ``0``."
msgstr ""

#: ../../source/private_data_tutorial.rst:70
msgid ""
"``memberOnlyRead``: a value of ``true`` indicates that peers "
"automatically enforce that only clients belonging to one of the "
"collection member organizations are allowed read access to private data."
msgstr ""

#: ../../source/private_data_tutorial.rst:74
msgid ""
"To illustrate usage of private data, the marbles private data example "
"contains two private data collection definitions: ``collectionMarbles`` "
"and ``collectionMarblePrivateDetails``. The ``policy`` property in the "
"``collectionMarbles`` definition allows all members of  the channel (Org1"
" and Org2) to have the private data in a private database. The "
"``collectionMarblesPrivateDetails`` collection allows only members of "
"Org1 to have the private data in their private database."
msgstr ""

#: ../../source/private_data_tutorial.rst:82
msgid ""
"For more information on building a policy definition refer to the :doc"
":`endorsement-policies` topic."
msgstr ""

#: ../../source/private_data_tutorial.rst:109
msgid ""
"The data to be secured by these policies is mapped in chaincode and will "
"be shown later in the tutorial."
msgstr ""

#: ../../source/private_data_tutorial.rst:112
msgid ""
"This collection definition file is deployed when the chaincode definition"
" is committed to the channel using the `peer lifecycle chaincode commit "
"command <commands/peerlifecycle.html#peer-lifecycle-chaincode-commit>`__."
" More details on this process are provided in Section 3 below."
msgstr ""

#: ../../source/private_data_tutorial.rst:119
msgid "Read and Write private data using chaincode APIs"
msgstr ""

#: ../../source/private_data_tutorial.rst:121
msgid ""
"The next step in understanding how to privatize data on a channel is to "
"build the data definition in the chaincode. The marbles private data "
"sample divides the private data into two separate data definitions "
"according to how the data will be accessed."
msgstr ""

#: ../../source/private_data_tutorial.rst:144
msgid "Specifically access to the private data will be restricted as follows:"
msgstr ""

#: ../../source/private_data_tutorial.rst:146
msgid ""
"``name, color, size, and owner`` will be visible to all members of the "
"channel (Org1 and Org2)"
msgstr ""

#: ../../source/private_data_tutorial.rst:147
msgid "``price`` only visible to members of Org1"
msgstr ""

#: ../../source/private_data_tutorial.rst:149
msgid ""
"Thus two different sets of private data are defined in the marbles "
"private data sample. The mapping of this data to the collection policy "
"which restricts its access is controlled by chaincode APIs. Specifically,"
" reading and writing private data using a collection definition is "
"performed by calling ``GetPrivateData()`` and ``PutPrivateData()``, which"
" can be found `here <https://godoc.org/github.com/hyperledger/fabric-"
"chaincode-go/shim#ChaincodeStub>`_."
msgstr ""

#: ../../source/private_data_tutorial.rst:155
msgid ""
"The following diagram illustrates the private data model used by the "
"marbles private data sample."
msgstr ""

#: ../../source/private_data_tutorial.rst:162
msgid "Reading collection data"
msgstr ""

#: ../../source/private_data_tutorial.rst:164
msgid ""
"Use the chaincode API ``GetPrivateData()`` to query private data in the "
"database.  ``GetPrivateData()`` takes two arguments, the **collection "
"name** and the data key. Recall the collection  ``collectionMarbles`` "
"allows members of Org1 and Org2 to have the private data in a side "
"database, and the collection ``collectionMarblePrivateDetails`` allows "
"only members of Org1 to have the private data in a side database. For "
"implementation details refer to the following two `marbles private data "
"functions <https://github.com/hyperledger/fabric-"
"samples/blob/master/chaincode/marbles02_private/go/marbles_chaincode_private.go>`__:"
msgstr ""

#: ../../source/private_data_tutorial.rst:172
msgid ""
"**readMarble** for querying the values of the ``name, color, size and "
"owner`` attributes"
msgstr ""

#: ../../source/private_data_tutorial.rst:173
msgid ""
"**readMarblePrivateDetails** for querying the values of the ``price`` "
"attribute"
msgstr ""

#: ../../source/private_data_tutorial.rst:175
msgid ""
"When we issue the database queries using the peer commands later in this "
"tutorial, we will call these two functions."
msgstr ""

#: ../../source/private_data_tutorial.rst:179
msgid "Writing private data"
msgstr ""

#: ../../source/private_data_tutorial.rst:181
msgid ""
"Use the chaincode API ``PutPrivateData()`` to store the private data into"
" the private database. The API also requires the name of the collection. "
"Since the marbles private data sample includes two different collections,"
" it is called twice in the chaincode:"
msgstr ""

#: ../../source/private_data_tutorial.rst:186
msgid ""
"Write the private data ``name, color, size and owner`` using the "
"collection named ``collectionMarbles``."
msgstr ""

#: ../../source/private_data_tutorial.rst:188
msgid ""
"Write the private data ``price`` using the collection named "
"``collectionMarblePrivateDetails``."
msgstr ""

#: ../../source/private_data_tutorial.rst:191
msgid ""
"For example, in the following snippet of the ``initMarble`` function, "
"``PutPrivateData()`` is called twice, once for each set of private data."
msgstr ""

#: ../../source/private_data_tutorial.rst:231
msgid ""
"To summarize, the policy definition above for our ``collection.json`` "
"allows all peers in Org1 and Org2 to store and transact with the marbles "
"private data ``name, color, size, owner`` in their private database. But "
"only peers in Org1 can store and transact with the ``price`` private data"
" in its private database."
msgstr ""

#: ../../source/private_data_tutorial.rst:237
msgid ""
"As an additional data privacy benefit, since a collection is being used, "
"only the private data hashes go through orderer, not the private data "
"itself, keeping private data confidential from orderer."
msgstr ""

#: ../../source/private_data_tutorial.rst:242
msgid "Start the network"
msgstr ""

#: ../../source/private_data_tutorial.rst:244
msgid ""
"Now we are ready to step through some commands which demonstrate how to "
"use private data."
msgstr ""

#: ../../source/private_data_tutorial.rst:247
#: ../../source/private_data_tutorial.rst:327
#: ../../source/private_data_tutorial.rst:394
#: ../../source/private_data_tutorial.rst:480
#: ../../source/private_data_tutorial.rst:517
#: ../../source/private_data_tutorial.rst:665
#: ../../source/private_data_tutorial.rst:682
#: ../../source/private_data_tutorial.rst:701
#: ../../source/private_data_tutorial.rst:749
msgid ":guilabel:`Try it yourself`"
msgstr ""

#: ../../source/private_data_tutorial.rst:249
msgid ""
"Before installing, defining, and using the marbles private data chaincode"
" below, we need to start the Fabric test network. For the sake of this "
"tutorial, we want to operate from a known initial state. The following "
"command will kill any active or stale Docker containers and remove "
"previously generated artifacts. Therefore let's run the following command"
" to clean up any previous environments:"
msgstr ""

#: ../../source/private_data_tutorial.rst:261
msgid ""
"If you have not run through the tutorial before, you will need to vendor "
"the chaincode dependencies before we can deploy it to the network. Run "
"the following commands:"
msgstr ""

#: ../../source/private_data_tutorial.rst:272
msgid ""
"If you've already run through this tutorial, you'll also want to delete "
"the underlying Docker containers for the marbles private data chaincode. "
"Let's run the following commands to clean up previous environments:"
msgstr ""

#: ../../source/private_data_tutorial.rst:281
msgid ""
"From the ``test-network`` directory, you can use the following command to"
" start up the Fabric test network with CouchDB:"
msgstr ""

#: ../../source/private_data_tutorial.rst:288
msgid ""
"This command will deploy a Fabric network consisting of a single channel "
"named ``mychannel`` with two organizations (each maintaining one peer "
"node) and an ordering service while using CouchDB as the state database. "
"Either LevelDB or CouchDB may be used with collections. CouchDB was "
"chosen to demonstrate how to use indexes with private data."
msgstr ""

#: ../../source/private_data_tutorial.rst:294
msgid ""
"For collections to work, it is important to have cross organizational "
"gossip configured correctly. Refer to our documentation on :doc:`gossip`,"
" paying particular attention to the section on \"anchor peers\". Our "
"tutorial does not focus on gossip given it is already configured in the "
"test network, but when configuring a channel, the gossip anchors peers "
"are critical to configure for collections to work properly."
msgstr ""

#: ../../source/private_data_tutorial.rst:304
msgid "Install and define a chaincode with a collection"
msgstr ""

#: ../../source/private_data_tutorial.rst:306
msgid ""
"Client applications interact with the blockchain ledger through "
"chaincode. Therefore we need to install a chaincode on every peer that "
"will execute and endorse our transactions. However, before we can "
"interact with our chaincode, the members of the channel need to agree on "
"a chaincode definition that establishes chaincode governance, including "
"the private data collection configuration. We are going to package, "
"install, and then define the chaincode on the channel using "
":doc:`commands/peerlifecycle`."
msgstr ""

#: ../../source/private_data_tutorial.rst:314
msgid ""
"The chaincode needs to be packaged before it can be installed on our "
"peers. We can use the `peer lifecycle chaincode package "
"<commands/peerlifecycle.html#peer-lifecycle-chaincode-package>`__ command"
" to package the marbles chaincode."
msgstr ""

#: ../../source/private_data_tutorial.rst:318
msgid ""
"The test network includes two organizations, Org1 and Org2, with one peer"
" each. Therefore, the chaincode package has to be installed on two peers:"
msgstr ""

#: ../../source/private_data_tutorial.rst:321
msgid "peer0.org1.example.com"
msgstr ""

#: ../../source/private_data_tutorial.rst:322
msgid "peer0.org2.example.com"
msgstr ""

#: ../../source/private_data_tutorial.rst:324
msgid ""
"After the chaincode is packaged, we can use the `peer lifecycle chaincode"
" install <commands/peerlifecycle.html#peer-lifecycle-chaincode-"
"install>`__ command to install the Marbles chaincode on each peer."
msgstr ""

#: ../../source/private_data_tutorial.rst:329
msgid ""
"Assuming you have started the test network, copy and paste the following "
"environment variables in your CLI to interact with the network and "
"operate as the Org1 admin. Make sure that you are in the `test-network` "
"directory."
msgstr ""

#: ../../source/private_data_tutorial.rst:343
msgid "Use the following command to package the marbles private data chaincode."
msgstr ""

#: ../../source/private_data_tutorial.rst:349
msgid "This command will create a chaincode package named marblesp.tar.gz."
msgstr ""

#: ../../source/private_data_tutorial.rst:351
msgid ""
"2. Use the following command to install the chaincode package onto the "
"peer ``peer0.org1.example.com``."
msgstr ""

#: ../../source/private_data_tutorial.rst:358
msgid ""
"A successful install command will return the chaincode identifier, "
"similar to the response below:"
msgstr ""

#: ../../source/private_data_tutorial.rst:366
msgid ""
"3. Now use the CLI as the Org2 admin. Copy and paste the following block "
"of commands as a group and run them all at once:"
msgstr ""

#: ../../source/private_data_tutorial.rst:376
msgid "Run the following command to install the chaincode on the Org2 peer:"
msgstr ""

#: ../../source/private_data_tutorial.rst:384
msgid "Approve the chaincode definition"
msgstr ""

#: ../../source/private_data_tutorial.rst:386
msgid ""
"Each channel member that wants to use the chaincode needs to approve a "
"chaincode definition for their organization. Since both organizations are"
" going to use the chaincode in this tutorial, we need to approve the "
"chaincode definition for both Org1 and Org2 using the `peer lifecycle "
"chaincode approveformyorg <commands/peerlifecycle.html#peer-lifecycle-"
"chaincode-approveformyorg>`__ command. The chaincode definition also "
"includes the private data collection definition that accompanies the "
"``marbles02_private`` sample. We will provide the path to the collections"
" JSON file using the ``--collections-config`` flag."
msgstr ""

#: ../../source/private_data_tutorial.rst:396
msgid ""
"Run the following commands from the ``test-network`` directory to approve"
" a definition for Org1 and Org2."
msgstr ""

#: ../../source/private_data_tutorial.rst:399
msgid ""
"1. Use the following command to query your peer for the package ID of the"
" installed chaincode."
msgstr ""

#: ../../source/private_data_tutorial.rst:406
msgid ""
"The command will return the same package identifier as the install "
"command. You should see output similar to the following:"
msgstr ""

#: ../../source/private_data_tutorial.rst:414
msgid ""
"2. Declare the package ID as an environment variable. Paste the package "
"ID of marblespv1 returned by the ``peer lifecycle chaincode "
"queryinstalled`` into the command below. The package ID may not be the "
"same for all users, so you need to complete this step using the package "
"ID returned from your console."
msgstr ""

#: ../../source/private_data_tutorial.rst:423
msgid ""
"3. Make sure we are running the CLI as Org1. Copy and paste the following"
" block of commands as a group into the peer container and run them all at"
" once:"
msgstr ""

#: ../../source/private_data_tutorial.rst:433
msgid ""
"4. Use the following command to approve a definition of the marbles "
"private data chaincode for Org1. This command includes a path to the "
"collection definition file."
msgstr ""

#: ../../source/private_data_tutorial.rst:442
msgid ""
"When the command completes successfully you should see something similar "
"to:"
msgstr ""

#: ../../source/private_data_tutorial.rst:448
msgid ""
"5. Now use the CLI to switch to Org2. Copy and paste the following block "
"of commands as a group into the peer container and run them all at once."
msgstr ""

#: ../../source/private_data_tutorial.rst:458
msgid "You can now approve the chaincode definition for Org2:"
msgstr ""

#: ../../source/private_data_tutorial.rst:465
msgid "Commit the chaincode definition"
msgstr ""

#: ../../source/private_data_tutorial.rst:467
msgid ""
"Once a sufficient number of organizations (in this case, a majority) have"
" approved a chaincode definition, one organization can commit the "
"definition to the channel."
msgstr ""

#: ../../source/private_data_tutorial.rst:471
msgid ""
"Use the `peer lifecycle chaincode commit <commands/peerlifecycle.html"
"#peer-lifecycle-chaincode-commit>`__ command to commit the chaincode "
"definition. This command will also deploy the collection definition to "
"the channel."
msgstr ""

#: ../../source/private_data_tutorial.rst:475
#, python-format
msgid ""
"We are ready to use the chaincode after the chaincode definition has been"
" committed to the channel. Because the marbles private data chaincode "
"contains an initiation function, we need to use the `peer chaincode "
"invoke <commands/peerchaincode.html?%20chaincode%20instantiate#peer-"
"chaincode-instantiate>`__ command to invoke ``Init()`` before we can use "
"other functions in the chaincode."
msgstr ""

#: ../../source/private_data_tutorial.rst:482
msgid ""
"1. Run the following commands to commit the definition of the marbles "
"private data chaincode to the channel ``mychannel``."
msgstr ""

#: ../../source/private_data_tutorial.rst:493
msgid ""
"When the commit transaction completes successfully you should see "
"something similar to:"
msgstr ""

#: ../../source/private_data_tutorial.rst:501
msgid ""
"2. Use the following command to invoke the ``Init`` function to "
"initialize the chaincode:"
msgstr ""

#: ../../source/private_data_tutorial.rst:511
msgid "Store private data"
msgstr ""

#: ../../source/private_data_tutorial.rst:513
msgid ""
"Acting as a member of Org1, who is authorized to transact with all of the"
" private data in the marbles private data sample, switch back to an Org1 "
"peer and submit a request to add a marble:"
msgstr ""

#: ../../source/private_data_tutorial.rst:519
msgid ""
"Copy and paste the following set of commands into your CLI in the `test-"
"network` directory:"
msgstr ""

#: ../../source/private_data_tutorial.rst:529
msgid ""
"Invoke the marbles ``initMarble`` function which creates a marble with "
"private data ---  name ``marble1`` owned by ``tom`` with a color "
"``blue``, size ``35`` and price of ``99``. Recall that private data "
"**price** will be stored separately from the private data **name, owner, "
"color, size**. For this reason, the ``initMarble`` function calls the "
"``PutPrivateData()`` API twice to persist the private data, once for each"
" collection. Also note that the private data is passed using the "
"``--transient`` flag. Inputs passed as transient data will not be "
"persisted in the transaction in order to keep the data private. Transient"
" data is passed as binary data and therefore when using CLI it must be "
"base64 encoded. We use an environment variable to capture the base64 "
"encoded value, and use ``tr`` command to strip off the problematic "
"newline characters that linux base64 command adds."
msgstr ""

#: ../../source/private_data_tutorial.rst:547
#: ../../source/private_data_tutorial.rst:777
msgid "You should see results similar to:"
msgstr ""

#: ../../source/private_data_tutorial.rst:556
msgid "Query the private data as an authorized peer"
msgstr ""

#: ../../source/private_data_tutorial.rst:558
msgid ""
"Our collection definition allows all members of Org1 and Org2 to have the"
" ``name, color, size, owner`` private data in their side database, but "
"only peers in Org1 can have the ``price`` private data in their side "
"database. As an authorized peer in Org1, we will query both sets of "
"private data."
msgstr ""

#: ../../source/private_data_tutorial.rst:563
msgid ""
"The first ``query`` command calls the ``readMarble`` function which "
"passes ``collectionMarbles`` as an argument."
msgstr ""

#: ../../source/private_data_tutorial.rst:593
msgid ""
"The second ``query`` command calls the ``readMarblePrivateDetails`` "
"function which passes ``collectionMarblePrivateDetails`` as an argument."
msgstr ""

#: ../../source/private_data_tutorial.rst:623
msgid "Now :guilabel:`Try it yourself`"
msgstr ""

#: ../../source/private_data_tutorial.rst:625
msgid ""
"Query for the ``name, color, size and owner`` private data of ``marble1``"
" as a member of Org1. Note that since queries do not get recorded on the "
"ledger, there is no need to pass the marble name as a transient input."
msgstr ""

#: ../../source/private_data_tutorial.rst:633
#: ../../source/private_data_tutorial.rst:645
msgid "You should see the following result:"
msgstr ""

#: ../../source/private_data_tutorial.rst:639
msgid "Query for the ``price`` private data of ``marble1`` as a member of Org1."
msgstr ""

#: ../../source/private_data_tutorial.rst:654
msgid "Query the private data as an unauthorized peer"
msgstr ""

#: ../../source/private_data_tutorial.rst:656
msgid ""
"Now we will switch to a member of Org2. Org2 has the marbles private data"
" ``name, color, size, owner`` in its side database, but does not store "
"the marbles ``price`` data. We will query for both sets of private data."
msgstr ""

#: ../../source/private_data_tutorial.rst:661
msgid "Switch to a peer in Org2"
msgstr ""

#: ../../source/private_data_tutorial.rst:663
msgid ""
"Run the following commands to operate as the Org2 admin and query the "
"Org2 peer."
msgstr ""

#: ../../source/private_data_tutorial.rst:675
msgid "Query private data Org2 is authorized to"
msgstr ""

#: ../../source/private_data_tutorial.rst:677
msgid ""
"Peers in Org2 should have the first set of marbles private data (``name, "
"color, size and owner``) in their side database and can access it using "
"the ``readMarble()`` function which is called with the "
"``collectionMarbles`` argument."
msgstr ""

#: ../../source/private_data_tutorial.rst:688
msgid "You should see something similar to the following result:"
msgstr ""

#: ../../source/private_data_tutorial.rst:695
msgid "Query private data Org2 is not authorized to"
msgstr ""

#: ../../source/private_data_tutorial.rst:697
msgid ""
"Peers in Org2 do not have the marbles ``price`` private data in their "
"side database. When they try to query for this data, they get back a hash"
" of the key matching the public state but will not have the private "
"state."
msgstr ""

#: ../../source/private_data_tutorial.rst:707
msgid "You should see a result similar to:"
msgstr ""

#: ../../source/private_data_tutorial.rst:716
msgid ""
"Members of Org2 will only be able to see the public hash of the private "
"data."
msgstr ""

#: ../../source/private_data_tutorial.rst:721
msgid "Purge Private Data"
msgstr ""

#: ../../source/private_data_tutorial.rst:723
msgid ""
"For use cases where private data only needs to be on the ledger until it "
"can be replicated into an off-chain database, it is possible to \"purge\""
" the data after a certain set number of blocks, leaving behind only hash "
"of the data that serves as immutable evidence of the transaction."
msgstr ""

#: ../../source/private_data_tutorial.rst:728
msgid ""
"There may be private data including personal or confidential information,"
" such as the pricing data in our example, that the transacting parties "
"don't want disclosed to other organizations on the channel. Thus, it has "
"a limited lifespan, and can be purged after existing unchanged on the "
"blockchain for a designated number of blocks using the ``blockToLive`` "
"property in the collection definition."
msgstr ""

#: ../../source/private_data_tutorial.rst:735
msgid ""
"Our ``collectionMarblePrivateDetails`` definition has a ``blockToLive`` "
"property value of three meaning this data will live on the side database "
"for three blocks and then after that it will get purged. Tying all of the"
" pieces together, recall this collection definition  "
"``collectionMarblePrivateDetails`` is associated with the ``price`` "
"private data in the  ``initMarble()`` function when it calls the "
"``PutPrivateData()`` API and passes the "
"``collectionMarblePrivateDetails`` as an argument."
msgstr ""

#: ../../source/private_data_tutorial.rst:743
msgid ""
"We will step through adding blocks to the chain, and then watch the price"
" information get purged by issuing four new transactions (Create a new "
"marble, followed by three marble transfers) which adds four new blocks to"
" the chain. After the fourth transaction (third marble transfer), we will"
" verify that the price private data is purged."
msgstr ""

#: ../../source/private_data_tutorial.rst:751
msgid ""
"Switch back to Org1 using the following commands. Copy and paste the "
"following code block and run it inside your peer container:"
msgstr ""

#: ../../source/private_data_tutorial.rst:761
msgid ""
"Open a new terminal window and view the private data logs for this peer "
"by running the following command. Note the highest block number."
msgstr ""

#: ../../source/private_data_tutorial.rst:769
msgid ""
"Back in the peer container, query for the **marble1** price data by "
"running the following command. (A Query does not create a new transaction"
" on the ledger since no data is transacted)."
msgstr ""

#: ../../source/private_data_tutorial.rst:783
msgid "The ``price`` data is still in the private data ledger."
msgstr ""

#: ../../source/private_data_tutorial.rst:785
msgid ""
"Create a new **marble2** by issuing the following command. This "
"transaction creates a new block on the chain."
msgstr ""

#: ../../source/private_data_tutorial.rst:793
#: ../../source/private_data_tutorial.rst:822
#: ../../source/private_data_tutorial.rst:850
#: ../../source/private_data_tutorial.rst:879
msgid ""
"Switch back to the Terminal window and view the private data logs for "
"this peer again. You should see the block height increase by 1."
msgstr ""

#: ../../source/private_data_tutorial.rst:800
msgid ""
"Back in the peer container, query for the **marble1** price data again by"
" running the following command:"
msgstr ""

#: ../../source/private_data_tutorial.rst:807
msgid ""
"The private data has not been purged, therefore the results are unchanged"
" from previous query:"
msgstr ""

#: ../../source/private_data_tutorial.rst:814
msgid ""
"Transfer marble2 to \"joe\" by running the following command. This "
"transaction will add a second new block on the chain."
msgstr ""

#: ../../source/private_data_tutorial.rst:829
#: ../../source/private_data_tutorial.rst:857
#: ../../source/private_data_tutorial.rst:886
msgid ""
"Back in the peer container, query for the marble1 price data by running "
"the following command:"
msgstr ""

#: ../../source/private_data_tutorial.rst:836
msgid "You should still be able to see the price private data."
msgstr ""

#: ../../source/private_data_tutorial.rst:842
msgid ""
"Transfer marble2 to \"tom\" by running the following command. This "
"transaction will create a third new block on the chain."
msgstr ""

#: ../../source/private_data_tutorial.rst:864
msgid "You should still be able to see the price data."
msgstr ""

#: ../../source/private_data_tutorial.rst:870
msgid ""
"Finally, transfer marble2 to \"jerry\" by running the following command. "
"This transaction will create a fourth new block on the chain. The "
"``price`` private data should be purged after this transaction."
msgstr ""

#: ../../source/private_data_tutorial.rst:892
msgid ""
"Because the price data has been purged, you should no longer be able to "
"see it. You should see something similar to:"
msgstr ""

#: ../../source/private_data_tutorial.rst:903
msgid "Using indexes with private data"
msgstr ""

#: ../../source/private_data_tutorial.rst:905
msgid ""
"Indexes can also be applied to private data collections, by packaging "
"indexes in the ``META-"
"INF/statedb/couchdb/collections/<collection_name>/indexes`` directory "
"alongside the chaincode. An example index is available `here "
"<https://github.com/hyperledger/fabric-"
"samples/blob/master/chaincode/marbles02_private/go/META-"
"INF/statedb/couchdb/collections/collectionMarbles/indexes/indexOwner.json>`__"
" ."
msgstr ""

#: ../../source/private_data_tutorial.rst:909
msgid ""
"For deployment of chaincode to production environments, it is recommended"
" to define any indexes alongside chaincode so that the chaincode and "
"supporting indexes are deployed automatically as a unit, once the "
"chaincode has been installed on a peer and instantiated on a channel. The"
" associated indexes are automatically deployed upon chaincode "
"instantiation on the channel when the  ``--collections-config`` flag is "
"specified pointing to the location of the collection JSON file."
msgstr ""

#: ../../source/private_data_tutorial.rst:921
msgid "Additional resources"
msgstr ""

#: ../../source/private_data_tutorial.rst:923
msgid "For additional private data education, a video tutorial has been created."
msgstr ""

#: ../../source/private_data_tutorial.rst:925
msgid ""
"The video uses the previous lifecycle model to install private data "
"collections with chaincode."
msgstr ""

