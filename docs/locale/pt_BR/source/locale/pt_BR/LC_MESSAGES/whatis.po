# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, hyperledger
# This file is distributed under the same license as the
# hyperledger-fabricdocs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: hyperledger-fabricdocs master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-24 19:11-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../source/whatis.md:1
msgid "Introduction"
msgstr "Introdução"

#: ../../source/whatis.md:3
msgid ""
"In general terms, a blockchain is an immutable transaction ledger, "
"maintained within a distributed network of peer nodes. These nodes each "
"maintain a copy of the ledger by applying transactions that have been "
"validated by a consensus protocol, grouped into blocks that include a "
"hash that bind each block to the preceding block."
msgstr ""

#: ../../source/whatis.md:9
msgid ""
"The first and most widely recognized application of blockchain is the "
"Bitcoin cryptocurrency, though others have followed in its footsteps. "
"Ethereum, an alternative cryptocurrency, took a different approach, "
"integrating many of the same characteristics as Bitcoin but adding smart "
"contracts to create a platform for distributed applications. Bitcoin and "
"Ethereum fall into a class of blockchain that we would classify as public"
" permissionless blockchain technology. Basically, these are public "
"networks, open to anyone, where participants interact anonymously."
msgstr ""

#: ../../source/whatis.md:18
msgid ""
"As the popularity of Bitcoin, Ethereum and a few other derivative "
"technologies grew, interest in applying the underlying technology of the "
"blockchain, distributed ledger and distributed application platform to "
"more innovative enterprise use cases also grew. However, many enterprise "
"use cases require performance characteristics that the permissionless "
"blockchain technologies are unable (presently) to deliver. In addition, "
"in many use cases, the identity of the participants is a hard "
"requirement, such as in the case of financial transactions where Know-"
"Your-Customer (KYC) and Anti-Money Laundering (AML) regulations must be "
"followed."
msgstr ""

#: ../../source/whatis.md:28
msgid "For enterprise use, we need to consider the following requirements:"
msgstr ""

#: ../../source/whatis.md:30
msgid "Participants must be identified/identifiable"
msgstr ""

#: ../../source/whatis.md:31
msgid "Networks need to be permissioned"
msgstr ""

#: ../../source/whatis.md:32
msgid "High transaction throughput performance"
msgstr ""

#: ../../source/whatis.md:33
msgid "Low latency of transaction confirmation"
msgstr ""

#: ../../source/whatis.md:34
msgid ""
"Privacy and confidentiality of transactions and data pertaining to "
"business transactions"
msgstr ""

#: ../../source/whatis.md:37
msgid ""
"While many early blockchain platforms are currently being adapted for "
"enterprise use, Hyperledger Fabric has been designed for enterprise use "
"from the outset. The following sections describe how Hyperledger Fabric "
"(Fabric) differentiates itself from other blockchain platforms and "
"describes some of the motivation for its architectural decisions."
msgstr ""

#: ../../source/whatis.md:43
msgid "Hyperledger Fabric"
msgstr ""

#: ../../source/whatis.md:45
msgid ""
"Hyperledger Fabric is an open source enterprise-grade permissioned "
"distributed ledger technology (DLT) platform, designed for use in "
"enterprise contexts, that delivers some key differentiating capabilities "
"over other popular distributed ledger or blockchain platforms."
msgstr ""

#: ../../source/whatis.md:50
msgid ""
"One key point of differentiation is that Hyperledger was established "
"under the Linux Foundation, which itself has a long and very successful "
"history of nurturing open source projects under open governance that grow"
" strong sustaining communities and thriving ecosystems. Hyperledger is "
"governed by a diverse technical steering committee, and the Hyperledger "
"Fabric project by a diverse set of maintainers from multiple "
"organizations. It has a development community that has grown to over 35 "
"organizations and nearly 200 developers since its earliest commits."
msgstr ""

#: ../../source/whatis.md:59
msgid ""
"Fabric has a highly modular and configurable architecture, enabling "
"innovation, versatility and optimization for a broad range of industry "
"use cases including banking, finance, insurance, healthcare, human "
"resources, supply chain and even digital music delivery."
msgstr ""

#: ../../source/whatis.md:64
msgid ""
"Fabric is the first distributed ledger platform to support smart "
"contracts authored in general-purpose programming languages such as Java,"
" Go and Node.js, rather than constrained domain-specific languages (DSL)."
" This means that most enterprises already have the skill set needed to "
"develop smart contracts, and no additional training to learn a new "
"language or DSL is needed."
msgstr ""

#: ../../source/whatis.md:70
msgid ""
"The Fabric platform is also permissioned, meaning that, unlike with a "
"public permissionless network, the participants are known to each other, "
"rather than anonymous and therefore fully untrusted. This means that "
"while the participants may not fully trust one another (they may, for "
"example, be competitors in the same industry), a network can be operated "
"under a governance model that is built off of what trust does exist "
"between participants, such as a legal agreement or framework for handling"
" disputes."
msgstr ""

#: ../../source/whatis.md:78
msgid ""
"One of the most important of the platform's differentiators is its "
"support for pluggable consensus protocols that enable the platform to be "
"more effectively customized to fit particular use cases and trust models."
" For instance, when deployed within a single enterprise, or operated by a"
" trusted authority, fully byzantine fault tolerant consensus might be "
"considered unnecessary and an excessive drag on performance and "
"throughput. In situations such as that, a crash fault-tolerant (CFT) "
"consensus protocol might be more than adequate whereas, in a multi-party,"
" decentralized use case, a more traditional byzantine fault tolerant "
"(BFT) consensus protocol might be required."
msgstr ""

#: ../../source/whatis.md:91
msgid ""
"Fabric can leverage consensus protocols that do not require a native "
"cryptocurrency to incent costly mining or to fuel smart contract "
"execution. Avoidance of a cryptocurrency reduces some significant "
"risk/attack vectors, and absence of cryptographic mining operations means"
" that the platform can be deployed with roughly the same operational cost"
" as any other distributed system."
msgstr ""

#: ../../source/whatis.md:97
msgid ""
"The combination of these differentiating design features makes Fabric one"
" of the better performing platforms available today both in terms of "
"transaction processing and transaction confirmation latency, and it "
"enables privacy and confidentiality of transactions and the smart "
"contracts (what Fabric calls \"chaincode\") that implement them."
msgstr ""

#: ../../source/whatis.md:102
msgid "Let's explore these differentiating features in more detail."
msgstr ""

#: ../../source/whatis.md:104
msgid "Modularity"
msgstr ""

#: ../../source/whatis.md:106
msgid ""
"Hyperledger Fabric has been specifically architected to have a modular "
"architecture. Whether it is pluggable consensus, pluggable identity "
"management protocols such as LDAP or OpenID Connect, key management "
"protocols or cryptographic libraries, the platform has been designed at "
"its core to be configured to meet the diversity of enterprise use case "
"requirements."
msgstr ""

#: ../../source/whatis.md:112
msgid "At a high level, Fabric is comprised of the following modular components:"
msgstr ""

#: ../../source/whatis.md:114
msgid ""
"A pluggable ordering service establishes consensus on the order of "
"transactions and then broadcasts blocks to peers."
msgstr ""

#: ../../source/whatis.md:116
msgid ""
"A pluggable membership service provider is responsible for associating "
"entities in the network with cryptographic identities."
msgstr ""

#: ../../source/whatis.md:118
msgid ""
"An optional peer-to-peer gossip service disseminates the blocks output by"
" ordering service to other peers."
msgstr ""

#: ../../source/whatis.md:120
msgid ""
"Smart contracts (\"chaincode\") run within a container environment (e.g. "
"Docker) for isolation. They can be written in standard programming "
"languages but do not have direct access to the ledger state."
msgstr ""

#: ../../source/whatis.md:123
msgid "The ledger can be configured to support a variety of DBMSs."
msgstr ""

#: ../../source/whatis.md:124
msgid ""
"A pluggable endorsement and validation policy enforcement that can be "
"independently configured per application."
msgstr ""

#: ../../source/whatis.md:127
msgid ""
"There is fair agreement in the industry that there is no \"one blockchain"
" to rule them all\". Hyperledger Fabric can be configured in multiple "
"ways to satisfy the diverse solution requirements for multiple industry "
"use cases."
msgstr ""

#: ../../source/whatis.md:131
msgid "Permissioned vs Permissionless Blockchains"
msgstr ""

#: ../../source/whatis.md:133
msgid ""
"In a permissionless blockchain, virtually anyone can participate, and "
"every participant is anonymous. In such a context, there can be no trust "
"other than that the state of the blockchain, prior to a certain depth, is"
" immutable. In order to mitigate this absence of trust, permissionless "
"blockchains typically employ a \"mined\" native cryptocurrency or "
"transaction fees to provide economic incentive to offset the "
"extraordinary costs of participating in a form of byzantine fault "
"tolerant consensus based on \"proof of work\" (PoW)."
msgstr ""

#: ../../source/whatis.md:141
msgid ""
"Permissioned blockchains, on the other hand, operate a blockchain amongst"
" a set of known, identified and often vetted participants operating under"
" a governance model that yields a certain degree of trust. A permissioned"
" blockchain provides a way to secure the interactions among a group of "
"entities that have a common goal but which may not fully trust each "
"other. By relying on the identities of the participants, a permissioned "
"blockchain can use more traditional crash fault tolerant (CFT) or "
"byzantine fault tolerant (BFT) consensus protocols that do not require "
"costly mining."
msgstr ""

#: ../../source/whatis.md:150
msgid ""
"Additionally, in such a permissioned context, the risk of a participant "
"intentionally introducing malicious code through a smart contract is "
"diminished. First, the participants are known to one another and all "
"actions, whether submitting application transactions, modifying the "
"configuration of the network or deploying a smart contract are recorded "
"on the blockchain following an endorsement policy that was established "
"for the network and relevant transaction type. Rather than being "
"completely anonymous, the guilty party can be easily identified and the "
"incident handled in accordance with the terms of the governance model."
msgstr ""

#: ../../source/whatis.md:160
msgid "Smart Contracts"
msgstr ""

#: ../../source/whatis.md:162
msgid ""
"A smart contract, or what Fabric calls \"chaincode\", functions as a "
"trusted distributed application that gains its security/trust from the "
"blockchain and the underlying consensus among the peers. It is the "
"business logic of a blockchain application."
msgstr ""

#: ../../source/whatis.md:167
msgid ""
"There are three key points that apply to smart contracts, especially when"
" applied to a platform:"
msgstr ""

#: ../../source/whatis.md:170
msgid "many smart contracts run concurrently in the network,"
msgstr ""

#: ../../source/whatis.md:171
msgid "they may be deployed dynamically (in many cases by anyone), and"
msgstr ""

#: ../../source/whatis.md:172
msgid ""
"application code should be treated as untrusted, potentially even "
"malicious."
msgstr ""

#: ../../source/whatis.md:175
msgid ""
"Most existing smart-contract capable blockchain platforms follow an "
"order-execute architecture in which the consensus protocol:"
msgstr ""

#: ../../source/whatis.md:178
msgid "validates and orders transactions then propagates them to all peer nodes,"
msgstr ""

#: ../../source/whatis.md:179
msgid "each peer then executes the transactions sequentially."
msgstr ""

#: ../../source/whatis.md:181
msgid ""
"The order-execute architecture can be found in virtually all existing "
"blockchain systems, ranging from public/permissionless platforms such as "
"Ethereum (with PoW-based consensus) to permissioned platforms such as "
"Tendermint, Chain, and Quorum."
msgstr ""

#: ../../source/whatis.md:187
msgid ""
"Smart contracts executing in a blockchain that operates with the order-"
"execute architecture must be deterministic; otherwise, consensus might "
"never be reached. To address the non-determinism issue, many platforms "
"require that the smart contracts be written in a non-standard, or domain-"
"specific language (such as Solidity) so that non-deterministic operations"
" can be eliminated. This hinders wide-spread adoption because it requires"
" developers writing smart contracts to learn a new language and may lead "
"to programming errors."
msgstr ""

#: ../../source/whatis.md:196
msgid ""
"Further, since all transactions are executed sequentially by all nodes, "
"performance and scale is limited. The fact that the smart contract code "
"executes on every node in the system demands that complex measures be "
"taken to protect the overall system from potentially malicious contracts "
"in order to ensure resiliency of the overall system."
msgstr ""

#: ../../source/whatis.md:202
msgid "A New Approach"
msgstr ""

#: ../../source/whatis.md:204
msgid ""
"Fabric introduces a new architecture for transactions that we call "
"execute-order-validate. It addresses the resiliency, flexibility, "
"scalability, performance and confidentiality challenges faced by the "
"order-execute model by separating the transaction flow into three steps:"
msgstr ""

#: ../../source/whatis.md:209
msgid "execute a transaction and check its correctness, thereby endorsing it,"
msgstr ""

#: ../../source/whatis.md:210
msgid "order transactions via a (pluggable) consensus protocol, and"
msgstr ""

#: ../../source/whatis.md:211
msgid ""
"validate transactions against an application-specific endorsement policy "
"before committing them to the ledger"
msgstr ""

#: ../../source/whatis.md:214
msgid ""
"This design departs radically from the order-execute paradigm in that "
"Fabric executes transactions before reaching final agreement on their "
"order."
msgstr ""

#: ../../source/whatis.md:217
msgid ""
"In Fabric, an application-specific endorsement policy specifies which "
"peer nodes, or how many of them, need to vouch for the correct execution "
"of a given smart contract. Thus, each transaction need only be executed "
"(endorsed) by the subset of the peer nodes necessary to satisfy the "
"transaction's endorsement policy. This allows for parallel execution "
"increasing overall performance and scale of the system. This first phase "
"also eliminates any non-determinism, as inconsistent results can be "
"filtered out before ordering."
msgstr ""

#: ../../source/whatis.md:225
msgid ""
"Because we have eliminated non-determinism, Fabric is the first "
"blockchain technology that enables use of standard programming languages."
msgstr ""

#: ../../source/whatis.md:228
msgid "Privacy and Confidentiality"
msgstr ""

#: ../../source/whatis.md:230
msgid ""
"As we have discussed, in a public, permissionless blockchain network that"
" leverages PoW for its consensus model, transactions are executed on "
"every node. This means that neither can there be confidentiality of the "
"contracts themselves, nor of the transaction data that they process. "
"Every transaction, and the code that implements it, is visible to every "
"node in the network. In this case, we have traded confidentiality of "
"contract and data for byzantine fault tolerant consensus delivered by "
"PoW."
msgstr ""

#: ../../source/whatis.md:238
msgid ""
"This lack of confidentiality can be problematic for many "
"business/enterprise use cases. For example, in a network of supply-chain "
"partners, some consumers might be given preferred rates as a means of "
"either solidifying a relationship, or promoting additional sales. If "
"every participant can see every contract and transaction, it becomes "
"impossible to maintain such business relationships in a completely "
"transparent network --- everyone will want the preferred rates!"
msgstr ""

#: ../../source/whatis.md:245
msgid ""
"As a second example, consider the securities industry, where a trader "
"building a position (or disposing of one) would not want her competitors "
"to know of this, or else they will seek to get in on the game, weakening "
"the trader's gambit."
msgstr ""

#: ../../source/whatis.md:249
msgid ""
"In order to address the lack of privacy and confidentiality for purposes "
"of delivering on enterprise use case requirements, blockchain platforms "
"have adopted a variety of approaches. All have their trade-offs."
msgstr ""

#: ../../source/whatis.md:253
msgid ""
"Encrypting data is one approach to providing confidentiality; however, in"
" a permissionless network leveraging PoW for its consensus, the encrypted"
" data is sitting on every node. Given enough time and computational "
"resource, the encryption could be broken. For many enterprise use cases, "
"the risk that their information could become compromised is unacceptable."
msgstr ""

#: ../../source/whatis.md:259
msgid ""
"Zero knowledge proofs (ZKP) are another area of research being explored "
"to address this problem, the trade-off here being that, presently, "
"computing a ZKP requires considerable time and computational resources. "
"Hence, the trade-off in this case is performance for confidentiality."
msgstr ""

#: ../../source/whatis.md:264
msgid ""
"In a permissioned context that can leverage alternate forms of consensus,"
" one might explore approaches that restrict the distribution of "
"confidential information exclusively to authorized nodes."
msgstr ""

#: ../../source/whatis.md:268
msgid ""
"Hyperledger Fabric, being a permissioned platform, enables "
"confidentiality through its channel architecture and private data "
"feature. In channels, participants on a Fabric network establish a sub-"
"network where every member has visibility to a particular set of "
"transactions. Thus, only those nodes that participate in a channel have "
"access to the smart contract (chaincode) and data transacted, preserving "
"the privacy and confidentiality of both. Private data allows collections "
"between members on a channel, allowing much of the same protection as "
"channels without the maintenance overhead of creating and maintaining a "
"separate channel."
msgstr ""

#: ../../source/whatis.md:278
msgid "Pluggable Consensus"
msgstr ""

#: ../../source/whatis.md:280
msgid ""
"The ordering of transactions is delegated to a modular component for "
"consensus that is logically decoupled from the peers that execute "
"transactions and maintain the ledger. Specifically, the ordering service."
" Since consensus is modular, its implementation can be tailored to the "
"trust assumption of a particular deployment or solution. This modular "
"architecture allows the platform to rely on well-established toolkits for"
" CFT (crash fault-tolerant) or BFT (byzantine fault-tolerant) ordering."
msgstr ""

#: ../../source/whatis.md:288
msgid ""
"Fabric currently offers a CFT ordering service implementation based on "
"the etcd library of the Raft protocol. For information about currently "
"available ordering services, check out our conceptual documentation about"
" ordering."
msgstr ""

#: ../../source/whatis.md:293
msgid ""
"Note also that these are not mutually exclusive. A Fabric network can "
"have multiple ordering services supporting different applications or "
"application requirements."
msgstr ""

#: ../../source/whatis.md:297
msgid "Performance and Scalability"
msgstr ""

#: ../../source/whatis.md:299
msgid ""
"Performance of a blockchain platform can be affected by many variables "
"such as transaction size, block size, network size, as well as limits of "
"the hardware, etc. The Hyperledger Fabric Performance and Scale working "
"group currently works on a benchmarking framework called Hyperledger "
"Caliper."
msgstr ""

#: ../../source/whatis.md:304
msgid ""
"Several research papers have been published studying and testing the "
"performance capabilities of Hyperledger Fabric. The latest scaled Fabric "
"to 20,000 transactions per second."
msgstr ""

#: ../../source/whatis.md:307
msgid "Conclusion"
msgstr ""

#: ../../source/whatis.md:309
msgid ""
"Any serious evaluation of blockchain platforms should include Hyperledger"
" Fabric in its short list."
msgstr ""

#: ../../source/whatis.md:312
msgid ""
"Combined, the differentiating capabilities of Fabric make it a highly "
"scalable system for permissioned blockchains supporting flexible trust "
"assumptions that enable the platform to support a wide range of industry "
"use cases ranging from government, to finance, to supply-chain logistics,"
" to healthcare and so much more."
msgstr ""

#: ../../source/whatis.md:318
msgid ""
"Hyperledger Fabric is the most active of the Hyperledger projects. The "
"community building around the platform is growing steadily, and the "
"innovation delivered with each successive release far out-paces any of "
"the other enterprise blockchain platforms."
msgstr ""

#: ../../source/whatis.md:323
msgid "Acknowledgement"
msgstr ""

#: ../../source/whatis.md:325
msgid ""
"The preceding is derived from the peer reviewed \"Hyperledger Fabric: A "
"Distributed Operating System for Permissioned Blockchains\" - Elli "
"Androulaki, Artem Barger, Vita Bortnikov, Christian Cachin, Konstantinos "
"Christidis, Angelo De Caro, David Enyeart, Christopher Ferris, Gennady "
"Laventman, Yacov Manevich, Srinivasan Muralidharan, Chet Murthy, Binh "
"Nguyen, Manish Sethi, Gari Singh, Keith Smith, Alessandro Sorniotti, "
"Chrysoula Stathakopoulou, Marko Vukolic, Sharon Weed Cocco, Jason Yellick"
msgstr ""

#~ msgid "Introduction"
#~ msgstr ""

#~ msgid ""
#~ "In general terms, a blockchain is "
#~ "an immutable transaction ledger, maintained"
#~ " within a distributed network of peer"
#~ " nodes. These nodes each maintain a"
#~ " copy of the ledger by applying "
#~ "transactions that have been validated by"
#~ " a consensus protocol, grouped into "
#~ "blocks that include a hash that "
#~ "bind each block to the preceding "
#~ "block."
#~ msgstr ""

#~ msgid ""
#~ "The first and most widely recognized "
#~ "application of blockchain is the Bitcoin"
#~ " cryptocurrency, though others have "
#~ "followed in its footsteps. Ethereum, an"
#~ " alternative cryptocurrency, took a "
#~ "different approach, integrating many of "
#~ "the same characteristics as Bitcoin but"
#~ " adding smart contracts to create a"
#~ " platform for distributed applications. "
#~ "Bitcoin and Ethereum fall into a "
#~ "class of blockchain that we would "
#~ "classify as public permissionless blockchain"
#~ " technology. Basically, these are public"
#~ " networks, open to anyone, where "
#~ "participants interact anonymously."
#~ msgstr ""

#~ msgid ""
#~ "As the popularity of Bitcoin, Ethereum"
#~ " and a few other derivative "
#~ "technologies grew, interest in applying "
#~ "the underlying technology of the "
#~ "blockchain, distributed ledger and distributed"
#~ " application platform to more innovative"
#~ " enterprise use cases also grew. "
#~ "However, many enterprise use cases "
#~ "require performance characteristics that the"
#~ " permissionless blockchain technologies are "
#~ "unable (presently) to deliver. In "
#~ "addition, in many use cases, the "
#~ "identity of the participants is a "
#~ "hard requirement, such as in the "
#~ "case of financial transactions where "
#~ "Know-Your-Customer (KYC) and Anti-"
#~ "Money Laundering (AML) regulations must "
#~ "be followed."
#~ msgstr ""

#~ msgid "Networks need to be permissioned"
#~ msgstr ""

#~ msgid ""
#~ "While many early blockchain platforms "
#~ "are currently being adapted for "
#~ "enterprise use, Hyperledger Fabric has "
#~ "been designed for enterprise use from"
#~ " the outset. The following sections "
#~ "describe how Hyperledger Fabric (Fabric) "
#~ "differentiates itself from other blockchain"
#~ " platforms and describes some of the"
#~ " motivation for its architectural "
#~ "decisions."
#~ msgstr ""

#~ msgid "Hyperledger Fabric"
#~ msgstr ""

#~ msgid ""
#~ "One key point of differentiation is "
#~ "that Hyperledger was established under "
#~ "the Linux Foundation, which itself has"
#~ " a long and very successful history"
#~ " of nurturing open source projects "
#~ "under open governance that grow strong"
#~ " sustaining communities and thriving "
#~ "ecosystems. Hyperledger is governed by a"
#~ " diverse technical steering committee, and"
#~ " the Hyperledger Fabric project by a"
#~ " diverse set of maintainers from "
#~ "multiple organizations. It has a "
#~ "development community that has grown to"
#~ " over 35 organizations and nearly 200"
#~ " developers since its earliest commits."
#~ msgstr ""

#~ msgid ""
#~ "Fabric has a highly modular and "
#~ "configurable architecture, enabling innovation, "
#~ "versatility and optimization for a broad"
#~ " range of industry use cases "
#~ "including banking, finance, insurance, "
#~ "healthcare, human resources, supply chain "
#~ "and even digital music delivery."
#~ msgstr ""

#~ msgid ""
#~ "Fabric is the first distributed ledger"
#~ " platform to support smart contracts "
#~ "authored in general-purpose programming "
#~ "languages such as Java, Go and "
#~ "Node.js, rather than constrained domain-"
#~ "specific languages (DSL). This means "
#~ "that most enterprises already have the"
#~ " skill set needed to develop smart"
#~ " contracts, and no additional training "
#~ "to learn a new language or DSL "
#~ "is needed."
#~ msgstr ""

#~ msgid ""
#~ "The Fabric platform is also "
#~ "permissioned, meaning that, unlike with "
#~ "a public permissionless network, the "
#~ "participants are known to each other,"
#~ " rather than anonymous and therefore "
#~ "fully untrusted. This means that while"
#~ " the participants may not fully trust"
#~ " one another (they may, for example,"
#~ " be competitors in the same "
#~ "industry), a network can be operated "
#~ "under a governance model that is "
#~ "built off of what trust does exist"
#~ " between participants, such as a "
#~ "legal agreement or framework for "
#~ "handling disputes."
#~ msgstr ""

#~ msgid ""
#~ "One of the most important of the"
#~ " platform's differentiators is its support"
#~ " for pluggable consensus protocols that "
#~ "enable the platform to be more "
#~ "effectively customized to fit particular "
#~ "use cases and trust models. For "
#~ "instance, when deployed within a single"
#~ " enterprise, or operated by a trusted"
#~ " authority, fully byzantine fault tolerant"
#~ " consensus might be considered unnecessary"
#~ " and an excessive drag on performance"
#~ " and throughput. In situations such "
#~ "as that, a crash fault-tolerant "
#~ "(CFT) consensus protocol might be more"
#~ " than adequate whereas, in a "
#~ "multi-party, decentralized use case, a "
#~ "more traditional byzantine fault tolerant "
#~ "(BFT) consensus protocol might be "
#~ "required."
#~ msgstr ""

#~ msgid ""
#~ "Fabric can leverage consensus protocols "
#~ "that do not require a native "
#~ "cryptocurrency to incent costly mining "
#~ "or to fuel smart contract execution. "
#~ "Avoidance of a cryptocurrency reduces "
#~ "some significant risk/attack vectors, and "
#~ "absence of cryptographic mining operations "
#~ "means that the platform can be "
#~ "deployed with roughly the same "
#~ "operational cost as any other "
#~ "distributed system."
#~ msgstr ""

#~ msgid ""
#~ "The combination of these differentiating "
#~ "design features makes Fabric one of "
#~ "the better performing platforms available "
#~ "today both in terms of transaction "
#~ "processing and transaction confirmation "
#~ "latency, and it enables privacy and "
#~ "confidentiality of transactions and the "
#~ "smart contracts (what Fabric calls "
#~ "\"chaincode\") that implement them."
#~ msgstr ""

#~ msgid "Modularity"
#~ msgstr ""

#~ msgid ""
#~ "A pluggable ordering service establishes "
#~ "consensus on the order of transactions"
#~ " and then broadcasts blocks to peers."
#~ msgstr ""

#~ msgid ""
#~ "A pluggable membership service provider "
#~ "is responsible for associating entities "
#~ "in the network with cryptographic "
#~ "identities."
#~ msgstr ""

#~ msgid ""
#~ "An optional peer-to-peer gossip "
#~ "service disseminates the blocks output "
#~ "by ordering service to other peers."
#~ msgstr ""

#~ msgid ""
#~ "Smart contracts (\"chaincode\") run within "
#~ "a container environment (e.g. Docker) "
#~ "for isolation. They can be written "
#~ "in standard programming languages but do"
#~ " not have direct access to the "
#~ "ledger state."
#~ msgstr ""

#~ msgid "The ledger can be configured to support a variety of DBMSs."
#~ msgstr ""

#~ msgid ""
#~ "A pluggable endorsement and validation "
#~ "policy enforcement that can be "
#~ "independently configured per application."
#~ msgstr ""

#~ msgid "Permissioned vs Permissionless Blockchains"
#~ msgstr ""

#~ msgid ""
#~ "Permissioned blockchains, on the other "
#~ "hand, operate a blockchain amongst a "
#~ "set of known, identified and often "
#~ "vetted participants operating under a "
#~ "governance model that yields a certain"
#~ " degree of trust. A permissioned "
#~ "blockchain provides a way to secure "
#~ "the interactions among a group of "
#~ "entities that have a common goal "
#~ "but which may not fully trust each"
#~ " other. By relying on the identities"
#~ " of the participants, a permissioned "
#~ "blockchain can use more traditional "
#~ "crash fault tolerant (CFT) or byzantine"
#~ " fault tolerant (BFT) consensus protocols"
#~ " that do not require costly mining."
#~ msgstr ""

#~ msgid "Smart Contracts"
#~ msgstr ""

#~ msgid ""
#~ "application code should be treated as"
#~ " untrusted, potentially even malicious."
#~ msgstr ""

#~ msgid ""
#~ "Most existing smart-contract capable "
#~ "blockchain platforms follow an order-"
#~ "execute architecture in which the "
#~ "consensus protocol:"
#~ msgstr ""

#~ msgid ""
#~ "The order-execute architecture can be"
#~ " found in virtually all existing "
#~ "blockchain systems, ranging from "
#~ "public/permissionless platforms such as "
#~ "Ethereum (with PoW-based consensus) to"
#~ " permissioned platforms such as Tendermint,"
#~ " Chain, and Quorum."
#~ msgstr ""

#~ msgid ""
#~ "Smart contracts executing in a "
#~ "blockchain that operates with the "
#~ "order-execute architecture must be "
#~ "deterministic; otherwise, consensus might "
#~ "never be reached. To address the "
#~ "non-determinism issue, many platforms "
#~ "require that the smart contracts be "
#~ "written in a non-standard, or "
#~ "domain-specific language (such as Solidity)"
#~ " so that non-deterministic operations "
#~ "can be eliminated. This hinders wide-"
#~ "spread adoption because it requires "
#~ "developers writing smart contracts to "
#~ "learn a new language and may lead"
#~ " to programming errors."
#~ msgstr ""

#~ msgid "A New Approach"
#~ msgstr ""

#~ msgid ""
#~ "Fabric introduces a new architecture for"
#~ " transactions that we call execute-"
#~ "order-validate. It addresses the "
#~ "resiliency, flexibility, scalability, performance"
#~ " and confidentiality challenges faced by"
#~ " the order-execute model by "
#~ "separating the transaction flow into "
#~ "three steps:"
#~ msgstr ""

#~ msgid "execute a transaction and check its correctness, thereby endorsing it,"
#~ msgstr ""

#~ msgid "order transactions via a (pluggable) consensus protocol, and"
#~ msgstr ""

#~ msgid ""
#~ "validate transactions against an "
#~ "application-specific endorsement policy before"
#~ " committing them to the ledger"
#~ msgstr ""

#~ msgid ""
#~ "In Fabric, an application-specific "
#~ "endorsement policy specifies which peer "
#~ "nodes, or how many of them, need"
#~ " to vouch for the correct execution"
#~ " of a given smart contract. Thus, "
#~ "each transaction need only be executed"
#~ " (endorsed) by the subset of the "
#~ "peer nodes necessary to satisfy the "
#~ "transaction's endorsement policy. This allows"
#~ " for parallel execution increasing overall"
#~ " performance and scale of the system."
#~ " This first phase also eliminates any"
#~ " non-determinism, as inconsistent results"
#~ " can be filtered out before ordering."
#~ msgstr ""

#~ msgid ""
#~ "Because we have eliminated non-"
#~ "determinism, Fabric is the first "
#~ "blockchain technology that enables use "
#~ "of standard programming languages."
#~ msgstr ""

#~ msgid "Privacy and Confidentiality"
#~ msgstr ""

#~ msgid ""
#~ "Hyperledger Fabric, being a permissioned "
#~ "platform, enables confidentiality through its"
#~ " channel architecture and private data "
#~ "feature. In channels, participants on a"
#~ " Fabric network establish a sub-"
#~ "network where every member has "
#~ "visibility to a particular set of "
#~ "transactions. Thus, only those nodes "
#~ "that participate in a channel have "
#~ "access to the smart contract (chaincode)"
#~ " and data transacted, preserving the "
#~ "privacy and confidentiality of both. "
#~ "Private data allows collections between "
#~ "members on a channel, allowing much "
#~ "of the same protection as channels "
#~ "without the maintenance overhead of "
#~ "creating and maintaining a separate "
#~ "channel."
#~ msgstr ""

#~ msgid "Pluggable Consensus"
#~ msgstr ""

#~ msgid ""
#~ "Fabric currently offers a CFT ordering"
#~ " service implementation based on the "
#~ "etcd library of the Raft protocol. "
#~ "For information about currently available "
#~ "ordering services, check out our "
#~ "conceptual documentation about ordering."
#~ msgstr ""

#~ msgid "Performance and Scalability"
#~ msgstr ""

#~ msgid ""
#~ "Performance of a blockchain platform can"
#~ " be affected by many variables such"
#~ " as transaction size, block size, "
#~ "network size, as well as limits of"
#~ " the hardware, etc. The Hyperledger "
#~ "Fabric Performance and Scale working "
#~ "group currently works on a benchmarking"
#~ " framework called Hyperledger Caliper."
#~ msgstr ""

#~ msgid ""
#~ "Several research papers have been "
#~ "published studying and testing the "
#~ "performance capabilities of Hyperledger "
#~ "Fabric. The latest scaled Fabric to "
#~ "20,000 transactions per second."
#~ msgstr ""

#~ msgid "Conclusion"
#~ msgstr ""

#~ msgid "Acknowledgement"
#~ msgstr ""

#~ msgid ""
#~ "The preceding is derived from the "
#~ "peer reviewed \"Hyperledger Fabric: A "
#~ "Distributed Operating System for Permissioned"
#~ " Blockchains\" - Elli Androulaki, Artem "
#~ "Barger, Vita Bortnikov, Christian Cachin, "
#~ "Konstantinos Christidis, Angelo De Caro, "
#~ "David Enyeart, Christopher Ferris, Gennady "
#~ "Laventman, Yacov Manevich, Srinivasan "
#~ "Muralidharan, Chet Murthy, Binh Nguyen, "
#~ "Manish Sethi, Gari Singh, Keith Smith,"
#~ " Alessandro Sorniotti, Chrysoula Stathakopoulou,"
#~ " Marko Vukolic, Sharon Weed Cocco, "
#~ "Jason Yellick"
#~ msgstr ""

#~ msgid ""
#~ "The first and most widely recognized "
#~ "application of blockchain is the "
#~ "[Bitcoin](https://en.wikipedia.org/wiki/Bitcoin) cryptocurrency,"
#~ " though others have followed in its"
#~ " footsteps. Ethereum, an alternative "
#~ "cryptocurrency, took a different approach, "
#~ "integrating many of the same "
#~ "characteristics as Bitcoin but adding "
#~ "_smart contracts_ to create a platform"
#~ " for distributed applications. Bitcoin and"
#~ " Ethereum fall into a class of "
#~ "blockchain that we would classify as "
#~ "_public permissionless_ blockchain technology. "
#~ "Basically, these are public networks, "
#~ "open to anyone, where participants "
#~ "interact anonymously."
#~ msgstr ""

#~ msgid ""
#~ "As the popularity of Bitcoin, Ethereum"
#~ " and a few other derivative "
#~ "technologies grew, interest in applying "
#~ "the underlying technology of the "
#~ "blockchain, distributed ledger and distributed"
#~ " application platform to more innovative"
#~ " _enterprise_ use cases also grew. "
#~ "However, many enterprise use cases "
#~ "require performance characteristics that the"
#~ " permissionless blockchain technologies are "
#~ "unable (presently) to deliver. In "
#~ "addition, in many use cases, the "
#~ "identity of the participants is a "
#~ "hard requirement, such as in the "
#~ "case of financial transactions where "
#~ "Know-Your-Customer (KYC) and Anti-"
#~ "Money Laundering (AML) regulations must "
#~ "be followed."
#~ msgstr ""

#~ msgid "Networks need to be _permissioned_"
#~ msgstr ""

#~ msgid ""
#~ "While many early blockchain platforms "
#~ "are currently being _adapted_ for "
#~ "enterprise use, Hyperledger Fabric has "
#~ "been _designed_ for enterprise use from"
#~ " the outset. The following sections "
#~ "describe how Hyperledger Fabric (Fabric) "
#~ "differentiates itself from other blockchain"
#~ " platforms and describes some of the"
#~ " motivation for its architectural "
#~ "decisions."
#~ msgstr ""

#~ msgid "## Hyperledger Fabric"
#~ msgstr ""

#~ msgid ""
#~ "One key point of differentiation is "
#~ "that Hyperledger was established under "
#~ "the Linux Foundation, which itself has"
#~ " a long and very successful history"
#~ " of nurturing open source projects "
#~ "under **open governance** that grow "
#~ "strong sustaining communities and thriving "
#~ "ecosystems. Hyperledger is governed by a"
#~ " diverse technical steering committee, and"
#~ " the Hyperledger Fabric project by a"
#~ " diverse set of maintainers from "
#~ "multiple organizations. It has a "
#~ "development community that has grown to"
#~ " over 35 organizations and nearly 200"
#~ " developers since its earliest commits."
#~ msgstr ""

#~ msgid ""
#~ "Fabric has a highly **modular** and "
#~ "**configurable** architecture, enabling innovation,"
#~ " versatility and optimization for a "
#~ "broad range of industry use cases "
#~ "including banking, finance, insurance, "
#~ "healthcare, human resources, supply chain "
#~ "and even digital music delivery."
#~ msgstr ""

#~ msgid ""
#~ "Fabric is the first distributed ledger"
#~ " platform to support **smart contracts "
#~ "authored in general-purpose programming "
#~ "languages** such as Java, Go and "
#~ "Node.js, rather than constrained domain-"
#~ "specific languages (DSL). This means "
#~ "that most enterprises already have the"
#~ " skill set needed to develop smart"
#~ " contracts, and no additional training "
#~ "to learn a new language or DSL "
#~ "is needed."
#~ msgstr ""

#~ msgid ""
#~ "The Fabric platform is also "
#~ "**permissioned**, meaning that, unlike with"
#~ " a public permissionless network, the "
#~ "participants are known to each other,"
#~ " rather than anonymous and therefore "
#~ "fully untrusted. This means that while"
#~ " the participants may not _fully_ "
#~ "trust one another (they may, for "
#~ "example, be competitors in the same "
#~ "industry), a network can be operated "
#~ "under a governance model that is "
#~ "built off of what trust _does_ "
#~ "exist between participants, such as a"
#~ " legal agreement or framework for "
#~ "handling disputes."
#~ msgstr ""

#~ msgid ""
#~ "One of the most important of the"
#~ " platform's differentiators is its support"
#~ " for **pluggable consensus protocols** that"
#~ " enable the platform to be more "
#~ "effectively customized to fit particular "
#~ "use cases and trust models. For "
#~ "instance, when deployed within a single"
#~ " enterprise, or operated by a trusted"
#~ " authority, fully byzantine fault tolerant"
#~ " consensus might be considered unnecessary"
#~ " and an excessive drag on performance"
#~ " and throughput. In situations such "
#~ "as that, a [crash fault-"
#~ "tolerant](https://en.wikipedia.org/wiki/Fault_tolerance) (CFT)"
#~ " consensus protocol might be more "
#~ "than adequate whereas, in a multi-"
#~ "party, decentralized use case, a more"
#~ " traditional [byzantine fault "
#~ "tolerant](https://en.wikipedia.org/wiki/Byzantine_fault_tolerance) "
#~ "(BFT) consensus protocol might be "
#~ "required."
#~ msgstr ""

#~ msgid ""
#~ "Fabric can leverage consensus protocols "
#~ "that **do not require a native "
#~ "cryptocurrency** to incent costly mining "
#~ "or to fuel smart contract execution. "
#~ "Avoidance of a cryptocurrency reduces "
#~ "some significant risk/attack vectors, and "
#~ "absence of cryptographic mining operations "
#~ "means that the platform can be "
#~ "deployed with roughly the same "
#~ "operational cost as any other "
#~ "distributed system."
#~ msgstr ""

#~ msgid ""
#~ "The combination of these differentiating "
#~ "design features makes Fabric one of "
#~ "the **better performing platforms** available"
#~ " today both in terms of transaction"
#~ " processing and transaction confirmation "
#~ "latency, and it enables **privacy and"
#~ " confidentiality** of transactions and the"
#~ " smart contracts (what Fabric calls "
#~ "\"chaincode\") that implement them."
#~ msgstr ""

#~ msgid "## Modularity"
#~ msgstr ""

#~ msgid "A pluggable _ordering service_ establishes consensus on the order of"
#~ msgstr ""

#~ msgid ""
#~ "transactions and then broadcasts blocks "
#~ "to peers. - A pluggable _membership "
#~ "service provider_ is responsible for "
#~ "associating entities in the network with"
#~ " cryptographic identities. - An optional"
#~ " _peer-to-peer gossip service_ "
#~ "disseminates the blocks output by "
#~ "ordering service to other peers. - "
#~ "Smart contracts (\"chaincode\") run within "
#~ "a container environment (e.g. Docker) "
#~ "for isolation. They can be written "
#~ "in standard programming languages but do"
#~ " not have direct access to the "
#~ "ledger state. - The ledger can be"
#~ " configured to support a variety of"
#~ " DBMSs. - A pluggable endorsement and"
#~ " validation policy enforcement that can "
#~ "be independently configured per application."
#~ msgstr ""

#~ msgid "## Permissioned vs Permissionless Blockchains"
#~ msgstr ""

#~ msgid ""
#~ "**Permissioned** blockchains, on the other "
#~ "hand, operate a blockchain amongst a "
#~ "set of known, identified and often "
#~ "vetted participants operating under a "
#~ "governance model that yields a certain"
#~ " degree of trust. A permissioned "
#~ "blockchain provides a way to secure "
#~ "the interactions among a group of "
#~ "entities that have a common goal "
#~ "but which may not fully trust each"
#~ " other. By relying on the identities"
#~ " of the participants, a permissioned "
#~ "blockchain can use more traditional "
#~ "crash fault tolerant (CFT) or byzantine"
#~ " fault tolerant (BFT) consensus protocols"
#~ " that do not require costly mining."
#~ msgstr ""

#~ msgid "## Smart Contracts"
#~ msgstr ""

#~ msgid "application code should be treated as untrusted, potentially even"
#~ msgstr ""

#~ msgid "malicious."
#~ msgstr ""

#~ msgid ""
#~ "Most existing smart-contract capable "
#~ "blockchain platforms follow an **order-"
#~ "execute** architecture in which the "
#~ "consensus protocol:"
#~ msgstr ""

#~ msgid ""
#~ "The order-execute architecture can be"
#~ " found in virtually all existing "
#~ "blockchain systems, ranging from "
#~ "public/permissionless platforms such as "
#~ "[Ethereum](https://ethereum.org/) (with PoW-based"
#~ " consensus) to permissioned platforms such"
#~ " as [Tendermint](http://tendermint.com/), "
#~ "[Chain](http://chain.com/), and "
#~ "[Quorum](http://www.jpmorgan.com/global/Quorum)."
#~ msgstr ""

#~ msgid ""
#~ "Smart contracts executing in a "
#~ "blockchain that operates with the "
#~ "order-execute architecture must be "
#~ "deterministic; otherwise, consensus might "
#~ "never be reached. To address the "
#~ "non-determinism issue, many platforms "
#~ "require that the smart contracts be "
#~ "written in a non-standard, or "
#~ "domain-specific language (such as "
#~ "[Solidity](https://solidity.readthedocs.io/en/v0.4.23/)) so "
#~ "that non-deterministic operations can be"
#~ " eliminated. This hinders wide-spread "
#~ "adoption because it requires developers "
#~ "writing smart contracts to learn a "
#~ "new language and may lead to "
#~ "programming errors."
#~ msgstr ""

#~ msgid "## A New Approach"
#~ msgstr ""

#~ msgid ""
#~ "Fabric introduces a new architecture for"
#~ " transactions that we call **execute-"
#~ "order-validate**. It addresses the "
#~ "resiliency, flexibility, scalability, performance"
#~ " and confidentiality challenges faced by"
#~ " the order-execute model by "
#~ "separating the transaction flow into "
#~ "three steps:"
#~ msgstr ""

#~ msgid ""
#~ "_execute_ a transaction and check its"
#~ " correctness, thereby endorsing it,"
#~ msgstr ""

#~ msgid "_order_ transactions via a (pluggable) consensus protocol, and"
#~ msgstr ""

#~ msgid ""
#~ "_validate_ transactions against an "
#~ "application-specific endorsement policy"
#~ msgstr ""

#~ msgid "before committing them to the ledger"
#~ msgstr ""

#~ msgid ""
#~ "In Fabric, an application-specific "
#~ "endorsement policy specifies which peer "
#~ "nodes, or how many of them, need"
#~ " to vouch for the correct execution"
#~ " of a given smart contract. Thus, "
#~ "each transaction need only be executed"
#~ " (endorsed) by the subset of the "
#~ "peer nodes necessary to satisfy the "
#~ "transaction's endorsement policy. This allows"
#~ " for parallel execution increasing overall"
#~ " performance and scale of the system."
#~ " This first phase also **eliminates "
#~ "any non-determinism**, as inconsistent "
#~ "results can be filtered out before "
#~ "ordering."
#~ msgstr ""

#~ msgid ""
#~ "Because we have eliminated non-"
#~ "determinism, Fabric is the first "
#~ "blockchain technology that **enables use "
#~ "of standard programming languages**."
#~ msgstr ""

#~ msgid "## Privacy and Confidentiality"
#~ msgstr ""

#~ msgid ""
#~ "Hyperledger Fabric, being a permissioned "
#~ "platform, enables confidentiality through its"
#~ " channel architecture and [private data"
#~ "](./private-data/private-data.html) feature. In"
#~ " channels, participants on a Fabric "
#~ "network establish a sub-network where"
#~ " every member has visibility to a "
#~ "particular set of transactions. Thus, "
#~ "only those nodes that participate in "
#~ "a channel have access to the smart"
#~ " contract (chaincode) and data transacted,"
#~ " preserving the privacy and confidentiality"
#~ " of both. Private data allows "
#~ "collections between members on a "
#~ "channel, allowing much of the same "
#~ "protection as channels without the "
#~ "maintenance overhead of creating and "
#~ "maintaining a separate channel."
#~ msgstr ""

#~ msgid "## Pluggable Consensus"
#~ msgstr ""

#~ msgid ""
#~ "Fabric currently offers a CFT ordering"
#~ " service implementation based on the "
#~ "[`etcd` library](https://coreos.com/etcd/) of the"
#~ " [Raft protocol](https://raft.github.io/raft.pdf). For"
#~ " information about currently available "
#~ "ordering services, check out our "
#~ "[conceptual documentation about "
#~ "ordering](./orderer/ordering_service.html)."
#~ msgstr ""

#~ msgid "## Performance and Scalability"
#~ msgstr ""

#~ msgid ""
#~ "Performance of a blockchain platform can"
#~ " be affected by many variables such"
#~ " as transaction size, block size, "
#~ "network size, as well as limits of"
#~ " the hardware, etc. The Hyperledger "
#~ "Fabric [Performance and Scale working "
#~ "group](https://wiki.hyperledger.org/display/PSWG/Performance+and+Scale+Working+Group)"
#~ " currently works on a benchmarking "
#~ "framework called [Hyperledger "
#~ "Caliper](https://wiki.hyperledger.org/projects/caliper)."
#~ msgstr ""

#~ msgid ""
#~ "Several research papers have been "
#~ "published studying and testing the "
#~ "performance capabilities of Hyperledger "
#~ "Fabric. The latest [scaled Fabric to "
#~ "20,000 transactions per "
#~ "second](https://arxiv.org/abs/1901.00910)."
#~ msgstr ""

#~ msgid "## Conclusion"
#~ msgstr ""

#~ msgid "## Acknowledgement"
#~ msgstr ""

#~ msgid ""
#~ "The preceding is derived from the "
#~ "peer reviewed [\"Hyperledger Fabric: A "
#~ "Distributed Operating System for Permissioned"
#~ " Blockchains\"](https://dl.acm.org/doi/10.1145/3190508.3190538) "
#~ "- Elli Androulaki, Artem Barger, Vita"
#~ " Bortnikov, Christian Cachin, Konstantinos "
#~ "Christidis, Angelo De Caro, David "
#~ "Enyeart, Christopher Ferris, Gennady "
#~ "Laventman, Yacov Manevich, Srinivasan "
#~ "Muralidharan, Chet Murthy, Binh Nguyen, "
#~ "Manish Sethi, Gari Singh, Keith Smith,"
#~ " Alessandro Sorniotti, Chrysoula Stathakopoulou,"
#~ " Marko Vukolic, Sharon Weed Cocco, "
#~ "Jason Yellick"
#~ msgstr ""

