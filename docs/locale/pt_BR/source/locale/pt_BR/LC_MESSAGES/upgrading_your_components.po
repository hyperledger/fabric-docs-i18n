# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, hyperledger
# This file is distributed under the same license as the
# hyperledger-fabricdocs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: hyperledger-fabricdocs master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-24 19:11-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../source/upgrading_your_components.md:1
msgid "Upgrading your components"
msgstr ""

#: ../../source/upgrading_your_components.md:3
msgid "Audience: network administrators, node administrators"
msgstr ""

#: ../../source/upgrading_your_components.md:5
msgid ""
"For information about special considerations for the latest release of "
"Fabric, check out Upgrading to the latest release of Fabric."
msgstr ""

#: ../../source/upgrading_your_components.md:7
msgid ""
"This topic will only cover the process for upgrading components. For "
"information about how to edit a channel to change the capability level of"
" your channels, check out Updating a channel capability."
msgstr ""

#: ../../source/upgrading_your_components.md:9
msgid ""
"Note: when we use the term “upgrade” in Hyperledger Fabric, we’re "
"referring to changing the version of a component (for example, going from"
" one version of a binary to the next version). The term “update,” on the "
"other hand, refers not to versions but to configuration changes, such as "
"updating a channel configuration or a deployment script. As there is no "
"data migration, technically speaking, in Fabric, we will not use the term"
" \"migration\" or \"migrate\" here."
msgstr ""

#: ../../source/upgrading_your_components.md:11
msgid "Overview"
msgstr ""

#: ../../source/upgrading_your_components.md:13
msgid ""
"At a high level, upgrading the binary level of your nodes is a two step "
"process:"
msgstr ""

#: ../../source/upgrading_your_components.md:15
msgid "Backup the ledger and MSPs."
msgstr ""

#: ../../source/upgrading_your_components.md:16
msgid "Upgrade binaries to the latest version."
msgstr ""

#: ../../source/upgrading_your_components.md:18
msgid ""
"If you own both ordering nodes and peers, it is a best practice to "
"upgrade the ordering nodes first. If a peer falls behind or is "
"temporarily unable to process certain transactions, it can always catch "
"up. If enough ordering nodes go down, by comparison, a network can "
"effectively cease to function."
msgstr ""

#: ../../source/upgrading_your_components.md:20
msgid ""
"This topic presumes that these steps will be performed using Docker CLI "
"commands. If you are utilizing a different deployment method (Rancher, "
"Kubernetes, OpenShift, etc) consult their documentation on how to use "
"their CLI."
msgstr ""

#: ../../source/upgrading_your_components.md:22
msgid ""
"For native deployments, note that you will also need to update the YAML "
"configuration file for the nodes (for example, the orderer.yaml file) "
"with the one from the release artifacts."
msgstr ""

#: ../../source/upgrading_your_components.md:24
msgid ""
"To do this, backup the orderer.yaml or core.yaml file (for the peer) and "
"replace it with the orderer.yaml or core.yaml file from the release "
"artifacts. Then port any modified variables from the backed up "
"orderer.yaml or core.yaml to the new one. Using a utility like diff may "
"be helpful. Note that updating the YAML file from the release rather than"
" updating your old YAML file is the recommended way to update your node "
"YAML files, as it reduces the likelihood of making errors."
msgstr ""

#: ../../source/upgrading_your_components.md:26
msgid ""
"This tutorial assumes a Docker deployment where the YAML files will be "
"baked into the images and environment variables will be used to overwrite"
" the defaults in the configuration files."
msgstr ""

#: ../../source/upgrading_your_components.md:28
msgid "Environment variables for the binaries"
msgstr ""

#: ../../source/upgrading_your_components.md:30
msgid ""
"When you deploy a peer or an ordering node, you had to set a number of "
"environment variables relevant to its configuration. A best practice is "
"to create a file for these environment variables, give it a name relevant"
" to the node being deployed, and save it somewhere on your local file "
"system. That way you can be sure that when upgrading the peer or ordering"
" node you are using the same variables you set when creating it."
msgstr ""

#: ../../source/upgrading_your_components.md:32
msgid ""
"Here's a list of some of the peer environment variables (with sample "
"values --- as you can see from the addresses, these environment variables"
" are for a network deployed locally) that can be set that be listed in "
"the file. Note that you may or may not need to set all of these "
"environment variables:"
msgstr ""

#: ../../source/upgrading_your_components.md:52
msgid ""
"Here are some ordering node variables (again, these are sample values) "
"that might be listed in the environment variable file for a node. Again, "
"you may or may not need to set all of these environment variables:"
msgstr ""

#: ../../source/upgrading_your_components.md:69
msgid ""
"However you choose to set your environment variables, note that they will"
" have to be set for each node you want to upgrade."
msgstr ""

#: ../../source/upgrading_your_components.md:71
msgid "Ledger backup and restore"
msgstr ""

#: ../../source/upgrading_your_components.md:73
msgid ""
"While we will demonstrate the process for backing up ledger data in this "
"tutorial, it is not strictly required to backup the ledger data of a peer"
" or an ordering node (assuming the node is part of a larger group of "
"nodes in an ordering service). This is because, even in the worst case of"
" catastrophic failure of a peer (such as a disk failure), the peer can be"
" brought up with no ledger at all. You can then have the peer re-join the"
" desired channels and as a result, the peer will automatically create a "
"ledger for each of the channels and will start receiving the blocks via "
"regular block transfer mechanism from either the ordering service or the "
"other peers in the channel. As the peer processes blocks, it will also "
"build up its state database."
msgstr ""

#: ../../source/upgrading_your_components.md:75
msgid ""
"However, backing up ledger data enables the restoration of a peer without"
" the time and computational costs associated with bootstrapping from the "
"genesis block and reprocessing all transactions, a process that can take "
"hours (depending on the size of the ledger). In addition, ledger data "
"backups may help to expedite the addition of a new peer, which can be "
"achieved by backing up the ledger data from one peer and starting the new"
" peer with the backed up ledger data."
msgstr ""

#: ../../source/upgrading_your_components.md:77
msgid ""
"This tutorial presumes that the file path to the ledger data has not been"
" changed from the default value of /var/hyperledger/production/ (for "
"peers) or /var/hyperledger/production/orderer (for ordering nodes). If "
"this location has been changed for your nodes, enter the path to the data"
" on your ledgers in the commands below."
msgstr ""

#: ../../source/upgrading_your_components.md:79
msgid ""
"Note that there will be data for both the ledger and chaincodes at this "
"file location. While it is a best practice to backup both, it is possible"
" to skip the stateLeveldb, historyLeveldb, chains/index folders at "
"/var/hyperledger/production/ledgersData. While skipping these folders "
"reduces the storage needed for the backup, the peer recovery from the "
"backed up data may take more time as these ledger artifacts will be re-"
"constructed when the peer starts."
msgstr ""

#: ../../source/upgrading_your_components.md:81
msgid ""
"If using CouchDB as state database, there will be no stateLeveldb "
"directory, as the state database data would be stored within CouchDB "
"instead. But similarly, if peer starts up and finds CouchDB databases are"
" missing or at lower block height (based on using an older CouchDB "
"backup), the state database will be automatically re-constructed to catch"
" up to current block height. Therefore, if you backup peer ledger data "
"and CouchDB data separately, ensure that the CouchDB backup is always "
"older than the peer backup."
msgstr ""

#: ../../source/upgrading_your_components.md:83
msgid "Upgrade ordering nodes"
msgstr ""

#: ../../source/upgrading_your_components.md:85
msgid ""
"Orderer containers should be upgraded in a rolling fashion (one at a "
"time). At a high level, the ordering node upgrade process goes as "
"follows:"
msgstr ""

#: ../../source/upgrading_your_components.md:87
msgid "Stop the ordering node."
msgstr ""

#: ../../source/upgrading_your_components.md:88
msgid "Back up the ordering node's ledger and MSP."
msgstr ""

#: ../../source/upgrading_your_components.md:89
msgid "Remove the ordering node container."
msgstr ""

#: ../../source/upgrading_your_components.md:90
msgid "Launch a new ordering node container using the relevant image tag."
msgstr ""

#: ../../source/upgrading_your_components.md:92
msgid ""
"Repeat this process for each node in your ordering service until the "
"entire ordering service has been upgraded."
msgstr ""

#: ../../source/upgrading_your_components.md:94
#: ../../source/upgrading_your_components.md:146
msgid "Set command environment variables"
msgstr ""

#: ../../source/upgrading_your_components.md:96
msgid ""
"Export the following environment variables before attempting to upgrade "
"your ordering nodes."
msgstr ""

#: ../../source/upgrading_your_components.md:98
msgid ""
"ORDERER_CONTAINER: the name of your ordering node container. Note that "
"you will need to export this variable for each node when upgrading it."
msgstr ""

#: ../../source/upgrading_your_components.md:99
#: ../../source/upgrading_your_components.md:151
msgid ""
"LEDGERS_BACKUP: the place in your local filesystem where you want to "
"store the ledger being backed up. As you will see below, each node being "
"backed up will have its own subfolder containing its ledger. You will "
"need to create this folder."
msgstr ""

#: ../../source/upgrading_your_components.md:100
#: ../../source/upgrading_your_components.md:152
msgid "IMAGE_TAG: the Fabric version you are upgrading to. For example, 2.0."
msgstr ""

#: ../../source/upgrading_your_components.md:102
msgid ""
"Note that you will have to set an image tag to ensure that the node you "
"are starting using the correct images. The process you use to set the tag"
" will depend on your deployment method."
msgstr ""

#: ../../source/upgrading_your_components.md:104
#: ../../source/upgrading_your_components.md:158
msgid "Upgrade containers"
msgstr ""

#: ../../source/upgrading_your_components.md:106
msgid "Let’s begin the upgrade process by bringing down the orderer:"
msgstr ""

#: ../../source/upgrading_your_components.md:112
msgid "Once the orderer is down, you'll want to backup its ledger and MSP:"
msgstr ""

#: ../../source/upgrading_your_components.md:118
msgid ""
"Then remove the ordering node container itself (since we will be giving "
"our new container the same name as our old one):"
msgstr ""

#: ../../source/upgrading_your_components.md:124
msgid "Then you can launch the new ordering node container by issuing:"
msgstr ""

#: ../../source/upgrading_your_components.md:134
msgid ""
"Once all of the ordering nodes have come up, you can move on to upgrading"
" your peers."
msgstr ""

#: ../../source/upgrading_your_components.md:136
msgid "Upgrade the peers"
msgstr ""

#: ../../source/upgrading_your_components.md:138
msgid ""
"Peers should, like the ordering nodes, be upgraded in a rolling fashion "
"(one at a time). As mentioned during the ordering node upgrade, ordering "
"nodes and peers may be upgraded in parallel, but for the purposes of this"
" tutorial we’ve separated the processes out. At a high level, we will "
"perform the following steps:"
msgstr ""

#: ../../source/upgrading_your_components.md:140
msgid "Stop the peer."
msgstr ""

#: ../../source/upgrading_your_components.md:141
msgid "Back up the peer’s ledger and MSP."
msgstr ""

#: ../../source/upgrading_your_components.md:142
msgid "Remove chaincode containers and images."
msgstr ""

#: ../../source/upgrading_your_components.md:143
msgid "Remove the peer container."
msgstr ""

#: ../../source/upgrading_your_components.md:144
msgid "Launch a new peer container using the relevant image tag."
msgstr ""

#: ../../source/upgrading_your_components.md:148
msgid ""
"Export the following environment variables before attempting to upgrade "
"your peers."
msgstr ""

#: ../../source/upgrading_your_components.md:150
msgid ""
"PEER_CONTAINER: the name of your peer container. Note that you will need "
"to set this variable for each node."
msgstr ""

#: ../../source/upgrading_your_components.md:154
msgid ""
"Note that you will have to set an image tag to ensure that the node you "
"are starting is using the correct images. The process you use to set the "
"tag will depend on your deployment method."
msgstr ""

#: ../../source/upgrading_your_components.md:156
msgid ""
"Repeat this process for each of your peers until every node has been "
"upgraded."
msgstr ""

#: ../../source/upgrading_your_components.md:160
msgid "Let’s bring down the first peer with the following command:"
msgstr ""

#: ../../source/upgrading_your_components.md:166
msgid "We can then backup the peer’s ledger and MSP:"
msgstr ""

#: ../../source/upgrading_your_components.md:172
msgid ""
"With the peer stopped and the ledger backed up, remove the peer chaincode"
" containers:"
msgstr ""

#: ../../source/upgrading_your_components.md:179
msgid "And the peer chaincode images:"
msgstr ""

#: ../../source/upgrading_your_components.md:186
msgid ""
"Then remove the peer container itself (since we will be giving our new "
"container the same name as our old one):"
msgstr ""

#: ../../source/upgrading_your_components.md:192
msgid "Then you can launch the new peer container by issuing:"
msgstr ""

#: ../../source/upgrading_your_components.md:202
msgid ""
"You do not need to relaunch the chaincode container. When the peer gets a"
" request for a chaincode, (invoke or query), it first checks if it has a "
"copy of that chaincode running. If so, it uses it. Otherwise, as in this "
"case, the peer launches the chaincode (rebuilding the image if required)."
msgstr ""

#: ../../source/upgrading_your_components.md:204
msgid "Verify peer upgrade completion"
msgstr ""

#: ../../source/upgrading_your_components.md:206
msgid ""
"It's a best practice to ensure the upgrade has been completed properly "
"with a chaincode invoke. Note that it should be possible to verify that a"
" single peer has been successfully updated by querying one of the ledgers"
" hosted on the peer. If you want to verify that multiple peers have been "
"upgraded, and are updating your chaincode as part of the upgrade process,"
" you should wait until peers from enough organizations to satisfy the "
"endorsement policy have been upgraded."
msgstr ""

#: ../../source/upgrading_your_components.md:208
msgid ""
"Before you attempt this, you may want to upgrade peers from enough "
"organizations to satisfy your endorsement policy. However, this is only "
"mandatory if you are updating your chaincode as part of the upgrade "
"process. If you are not updating your chaincode as part of the upgrade "
"process, it is possible to get endorsements from peers running at "
"different Fabric versions."
msgstr ""

#: ../../source/upgrading_your_components.md:210
msgid "Upgrade your CAs"
msgstr ""

#: ../../source/upgrading_your_components.md:212
msgid ""
"To learn how to upgrade your Fabric CA server, click over to the CA "
"documentation."
msgstr ""

#: ../../source/upgrading_your_components.md:214
msgid "Upgrade Node SDK clients"
msgstr ""

#: ../../source/upgrading_your_components.md:216
msgid ""
"Upgrade Fabric and Fabric CA before upgrading Node SDK clients. Fabric "
"and Fabric CA are tested for backwards compatibility with older SDK "
"clients. While newer SDK clients often work with older Fabric and Fabric "
"CA releases, they may expose features that are not yet available in the "
"older Fabric and Fabric CA releases, and are not tested for full "
"compatibility."
msgstr ""

#: ../../source/upgrading_your_components.md:218
msgid ""
"Use NPM to upgrade any Node.js client by executing these commands in the "
"root directory of your application:"
msgstr ""

#: ../../source/upgrading_your_components.md:226
msgid ""
"These commands install the new version of both the Fabric client and "
"Fabric-CA client and write the new versions to package.json."
msgstr ""

#: ../../source/upgrading_your_components.md:228
msgid "Upgrading CouchDB"
msgstr ""

#: ../../source/upgrading_your_components.md:230
msgid ""
"If you are using CouchDB as state database, you should upgrade the peer's"
" CouchDB at the same time the peer is being upgraded."
msgstr ""

#: ../../source/upgrading_your_components.md:232
msgid "To upgrade CouchDB:"
msgstr ""

#: ../../source/upgrading_your_components.md:234
msgid "Stop CouchDB."
msgstr ""

#: ../../source/upgrading_your_components.md:235
msgid "Backup CouchDB data directory."
msgstr ""

#: ../../source/upgrading_your_components.md:236
msgid ""
"Install the latest CouchDB binaries or update deployment scripts to use a"
" new Docker image."
msgstr ""

#: ../../source/upgrading_your_components.md:237
msgid "Restart CouchDB."
msgstr ""

#: ../../source/upgrading_your_components.md:239
msgid "Upgrade Node chaincode shim"
msgstr ""

#: ../../source/upgrading_your_components.md:241
msgid ""
"To move to the new version of the Node chaincode shim a developer would "
"need to:"
msgstr ""

#: ../../source/upgrading_your_components.md:243
msgid ""
"Change the level of fabric-shim in their chaincode package.json from "
"their old level to the new one."
msgstr ""

#: ../../source/upgrading_your_components.md:244
msgid ""
"Repackage this new chaincode package and install it on all the endorsing "
"peers in the channel."
msgstr ""

#: ../../source/upgrading_your_components.md:245
msgid ""
"Perform an upgrade to this new chaincode. To see how to do this, check "
"out Peer chaincode commands."
msgstr ""

#: ../../source/upgrading_your_components.md:247
msgid "Upgrade Chaincodes with vendored shim"
msgstr ""

#: ../../source/upgrading_your_components.md:249
msgid ""
"For information about upgrading the Go chaincode shim specific to the "
"v2.0 release, check out Chaincode shim changes."
msgstr ""

#: ../../source/upgrading_your_components.md:251
msgid ""
"A number of third party tools exist that will allow you to vendor a "
"chaincode shim. If you used one of these tools, use the same one to "
"update your vendored chaincode shim and re-package your chaincode."
msgstr ""

#: ../../source/upgrading_your_components.md:253
msgid ""
"If your chaincode vendors the shim, after updating the shim version, you "
"must install it to all peers which already have the chaincode. Install it"
" with the same name, but a newer version. Then you should execute a "
"chaincode upgrade on each channel where this chaincode has been deployed "
"to move to the new version."
msgstr ""

#~ msgid "Upgrading your components"
#~ msgstr ""

#~ msgid "Audience: network administrators, node administrators"
#~ msgstr ""

#~ msgid ""
#~ "For information about special considerations"
#~ " for the latest release of Fabric,"
#~ " check out Upgrading to the latest"
#~ " release of Fabric."
#~ msgstr ""

#~ msgid ""
#~ "This topic will only cover the "
#~ "process for upgrading components. For "
#~ "information about how to edit a "
#~ "channel to change the capability level"
#~ " of your channels, check out Updating"
#~ " a channel capability."
#~ msgstr ""

#~ msgid "Overview"
#~ msgstr ""

#~ msgid ""
#~ "For native deployments, note that you"
#~ " will also need to update the "
#~ "YAML configuration file for the nodes"
#~ " (for example, the orderer.yaml file) "
#~ "with the one from the release "
#~ "artifacts."
#~ msgstr ""

#~ msgid ""
#~ "To do this, backup the orderer.yaml "
#~ "or core.yaml file (for the peer) "
#~ "and replace it with the orderer.yaml "
#~ "or core.yaml file from the release "
#~ "artifacts. Then port any modified "
#~ "variables from the backed up "
#~ "orderer.yaml or core.yaml to the new "
#~ "one. Using a utility like diff may"
#~ " be helpful. Note that updating the"
#~ " YAML file from the release rather"
#~ " than updating your old YAML file "
#~ "is the recommended way to update "
#~ "your node YAML files, as it "
#~ "reduces the likelihood of making errors."
#~ msgstr ""

#~ msgid "Environment variables for the binaries"
#~ msgstr ""

#~ msgid ""
#~ "Here's a list of some of the "
#~ "peer environment variables (with sample "
#~ "values --- as you can see from "
#~ "the addresses, these environment variables "
#~ "are for a network deployed locally) "
#~ "that can be set that be listed "
#~ "in the file. Note that you may "
#~ "or may not need to set all "
#~ "of these environment variables:"
#~ msgstr ""

#~ msgid ""
#~ "Here are some ordering node variables"
#~ " (again, these are sample values) "
#~ "that might be listed in the "
#~ "environment variable file for a node."
#~ " Again, you may or may not need"
#~ " to set all of these environment "
#~ "variables:"
#~ msgstr ""

#~ msgid "Ledger backup and restore"
#~ msgstr ""

#~ msgid ""
#~ "This tutorial presumes that the file "
#~ "path to the ledger data has not"
#~ " been changed from the default value"
#~ " of /var/hyperledger/production/ (for peers) "
#~ "or /var/hyperledger/production/orderer (for ordering"
#~ " nodes). If this location has been"
#~ " changed for your nodes, enter the"
#~ " path to the data on your "
#~ "ledgers in the commands below."
#~ msgstr ""

#~ msgid ""
#~ "Note that there will be data for"
#~ " both the ledger and chaincodes at"
#~ " this file location. While it is "
#~ "a best practice to backup both, it"
#~ " is possible to skip the "
#~ "stateLeveldb, historyLeveldb, chains/index folders"
#~ " at /var/hyperledger/production/ledgersData. While "
#~ "skipping these folders reduces the "
#~ "storage needed for the backup, the "
#~ "peer recovery from the backed up "
#~ "data may take more time as these"
#~ " ledger artifacts will be re-"
#~ "constructed when the peer starts."
#~ msgstr ""

#~ msgid ""
#~ "If using CouchDB as state database, "
#~ "there will be no stateLeveldb directory,"
#~ " as the state database data would "
#~ "be stored within CouchDB instead. But"
#~ " similarly, if peer starts up and "
#~ "finds CouchDB databases are missing or"
#~ " at lower block height (based on "
#~ "using an older CouchDB backup), the "
#~ "state database will be automatically "
#~ "re-constructed to catch up to current"
#~ " block height. Therefore, if you "
#~ "backup peer ledger data and CouchDB "
#~ "data separately, ensure that the CouchDB"
#~ " backup is always older than the "
#~ "peer backup."
#~ msgstr ""

#~ msgid "Upgrade ordering nodes"
#~ msgstr ""

#~ msgid "Set command environment variables"
#~ msgstr ""

#~ msgid ""
#~ "ORDERER_CONTAINER: the name of your "
#~ "ordering node container. Note that you"
#~ " will need to export this variable"
#~ " for each node when upgrading it."
#~ msgstr ""

#~ msgid ""
#~ "LEDGERS_BACKUP: the place in your local"
#~ " filesystem where you want to store"
#~ " the ledger being backed up. As "
#~ "you will see below, each node "
#~ "being backed up will have its own"
#~ " subfolder containing its ledger. You "
#~ "will need to create this folder."
#~ msgstr ""

#~ msgid "IMAGE_TAG: the Fabric version you are upgrading to. For example, 2.0."
#~ msgstr ""

#~ msgid ""
#~ "Note that you will have to set "
#~ "an image tag to ensure that the"
#~ " node you are starting using the "
#~ "correct images. The process you use "
#~ "to set the tag will depend on "
#~ "your deployment method."
#~ msgstr ""

#~ msgid "Upgrade containers"
#~ msgstr ""

#~ msgid "Let’s begin the upgrade process by bringing down the orderer:"
#~ msgstr ""

#~ msgid "Once the orderer is down, you'll want to backup its ledger and MSP:"
#~ msgstr ""

#~ msgid "Upgrade the peers"
#~ msgstr ""

#~ msgid ""
#~ "PEER_CONTAINER: the name of your peer"
#~ " container. Note that you will need"
#~ " to set this variable for each "
#~ "node."
#~ msgstr ""

#~ msgid ""
#~ "Note that you will have to set "
#~ "an image tag to ensure that the"
#~ " node you are starting is using "
#~ "the correct images. The process you "
#~ "use to set the tag will depend "
#~ "on your deployment method."
#~ msgstr ""

#~ msgid "Let’s bring down the first peer with the following command:"
#~ msgstr ""

#~ msgid "We can then backup the peer’s ledger and MSP:"
#~ msgstr ""

#~ msgid ""
#~ "With the peer stopped and the "
#~ "ledger backed up, remove the peer "
#~ "chaincode containers:"
#~ msgstr ""

#~ msgid "Verify peer upgrade completion"
#~ msgstr ""

#~ msgid "Upgrade your CAs"
#~ msgstr ""

#~ msgid ""
#~ "To learn how to upgrade your "
#~ "Fabric CA server, click over to "
#~ "the CA documentation."
#~ msgstr ""

#~ msgid "Upgrade Node SDK clients"
#~ msgstr ""

#~ msgid ""
#~ "Use NPM to upgrade any Node.js "
#~ "client by executing these commands in"
#~ " the root directory of your "
#~ "application:"
#~ msgstr ""

#~ msgid ""
#~ "These commands install the new version"
#~ " of both the Fabric client and "
#~ "Fabric-CA client and write the new"
#~ " versions to package.json."
#~ msgstr ""

#~ msgid "Upgrading CouchDB"
#~ msgstr ""

#~ msgid "Upgrade Node chaincode shim"
#~ msgstr ""

#~ msgid ""
#~ "Change the level of fabric-shim in"
#~ " their chaincode package.json from their"
#~ " old level to the new one."
#~ msgstr ""

#~ msgid ""
#~ "Perform an upgrade to this new "
#~ "chaincode. To see how to do this,"
#~ " check out Peer chaincode commands."
#~ msgstr ""

#~ msgid "Upgrade Chaincodes with vendored shim"
#~ msgstr ""

#~ msgid ""
#~ "For information about upgrading the Go"
#~ " chaincode shim specific to the v2.0"
#~ " release, check out Chaincode shim "
#~ "changes."
#~ msgstr ""

#~ msgid "# Upgrading your components"
#~ msgstr ""

#~ msgid "*Audience: network administrators, node administrators*"
#~ msgstr ""

#~ msgid ""
#~ "For information about special considerations"
#~ " for the latest release of Fabric,"
#~ " check out [Upgrading to the latest"
#~ " release of Fabric](./upgrade_to_newest_version.html)."
#~ msgstr ""

#~ msgid ""
#~ "This topic will only cover the "
#~ "process for upgrading components. For "
#~ "information about how to edit a "
#~ "channel to change the capability level"
#~ " of your channels, check out "
#~ "[Updating a channel "
#~ "capability](./updating_capabilities.html)."
#~ msgstr ""

#~ msgid "## Overview"
#~ msgstr ""

#~ msgid ""
#~ "For native deployments, note that you"
#~ " will also need to update the "
#~ "YAML configuration file for the nodes"
#~ " (for example, the `orderer.yaml` file) "
#~ "with the one from the release "
#~ "artifacts."
#~ msgstr ""

#~ msgid ""
#~ "To do this, backup the `orderer.yaml`"
#~ " or `core.yaml` file (for the peer)"
#~ " and replace it with the "
#~ "`orderer.yaml` or `core.yaml` file from "
#~ "the release artifacts. Then port any "
#~ "modified variables from the backed up"
#~ " `orderer.yaml` or `core.yaml` to the "
#~ "new one. Using a utility like "
#~ "`diff` may be helpful. Note that "
#~ "updating the YAML file from the "
#~ "release rather than updating your old"
#~ " YAML file **is the recommended way"
#~ " to update your node YAML files**,"
#~ " as it reduces the likelihood of "
#~ "making errors."
#~ msgstr ""

#~ msgid "## Environment variables for the binaries"
#~ msgstr ""

#~ msgid ""
#~ "Here's a list of some of the "
#~ "**peer** environment variables (with sample"
#~ " values --- as you can see from"
#~ " the addresses, these environment variables"
#~ " are for a network deployed locally)"
#~ " that can be set that be listed"
#~ " in the file. Note that you may"
#~ " or may not need to set all "
#~ "of these environment variables:"
#~ msgstr ""

#~ msgid ""
#~ "``` CORE_PEER_TLS_ENABLED=true "
#~ "CORE_PEER_GOSSIP_USELEADERELECTION=true "
#~ "CORE_PEER_GOSSIP_ORGLEADER=false CORE_PEER_PROFILE_ENABLED=true"
#~ " CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt "
#~ "CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key "
#~ "CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt "
#~ "CORE_PEER_ID=peer0.org1.example.com "
#~ "CORE_PEER_ADDRESS=peer0.org1.example.com:7051 "
#~ "CORE_PEER_LISTENADDRESS=0.0.0.0:7051 "
#~ "CORE_PEER_CHAINCODEADDRESS=peer0.org1.example.com:7052 "
#~ "CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052 "
#~ "CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org1.example.com:7051 "
#~ "CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org1.example.com:7051 "
#~ "CORE_PEER_LOCALMSPID=Org1MSP ```"
#~ msgstr ""

#~ msgid ""
#~ "Here are some **ordering node** "
#~ "variables (again, these are sample "
#~ "values) that might be listed in "
#~ "the environment variable file for a "
#~ "node. Again, you may or may not"
#~ " need to set all of these "
#~ "environment variables:"
#~ msgstr ""

#~ msgid ""
#~ "``` ORDERER_GENERAL_LISTENADDRESS=0.0.0.0 "
#~ "ORDERER_GENERAL_GENESISMETHOD=file "
#~ "ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block"
#~ " ORDERER_GENERAL_LOCALMSPID=OrdererMSP "
#~ "ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp "
#~ "ORDERER_GENERAL_TLS_ENABLED=true "
#~ "ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key"
#~ " "
#~ "ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt"
#~ " ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]"
#~ " "
#~ "ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE=/var/hyperledger/orderer/tls/server.crt"
#~ " "
#~ "ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY=/var/hyperledger/orderer/tls/server.key"
#~ " "
#~ "ORDERER_GENERAL_CLUSTER_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]"
#~ " ```"
#~ msgstr ""

#~ msgid "## Ledger backup and restore"
#~ msgstr ""

#~ msgid ""
#~ "This tutorial presumes that the file "
#~ "path to the ledger data has not"
#~ " been changed from the default value"
#~ " of `/var/hyperledger/production/` (for peers)"
#~ " or `/var/hyperledger/production/orderer` (for "
#~ "ordering nodes). If this location has"
#~ " been changed for your nodes, enter"
#~ " the path to the data on your"
#~ " ledgers in the commands below."
#~ msgstr ""

#~ msgid ""
#~ "Note that there will be data for"
#~ " both the ledger and chaincodes at"
#~ " this file location. While it is "
#~ "a best practice to backup both, it"
#~ " is possible to skip the "
#~ "`stateLeveldb`, `historyLeveldb`, `chains/index` "
#~ "folders at `/var/hyperledger/production/ledgersData`. "
#~ "While skipping these folders reduces the"
#~ " storage needed for the backup, the"
#~ " peer recovery from the backed up "
#~ "data may take more time as these"
#~ " ledger artifacts will be re-"
#~ "constructed when the peer starts."
#~ msgstr ""

#~ msgid ""
#~ "If using CouchDB as state database, "
#~ "there will be no `stateLeveldb` "
#~ "directory, as the state database data"
#~ " would be stored within CouchDB "
#~ "instead. But similarly, if peer starts"
#~ " up and finds CouchDB databases are"
#~ " missing or at lower block height "
#~ "(based on using an older CouchDB "
#~ "backup), the state database will be "
#~ "automatically re-constructed to catch up"
#~ " to current block height. Therefore, "
#~ "if you backup peer ledger data and"
#~ " CouchDB data separately, ensure that "
#~ "the CouchDB backup is always older "
#~ "than the peer backup."
#~ msgstr ""

#~ msgid "## Upgrade ordering nodes"
#~ msgstr ""

#~ msgid "### Set command environment variables"
#~ msgstr ""

#~ msgid ""
#~ "`ORDERER_CONTAINER`: the name of your "
#~ "ordering node container. Note that you"
#~ " will need to export this variable"
#~ " for each node when upgrading it."
#~ msgstr ""

#~ msgid ""
#~ "`LEDGERS_BACKUP`: the place in your "
#~ "local filesystem where you want to "
#~ "store the ledger being backed up. "
#~ "As you will see below, each node"
#~ " being backed up will have its "
#~ "own subfolder containing its ledger. You"
#~ " will need to create this folder."
#~ msgstr ""

#~ msgid ""
#~ "`IMAGE_TAG`: the Fabric version you are"
#~ " upgrading to. For example, `2.0`."
#~ msgstr ""

#~ msgid ""
#~ "Note that you will have to set "
#~ "an **image tag** to ensure that "
#~ "the node you are starting using "
#~ "the correct images. The process you "
#~ "use to set the tag will depend "
#~ "on your deployment method."
#~ msgstr ""

#~ msgid "### Upgrade containers"
#~ msgstr ""

#~ msgid "Let’s begin the upgrade process by **bringing down the orderer**:"
#~ msgstr ""

#~ msgid "``` docker stop $ORDERER_CONTAINER ```"
#~ msgstr ""

#~ msgid "Once the orderer is down, you'll want to **backup its ledger and MSP**:"
#~ msgstr ""

#~ msgid ""
#~ "``` docker cp "
#~ "$ORDERER_CONTAINER:/var/hyperledger/production/orderer/ "
#~ "./$LEDGERS_BACKUP/$ORDERER_CONTAINER ```"
#~ msgstr ""

#~ msgid "``` docker rm -f $ORDERER_CONTAINER ```"
#~ msgstr ""

#~ msgid ""
#~ "``` docker run -d -v "
#~ "/opt/backup/$ORDERER_CONTAINER/:/var/hyperledger/production/orderer/"
#~ " \\"
#~ msgstr ""

#~ msgid ""
#~ "-v /opt/msp/:/etc/hyperledger/fabric/msp/ \\ "
#~ "--env-file ./env<name of node>.list \\ "
#~ "--name $ORDERER_CONTAINER \\ hyperledger/fabric-"
#~ "orderer:$IMAGE_TAG orderer"
#~ msgstr ""

#~ msgid "```"
#~ msgstr ""

#~ msgid "## Upgrade the peers"
#~ msgstr ""

#~ msgid ""
#~ "`PEER_CONTAINER`: the name of your peer"
#~ " container. Note that you will need"
#~ " to set this variable for each "
#~ "node."
#~ msgstr ""

#~ msgid ""
#~ "Note that you will have to set "
#~ "an **image tag** to ensure that "
#~ "the node you are starting is using"
#~ " the correct images. The process you"
#~ " use to set the tag will depend"
#~ " on your deployment method."
#~ msgstr ""

#~ msgid "Let’s **bring down the first peer** with the following command:"
#~ msgstr ""

#~ msgid "``` docker stop $PEER_CONTAINER ```"
#~ msgstr ""

#~ msgid "We can then **backup the peer’s ledger and MSP**:"
#~ msgstr ""

#~ msgid ""
#~ "``` docker cp "
#~ "$PEER_CONTAINER:/var/hyperledger/production "
#~ "./$LEDGERS_BACKUP/$PEER_CONTAINER ```"
#~ msgstr ""

#~ msgid ""
#~ "With the peer stopped and the "
#~ "ledger backed up, **remove the peer "
#~ "chaincode containers**:"
#~ msgstr ""

#~ msgid ""
#~ "``` CC_CONTAINERS=$(docker ps | grep "
#~ "dev-$PEER_CONTAINER | awk '{print $1}') "
#~ "if [ -n \"$CC_CONTAINERS\" ] ; "
#~ "then docker rm -f $CC_CONTAINERS ; "
#~ "fi ```"
#~ msgstr ""

#~ msgid ""
#~ "``` CC_IMAGES=$(docker images | grep "
#~ "dev-$PEER | awk '{print $1}') if ["
#~ " -n \"$CC_IMAGES\" ] ; then docker"
#~ " rmi -f $CC_IMAGES ; fi ```"
#~ msgstr ""

#~ msgid "``` docker rm -f $PEER_CONTAINER ```"
#~ msgstr ""

#~ msgid ""
#~ "``` docker run -d -v "
#~ "/opt/backup/$PEER_CONTAINER/:/var/hyperledger/production/ \\"
#~ msgstr ""

#~ msgid ""
#~ "-v /opt/msp/:/etc/hyperledger/fabric/msp/ \\ "
#~ "--env-file ./env<name of node>.list \\ "
#~ "--name $PEER_CONTAINER \\ hyperledger/fabric-"
#~ "peer:$IMAGE_TAG peer node start"
#~ msgstr ""

#~ msgid "### Verify peer upgrade completion"
#~ msgstr ""

#~ msgid "## Upgrade your CAs"
#~ msgstr ""

#~ msgid ""
#~ "To learn how to upgrade your "
#~ "Fabric CA server, click over to "
#~ "the [CA documentation](http://hyperledger-fabric-"
#~ "ca.readthedocs.io/en/latest/users-guide.html#upgrading-"
#~ "the-server)."
#~ msgstr ""

#~ msgid "## Upgrade Node SDK clients"
#~ msgstr ""

#~ msgid ""
#~ "Use NPM to upgrade any `Node.js` "
#~ "client by executing these commands in"
#~ " the root directory of your "
#~ "application:"
#~ msgstr ""

#~ msgid "``` npm install fabric-client@latest"
#~ msgstr ""

#~ msgid "npm install fabric-ca-client@latest ```"
#~ msgstr ""

#~ msgid ""
#~ "These commands install the new version"
#~ " of both the Fabric client and "
#~ "Fabric-CA client and write the new"
#~ " versions to `package.json`."
#~ msgstr ""

#~ msgid "## Upgrading CouchDB"
#~ msgstr ""

#~ msgid "## Upgrade Node chaincode shim"
#~ msgstr ""

#~ msgid ""
#~ "Change the level of `fabric-shim` "
#~ "in their chaincode `package.json` from "
#~ "their old level to the new one."
#~ msgstr ""

#~ msgid ""
#~ "Perform an upgrade to this new "
#~ "chaincode. To see how to do this,"
#~ " check out [Peer chaincode "
#~ "commands](./commands/peerchaincode.html)."
#~ msgstr ""

#~ msgid "## Upgrade Chaincodes with vendored shim"
#~ msgstr ""

#~ msgid ""
#~ "For information about upgrading the Go"
#~ " chaincode shim specific to the v2.0"
#~ " release, check out [Chaincode shim "
#~ "changes](./upgrade_to_newest_version.html#chaincode-shim-"
#~ "changes)."
#~ msgstr ""

#~ msgid ""
#~ "<!--- Licensed under Creative Commons "
#~ "Attribution 4.0 International License "
#~ "https://creativecommons.org/licenses/by/4.0/ -->"
#~ msgstr ""

