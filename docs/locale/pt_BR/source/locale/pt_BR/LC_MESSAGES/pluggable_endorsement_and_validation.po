# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, hyperledger
# This file is distributed under the same license as the
# hyperledger-fabricdocs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: hyperledger-fabricdocs master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-23 15:31-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../source/pluggable_endorsement_and_validation.rst:2
msgid "Pluggable transaction endorsement and validation"
msgstr ""

#: ../../source/pluggable_endorsement_and_validation.rst:5
msgid "Motivation"
msgstr ""

#: ../../source/pluggable_endorsement_and_validation.rst:7
msgid ""
"When a transaction is validated at time of commit, the peer performs "
"various checks before applying the state changes that come with the "
"transaction itself:"
msgstr ""

#: ../../source/pluggable_endorsement_and_validation.rst:10
msgid "Validating the identities that signed the transaction."
msgstr ""

#: ../../source/pluggable_endorsement_and_validation.rst:11
msgid "Verifying the signatures of the endorsers on the transaction."
msgstr ""

#: ../../source/pluggable_endorsement_and_validation.rst:12
msgid ""
"Ensuring the transaction satisfies the endorsement policies of the "
"namespaces of the corresponding chaincodes."
msgstr ""

#: ../../source/pluggable_endorsement_and_validation.rst:15
msgid ""
"There are use cases which demand custom transaction validation rules "
"different from the default Fabric validation rules, such as:"
msgstr ""

#: ../../source/pluggable_endorsement_and_validation.rst:18
msgid ""
"**UTXO (Unspent Transaction Output):** When the validation takes into "
"account whether the transaction doesn't double spend its inputs."
msgstr ""

#: ../../source/pluggable_endorsement_and_validation.rst:20
msgid ""
"**Anonymous transactions:** When the endorsement doesn't contain the "
"identity of the peer, but a signature and a public key are shared that "
"can't be linked to the peer's identity."
msgstr ""

#: ../../source/pluggable_endorsement_and_validation.rst:25
msgid "Pluggable endorsement and validation logic"
msgstr ""

#: ../../source/pluggable_endorsement_and_validation.rst:27
msgid ""
"Fabric allows for the implementation and deployment of custom endorsement"
" and validation logic into the peer to be associated with chaincode "
"handling in a pluggable manner. This logic can be either compiled into "
"the peer as built in selectable logic, or compiled and deployed alongside"
" the peer as a `Go plugin <https://golang.org/pkg/plugin/>`_."
msgstr ""

#: ../../source/pluggable_endorsement_and_validation.rst:33
msgid ""
"By default, A chaincode will use the built in endorsement and validation "
"logic. However, users have the option of selecting custom endorsement and"
" validation plugins as part of the chaincode definition. An administrator"
" can extend the endorsement/validation logic available to the peer by "
"customizing the peer's local configuration."
msgstr ""

#: ../../source/pluggable_endorsement_and_validation.rst:40
msgid "Configuration"
msgstr ""

#: ../../source/pluggable_endorsement_and_validation.rst:42
msgid ""
"Each peer has a local configuration (``core.yaml``) that declares a "
"mapping between the endorsement/validation logic name and the "
"implementation that is to be run."
msgstr ""

#: ../../source/pluggable_endorsement_and_validation.rst:46
msgid ""
"The default logic are called ``ESCC`` (with the \"E\" standing for "
"endorsement) and ``VSCC`` (validation), and they can be found in the peer"
" local configuration in the ``handlers`` section:"
msgstr ""

#: ../../source/pluggable_endorsement_and_validation.rst:60
msgid ""
"When the endorsement or validation implementation is compiled into the "
"peer, the ``name`` property represents the initialization function that "
"is to be run in order to obtain the factory that creates instances of the"
" endorsement/validation logic."
msgstr ""

#: ../../source/pluggable_endorsement_and_validation.rst:64
msgid ""
"The function is an instance method of the ``HandlerLibrary`` construct "
"under ``core/handlers/library/library.go`` and in order for custom "
"endorsement or validation logic to be added, this construct needs to be "
"extended with any additional methods."
msgstr ""

#: ../../source/pluggable_endorsement_and_validation.rst:69
msgid ""
"Since this is cumbersome and poses a deployment challenge, one can also "
"deploy custom endorsement and validation as a Go plugin by adding another"
" property under the ``name`` called ``library``."
msgstr ""

#: ../../source/pluggable_endorsement_and_validation.rst:73
msgid ""
"For example, if we have custom endorsement and validation logic which is "
"implemented as a plugin, we would have the following entries in the "
"configuration in ``core.yaml``:"
msgstr ""

#: ../../source/pluggable_endorsement_and_validation.rst:93
msgid ""
"And we'd have to place the ``.so`` plugin files in the peer's local file "
"system."
msgstr ""

#: ../../source/pluggable_endorsement_and_validation.rst:95
msgid ""
"The name of the custom plugin needs to be referenced by the chaincode "
"definition to be used by the chaincode. If you are using the peer CLI to "
"approve the chaincode definition, use the ``--escc`` and ``--vscc`` flag "
"to select the name of the custom endorsement or validation library. If "
"you are using the Fabric SDK for Node.js, visit `How to install and start"
" your chaincode <https://hyperledger.github.io/fabric-sdk-node/master"
"/tutorial-chaincode-lifecycle.html>`__. For more information, see "
":doc:`chaincode_lifecycle`."
msgstr ""

#: ../../source/pluggable_endorsement_and_validation.rst:102
msgid ""
"Hereafter, custom endorsement or validation logic implementation is going"
" to be referred to as \"plugins\", even if they are compiled into the "
"peer."
msgstr ""

#: ../../source/pluggable_endorsement_and_validation.rst:107
msgid "Endorsement plugin implementation"
msgstr ""

#: ../../source/pluggable_endorsement_and_validation.rst:109
msgid ""
"To implement an endorsement plugin, one must implement the ``Plugin`` "
"interface found in ``core/handlers/endorsement/api/endorsement.go``:"
msgstr ""

#: ../../source/pluggable_endorsement_and_validation.rst:127
msgid ""
"An endorsement plugin instance of a given plugin type (identified either "
"by the method name as an instance method of the ``HandlerLibrary`` or by "
"the plugin ``.so`` file path) is created for each channel by having the "
"peer invoke the ``New`` method in the ``PluginFactory`` interface which "
"is also expected to be implemented by the plugin developer:"
msgstr ""

#: ../../source/pluggable_endorsement_and_validation.rst:141
msgid ""
"The ``Init`` method is expected to receive as input all the dependencies "
"declared under ``core/handlers/endorsement/api/``, identified as "
"embedding the ``Dependency`` interface."
msgstr ""

#: ../../source/pluggable_endorsement_and_validation.rst:145
msgid ""
"After the creation of the ``Plugin`` instance, the ``Init`` method is "
"invoked on it by the peer with the ``dependencies`` passed as parameters."
msgstr ""

#: ../../source/pluggable_endorsement_and_validation.rst:148
msgid ""
"Currently Fabric comes with the following dependencies for endorsement "
"plugins:"
msgstr ""

#: ../../source/pluggable_endorsement_and_validation.rst:150
msgid ""
"``SigningIdentityFetcher``: Returns an instance of ``SigningIdentity`` "
"based on a given signed proposal:"
msgstr ""

#: ../../source/pluggable_endorsement_and_validation.rst:165
msgid ""
"``StateFetcher``: Fetches a **State** object which interacts with the "
"world state:"
msgstr ""

#: ../../source/pluggable_endorsement_and_validation.rst:186
msgid "Validation plugin implementation"
msgstr ""

#: ../../source/pluggable_endorsement_and_validation.rst:188
msgid ""
"To implement a validation plugin, one must implement the ``Plugin`` "
"interface found in ``core/handlers/validation/api/validation.go``:"
msgstr ""

#: ../../source/pluggable_endorsement_and_validation.rst:203
msgid ""
"Each ``ContextDatum`` is additional runtime-derived metadata that is "
"passed by the peer to the validation plugin. Currently, the only "
"``ContextDatum`` that is passed is one that represents the endorsement "
"policy of the chaincode:"
msgstr ""

#: ../../source/pluggable_endorsement_and_validation.rst:217
msgid ""
"A validation plugin instance of a given plugin type (identified either by"
" the method name as an instance method of the ``HandlerLibrary`` or by "
"the plugin ``.so`` file path) is created for each channel by having the "
"peer invoke the ``New`` method in the ``PluginFactory`` interface which "
"is also expected to be implemented by the plugin developer:"
msgstr ""

#: ../../source/pluggable_endorsement_and_validation.rst:230
msgid ""
"The ``Init`` method is expected to receive as input all the dependencies "
"declared under ``core/handlers/validation/api/``, identified as embedding"
" the ``Dependency`` interface."
msgstr ""

#: ../../source/pluggable_endorsement_and_validation.rst:234
msgid ""
"After the creation of the ``Plugin`` instance, the **Init** method is "
"invoked on it by the peer with the dependencies passed as parameters."
msgstr ""

#: ../../source/pluggable_endorsement_and_validation.rst:237
msgid ""
"Currently Fabric comes with the following dependencies for validation "
"plugins:"
msgstr ""

#: ../../source/pluggable_endorsement_and_validation.rst:239
msgid ""
"``IdentityDeserializer``: Converts byte representation of identities into"
" ``Identity`` objects that can be used to verify signatures signed by "
"them, be validated themselves against their corresponding MSP, and see "
"whether they satisfy a given **MSP Principal**. The full specification "
"can be found in "
"``core/handlers/validation/api/identities/identities.go``."
msgstr ""

#: ../../source/pluggable_endorsement_and_validation.rst:245
msgid "``PolicyEvaluator``: Evaluates whether a given policy is satisfied:"
msgstr ""

#: ../../source/pluggable_endorsement_and_validation.rst:258
msgid ""
"``StateFetcher``: Fetches a ``State`` object which interacts with the "
"world state:"
msgstr ""

#: ../../source/pluggable_endorsement_and_validation.rst:285
msgid "Important notes"
msgstr ""

#: ../../source/pluggable_endorsement_and_validation.rst:287
msgid ""
"**Validation plugin consistency across peers:** In future releases, the "
"Fabric channel infrastructure would guarantee that the same validation "
"logic is used for a given chaincode by all peers in the channel at any "
"given blockchain height in order to eliminate the chance of mis-"
"configuration which would might lead to state divergence among peers that"
" accidentally run different implementations. However, for now it is the "
"sole responsibility of the system operators and administrators to ensure "
"this doesn't happen."
msgstr ""

#: ../../source/pluggable_endorsement_and_validation.rst:295
msgid ""
"**Validation plugin error handling:** Whenever a validation plugin can't "
"determine whether a given transaction is valid or not, because of some "
"transient execution problem like inability to access the database, it "
"should return an error of type **ExecutionFailureError** that is defined "
"in ``core/handlers/validation/api/validation.go``. Any other error that "
"is returned, is treated as an endorsement policy error and marks the "
"transaction as invalidated by the validation logic. However, if an "
"``ExecutionFailureError`` is returned, the chain processing halts instead"
" of marking the transaction as invalid. This is to prevent state "
"divergence between different peers."
msgstr ""

#: ../../source/pluggable_endorsement_and_validation.rst:305
msgid ""
"**Error handling for private metadata retrieval**: In case a plugin "
"retrieves metadata for private data by making use of the ``StateFetcher``"
" interface, it is important that errors are handled as follows: "
"``CollConfigNotDefinedError`` and ``InvalidCollNameError``, signalling "
"that the specified collection does not exist, should be handled as "
"deterministic errors and should not lead the plugin to return an "
"``ExecutionFailureError``."
msgstr ""

#: ../../source/pluggable_endorsement_and_validation.rst:312
msgid ""
"**Importing Fabric code into the plugin**: Importing code that belongs to"
" Fabric other than protobufs as part of the plugin is highly discouraged,"
" and can lead to issues when the Fabric code changes between releases, or"
" can cause inoperability issues when running mixed peer versions. "
"Ideally, the plugin code should only use the dependencies given to it, "
"and should import the bare minimum other than protobufs."
msgstr ""

