# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, hyperledger
# This file is distributed under the same license as the
# hyperledger-fabricdocs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: hyperledger-fabricdocs master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-14 17:38+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../source/capabilities_concept.md:1
msgid "Channel capabilities"
msgstr ""

#: ../../source/capabilities_concept.md:3
msgid "Audience: Channel administrators, node administrators"
msgstr ""

#: ../../source/capabilities_concept.md:5
msgid ""
"Note: this is an advanced Fabric concept that is not necessary for new "
"users or application developers to understand. However, as channels and "
"networks mature, understanding and managing capabilities becomes vital. "
"Furthermore, it is important to recognize that updating capabilities is a"
" different, though often related, process to upgrading nodes. We'll "
"describe this in detail in this topic."
msgstr ""

#: ../../source/capabilities_concept.md:7
msgid ""
"Because Fabric is a distributed system that will usually involve multiple"
" organizations, it is possible (and typical) that different versions of "
"Fabric code will exist on different nodes within the network as well as "
"on the channels in that network. Fabric allows this --- it is not "
"necessary for every peer and ordering node to be at the same version "
"level. In fact, supporting different version levels is what enables "
"rolling upgrades of Fabric nodes."
msgstr ""

#: ../../source/capabilities_concept.md:9
msgid ""
"What is important is that networks and channels process things in the "
"same way, creating deterministic results for things like channel "
"configuration updates and chaincode invocations. Without deterministic "
"results, one peer on a channel might invalidate a transaction while "
"another peer may validate it."
msgstr ""

#: ../../source/capabilities_concept.md:11
msgid ""
"To that end, Fabric defines levels of what are called \"capabilities\". "
"These capabilities, which are defined in the configuration of each "
"channel, ensure determinism by defining a level at which behaviors "
"produce consistent results. As you'll see, these capabilities have "
"versions which are closely related to node binary versions. Capabilities "
"enable nodes running at different version levels to behave in a "
"compatible and consistent way given the channel configuration at a "
"specific block height. You will also see that capabilities exist in many "
"parts of the configuration tree, defined along the lines of "
"administration for particular tasks."
msgstr ""

#: ../../source/capabilities_concept.md:13
msgid ""
"As you'll see, sometimes it is necessary to update your channel to a new "
"capability level to enable a new feature."
msgstr ""

#: ../../source/capabilities_concept.md:15
msgid "Node versions and capability versions"
msgstr ""

#: ../../source/capabilities_concept.md:17
msgid ""
"If you're familiar with Hyperledger Fabric, you're aware that it follows "
"a typical versioning pattern: v1.1, v1.2.1, v2.0, etc. These versions "
"refer to releases and their related binary versions."
msgstr ""

#: ../../source/capabilities_concept.md:19
msgid ""
"Capabilities follow the same versioning convention. There are v1.1 "
"capabilities and v1.2 capabilities and 2.0 capabilities and so on. But "
"it's important to note a few distinctions."
msgstr ""

#: ../../source/capabilities_concept.md:27
msgid ""
"If users are unable to upgrade their binaries, then capabilities must be "
"left at their lower levels. Lower level binaries and capabilities will "
"still work together as they're meant to. However, keep in mind that it is"
" a best practice to always update to new binaries even if a user chooses "
"not to update their capabilities. Because capabilities themselves also "
"include bug-fixes, it is always recommended to update capabilities once "
"the network binaries support them."
msgstr ""

#: ../../source/capabilities_concept.md:29
msgid "Capability configuration groupings"
msgstr ""

#: ../../source/capabilities_concept.md:31
msgid ""
"As we discussed earlier, there is not a single capability level "
"encompassing an entire channel. Rather, there are three capabilities, "
"each representing an area of administration."
msgstr ""

#: ../../source/capabilities_concept.md:39
msgid ""
"The orderer and channel capabilities of a channel are inherited by "
"default from the ordering system channel, where modifying them are the "
"exclusive purview of ordering service admins. As a result, peer "
"organizations should inspect the genesis block of a channel prior to "
"joining their peers to that channel. Although the channel capability is "
"administered by the orderers in the orderer system channel (just as the "
"consortium membership is), it is typical and expected that the ordering "
"admins will coordinate with the consortium admins to ensure that the "
"channel capability is only upgraded when the consortium is ready for it."
msgstr ""

#: ../../source/capabilities_concept.md:41
msgid ""
"Because the ordering system channel does not define an application "
"capability, this capability must be specified in the channel profile when"
" creating the genesis block for the channel."
msgstr ""

#: ../../source/capabilities_concept.md:43
msgid ""
"Take caution when specifying or modifying an application capability. "
"Because the ordering service does not validate that the capability level "
"exists, it will allow a channel to be created (or modified) to contain, "
"for example, a v1.8 application capability even if no such capability "
"exists. Any peer attempting to read a configuration block with this "
"capability would, as we have shown, crash, and even if it was possible to"
" modify the channel once again to a valid capability level, it would not "
"matter, as no peer would be able to get past the block with the invalid "
"v1.8 capability."
msgstr ""

#: ../../source/capabilities_concept.md:45
msgid ""
"For a full look at the current valid orderer, application, and channel "
"capabilities check out a sample configtx.yaml file, which lists them in "
"the \"Capabilities\" section."
msgstr ""

#: ../../source/capabilities_concept.md:47
msgid ""
"For more specific information about capabilities and where they reside in"
" the channel configuration, check out defining capability requirements."
msgstr ""

