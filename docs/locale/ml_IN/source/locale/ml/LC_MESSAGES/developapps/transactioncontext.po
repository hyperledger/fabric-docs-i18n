# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, hyperledger
# This file is distributed under the same license as the
# hyperledger-fabricdocs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: hyperledger-fabricdocs master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-14 17:38+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../source/developapps/transactioncontext.md:1
msgid "Transaction context"
msgstr ""

#: ../../source/developapps/transactioncontext.md:3
msgid "Audience: Architects, application and smart contract developers"
msgstr ""

#: ../../source/developapps/transactioncontext.md:5
msgid ""
"A transaction context performs two functions. Firstly, it allows a "
"developer to define and maintain user variables across transaction "
"invocations within a smart contract. Secondly, it provides access to a "
"wide range of Fabric APIs that allow smart contract developers to perform"
" operations relating to detailed transaction processing. These range from"
" querying or updating the ledger, both the immutable blockchain and the "
"modifiable world state, to retrieving the transaction-submitting "
"application's digital identity."
msgstr ""

#: ../../source/developapps/transactioncontext.md:13
msgid ""
"A transaction context is created when a smart contract is deployed to a "
"channel and made available to every subsequent transaction invocation. A "
"transaction context helps smart contract developers write programs that "
"are powerful, efficient and easy to reason about."
msgstr ""

#: ../../source/developapps/transactioncontext.md:24
msgid "Scenario"
msgstr ""

#: ../../source/developapps/transactioncontext.md:26
msgid ""
"In the commercial paper sample, papercontract initially defines the name "
"of the list of commercial papers for which it's responsible. Each "
"transaction subsequently refers to this list; the issue transaction adds "
"new papers to it, the buy transaction changes its owner, and the redeem "
"transaction marks it as complete. This is a common pattern; when writing "
"a smart contract it's often helpful to initialize and recall particular "
"variables in sequential transactions."
msgstr ""

#: ../../source/developapps/transactioncontext.md:35
msgid ""
"transaction.scenario A smart contract transaction context allows smart "
"contracts to define and maintain user variables across transaction "
"invocations. Refer to the text for a detailed explanation."
msgstr ""

#: ../../source/developapps/transactioncontext.md:39
msgid "Programming"
msgstr ""

#: ../../source/developapps/transactioncontext.md:41
msgid ""
"When a smart contract is constructed, a developer can optionally override"
" the built-in Context class createContext method to create a custom "
"context:"
msgstr ""

#: ../../source/developapps/transactioncontext.md:50
msgid ""
"In our example, the CommercialPaperContext is specialized for "
"CommercialPaperContract. See how the custom context, addressed through "
"this, adds the specific variable PaperList to itself:"
msgstr ""

#: ../../source/developapps/transactioncontext.md:62
msgid ""
"When the createContext() method returns at point (1) in the diagram "
"above, a custom context ctx has been created which contains paperList as "
"one of its variables."
msgstr ""

#: ../../source/developapps/transactioncontext.md:66
msgid ""
"Subsequently, whenever a smart contract transaction such as issue, buy or"
" redeem is called, this context will be passed to it. See how at points "
"(2), (3) and (4) the same commercial paper context is passed into the "
"transaction method using the ctx variable."
msgstr ""

#: ../../source/developapps/transactioncontext.md:71
msgid "See how the context is then used at point (5):"
msgstr ""

#: ../../source/developapps/transactioncontext.md:78
msgid ""
"Notice how paperList created in CommercialPaperContext is available to "
"the issue transaction. See how paperList is similarly used by the redeem "
"and buy transactions; ctx makes the smart contracts efficient and easy to"
" reason about."
msgstr ""

#: ../../source/developapps/transactioncontext.md:83
msgid ""
"You can also see that there's another element in the context -- ctx.stub "
"-- which was not explictly added by CommercialPaperContext. That's "
"because stub and other variables are part of the built-in context. Let's "
"now examine the structure of this built-in context, these implicit "
"variables and how to use them."
msgstr ""

#: ../../source/developapps/transactioncontext.md:89
msgid "Structure"
msgstr ""

#: ../../source/developapps/transactioncontext.md:91
msgid ""
"As we've seen from the example, a transaction context can contain any "
"number of user variables such as paperList."
msgstr ""

#: ../../source/developapps/transactioncontext.md:94
msgid ""
"The transaction context also contains two built-in elements that provide "
"access to a wide range of Fabric functionality ranging from the client "
"application that submitted the transaction to ledger access."
msgstr ""

#: ../../source/developapps/transactioncontext.md:105
msgid ""
"We'll use the following diagram to show you what a smart contract can do "
"using the stub and clientIdentity using the APIs available to it:"
msgstr ""

#: ../../source/developapps/transactioncontext.md:108
msgid ""
"context.apis A smart contract can access a range of functionality in a "
"smart contract via the transaction context stub and clientIdentity. Refer"
" to the text for a detailed explanation."
msgstr ""

#: ../../source/developapps/transactioncontext.md:112
msgid "Stub"
msgstr ""

#: ../../source/developapps/transactioncontext.md:114
msgid "The APIs in the stub fall into the following categories:"
msgstr ""

#: ../../source/developapps/transactioncontext.md:250
msgid "ClientIdentity"
msgstr ""

#: ../../source/developapps/transactioncontext.md:252
msgid ""
"In most cases, the application submitting a transaction will be using an "
"X.509 certificate. In the example, an X.509 certificate (6) issued by CA1"
" (7) is being used by Isabella (8) in her application to sign the "
"proposal in transaction t6 (5)."
msgstr ""

#: ../../source/developapps/transactioncontext.md:257
msgid ""
"ClientIdentity takes the information returned by getCreator() and puts a "
"set of X.509 utility APIs on top of it to make it easier to use for this "
"common use case."
msgstr ""

