# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, hyperledger
# This file is distributed under the same license as the
# hyperledger-fabricdocs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: hyperledger-fabricdocs master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-14 17:38+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../source/developapps/chaincodenamespace.md:1
msgid "Chaincode namespace"
msgstr ""

#: ../../source/developapps/chaincodenamespace.md:3
msgid ""
"Audience: Architects, application and smart contract developers, "
"administrators"
msgstr ""

#: ../../source/developapps/chaincodenamespace.md:6
msgid ""
"A chaincode namespace allows it to keep its world state separate from "
"other chaincodes. Specifically, smart contracts in the same chaincode "
"share direct access to the same world state, whereas smart contracts in "
"different chaincodes cannot directly access each other's world state. If "
"a smart contract needs to access another chaincode world state, it can do"
" this by performing a chaincode-to-chaincode invocation. Finally, a "
"blockchain can contain transactions which relate to different world "
"states."
msgstr ""

#: ../../source/developapps/chaincodenamespace.md:14
msgid "In this topic, we're going to cover:"
msgstr ""

#: ../../source/developapps/chaincodenamespace.md:23
msgid "Motivation"
msgstr ""

#: ../../source/developapps/chaincodenamespace.md:25
msgid ""
"A namespace is a common concept. We understand that Park Street, New York"
" and Park Street, Seattle are different streets even though they have the"
" same name. The city forms a namespace for Park Street, simultaneously "
"providing freedom and clarity."
msgstr ""

#: ../../source/developapps/chaincodenamespace.md:30
msgid ""
"It's the same in a computer system. Namespaces allow different users to "
"program and operate different parts of a shared system, without getting "
"in each other's way. Many programming languages have namespaces so that "
"programs can freely assign unique identifiers, such as variable names, "
"without worrying about other programs doing the same. We'll see that "
"Hyperledger Fabric uses namespaces to help smart contracts keep their "
"ledger world state separate from other smart contracts."
msgstr ""

#: ../../source/developapps/chaincodenamespace.md:38
msgid "Scenario"
msgstr ""

#: ../../source/developapps/chaincodenamespace.md:40
msgid ""
"Let's examine how the ledger world state organizes facts about business "
"objects that are important to the organizations in a channel using the "
"diagram below. Whether these objects are commercial papers, bonds, or "
"vehicle registrations, and wherever they are in their lifecycle, they are"
" maintained as states within the ledger world state database. A smart "
"contract manages these business objects by interacting with the ledger "
"(world state and blockchain), and in most cases this will involve it "
"querying or updating the ledger world state."
msgstr ""

#: ../../source/developapps/chaincodenamespace.md:48
msgid ""
"It's vitally important to understand that the ledger world state is "
"partitioned according to the chaincode of the smart contract that "
"accesses it, and this partitioning, or namespacing is an important design"
" consideration for architects, administrators and programmers."
msgstr ""

#: ../../source/developapps/chaincodenamespace.md:53
msgid ""
"chaincodens.scenario The ledger world state is separated into different "
"namespaces according to the chaincode that accesses it. Within a given "
"channel, smart contracts in the same chaincode share the same world "
"state, and smart contracts in different chaincodes cannot directly access"
" each other's world state. Likewise, a blockchain can contain "
"transactions that relate to different chaincode world states."
msgstr ""

#: ../../source/developapps/chaincodenamespace.md:60
msgid ""
"In our example, we can see four smart contracts defined in two different "
"chaincodes, each of which is in their own chaincode container. The "
"euroPaper and yenPaper smart contracts are defined in the papers "
"chaincode. The situation is similar for the euroBond and yenBond smart "
"contracts  -- they are defined in the bonds chaincode. This design helps "
"application programmers understand whether they are working with "
"commercial papers or bonds priced in Euros or Yen, and because the rules "
"for each financial product don't really change for different currencies, "
"it makes sense to manage their deployment in the same chaincode."
msgstr ""

#: ../../source/developapps/chaincodenamespace.md:70
msgid ""
"The diagram also shows the consequences of this deployment choice. The "
"database management system (DBMS) creates different world state databases"
" for the papers and bonds chaincodes and the smart contracts contained "
"within them. World state A and world state B are each held within "
"distinct databases; the data are isolated from each other such that a "
"single world state query (for example) cannot access both world states. "
"The world state is said to be namespaced according to its chaincode."
msgstr ""

#: ../../source/developapps/chaincodenamespace.md:78
msgid ""
"See how world state A contains two lists of commercial papers "
"paperListEuro and paperListYen. The states PAP11 and PAP21 are instances "
"of each paper managed by the euroPaper and yenPaper smart contracts "
"respectively. Because they share the same chaincode namespace, their keys"
" (PAPxyz) must be unique within the namespace of the papers chaincode, a "
"little like a street name is unique within a town. Notice how it would be"
" possible to write a smart contract in the papers chaincode that "
"performed an aggregate calculation over all the commercial papers -- "
"whether priced in Euros or Yen -- because they share the same namespace. "
"The situation is similar for bonds -- they are held within world state B "
"which maps to a separate bonds database, and their keys must be unique."
msgstr ""

#: ../../source/developapps/chaincodenamespace.md:90
msgid ""
"Just as importantly, namespaces mean that euroPaper and yenPaper cannot "
"directly access world state B, and that euroBond and yenBond cannot "
"directly access world state A. This isolation is helpful, as commercial "
"papers and bonds are very distinct financial instruments; they have "
"different attributes and are subject to different rules. It also means "
"that papers and bonds could have the same keys, because they are in "
"different namespaces. This is helpful; it provides a significant degree "
"of freedom for naming. Use this freedom to name different business "
"objects meaningfully."
msgstr ""

#: ../../source/developapps/chaincodenamespace.md:99
msgid ""
"Most importantly, we can see that a blockchain is associated with the "
"peer operating in a particular channel, and that it contains transactions"
" that affect both world state A and world state B. That's because the "
"blockchain is the most fundamental data structure contained in a peer. "
"The set of world states can always be recreated from this blockchain, "
"because they are the cumulative results of the blockchain's transactions."
" A world state helps simplify smart contracts and improve their "
"efficiency, as they usually only require the current value of a state. "
"Keeping world states separate via namespaces helps smart contracts "
"isolate their logic from other smart contracts, rather than having to "
"worry about transactions that correspond to different world states. For "
"example, a bonds contract does not need to worry about paper "
"transactions, because it cannot see their resultant world state."
msgstr ""

#: ../../source/developapps/chaincodenamespace.md:112
msgid ""
"It's also worth noticing that the peer, chaincode containers and DBMS all"
" are logically different processes. The peer and all its chaincode "
"containers are always in physically separate operating system processes, "
"but the DBMS can be configured to be embedded or separate, depending on "
"its type. For LevelDB, the DBMS is wholly contained within the peer, but "
"for CouchDB, it is a separate operating system process."
msgstr ""

#: ../../source/developapps/chaincodenamespace.md:120
msgid ""
"It's important to remember that namespace choices in this example are the"
" result of a business requirement to share commercial papers in different"
" currencies but isolate them separate from bonds. Think about how the "
"namespace structure would be modified to meet a business requirement to "
"keep every financial asset class separate, or share all commercial papers"
" and bonds?"
msgstr ""

#: ../../source/developapps/chaincodenamespace.md:126
msgid "Channels"
msgstr ""

#: ../../source/developapps/chaincodenamespace.md:128
msgid ""
"If a peer is joined to multiple channels, then a new blockchain is "
"created and managed for each channel. Moreover, every time a chaincode is"
" deployed to a new channel, a new world state database is created for it."
" It means that the channel also forms a kind of namespace alongside that "
"of the chaincode for the world state."
msgstr ""

#: ../../source/developapps/chaincodenamespace.md:134
msgid ""
"However, the same peer and chaincode container processes can be "
"simultaneously joined to multiple channels -- unlike blockchains, and "
"world state databases, these processes do not increase with the number of"
" channels joined."
msgstr ""

#: ../../source/developapps/chaincodenamespace.md:138
msgid ""
"For example, if you deployed the papers and bonds chaincode to a new "
"channel, there would a totally separate blockchain created, and two new "
"world state databases created. However, the peer and chaincode containers"
" would not increase; each would just be connected to multiple channels."
msgstr ""

#: ../../source/developapps/chaincodenamespace.md:143
msgid "Usage"
msgstr ""

#: ../../source/developapps/chaincodenamespace.md:145
msgid ""
"Let's use our commercial paper example to show how an application uses a "
"smart contract with namespaces. It's worth noting that an application "
"communicates with the peer, and the peer routes the request to the "
"appropriate chaincode container which then accesses the DBMS. This "
"routing is done by the peer core component shown in the diagram."
msgstr ""

#: ../../source/developapps/chaincodenamespace.md:151
msgid ""
"Here's the code for an application that uses both commercial papers and "
"bonds, priced in Euros and Yen. The code is fairly self-explanatory:"
msgstr ""

#: ../../source/developapps/chaincodenamespace.md:168
msgid "See how the application:"
msgstr ""

#: ../../source/developapps/chaincodenamespace.md:202
msgid "See how smart contracts interact with the world state:"
msgstr ""

#: ../../source/developapps/chaincodenamespace.md:215
msgid "See how the blockchain captures transactions for all world states:"
msgstr ""

#: ../../source/developapps/chaincodenamespace.md:228
msgid "Cross chaincode access"
msgstr ""

#: ../../source/developapps/chaincodenamespace.md:230
msgid ""
"As we saw in our example scenario, euroPaper and yenPaper cannot directly"
" access world state B.  That's because we have designed our chaincodes "
"and smart contracts so that these chaincodes and world states are kept "
"separately from each other.  However, let's imagine that euroPaper needs "
"to access world state B."
msgstr ""

#: ../../source/developapps/chaincodenamespace.md:236
msgid ""
"Why might this happen? Imagine that when a commercial paper was issued, "
"the smart contract wanted to price the paper according to the current "
"return on bonds with a similar maturity date.  In this case it will be "
"necessary for the euroPaper contract to be able to query the price of "
"bonds in world state B. Look at the following diagram to see how we might"
" structure this interaction."
msgstr ""

#: ../../source/developapps/chaincodenamespace.md:242
msgid ""
"chaincodens.scenario How chaincodes and smart contracts can indirectly "
"access another world state -- via its chaincode."
msgstr ""

#: ../../source/developapps/chaincodenamespace.md:245
msgid "Notice how:"
msgstr ""

#: ../../source/developapps/chaincodenamespace.md:263
msgid "Control is passed between chaincode using the invokeChaincode() API."
msgstr ""

#: ../../source/developapps/chaincodenamespace.md:266
msgid "This API passes control from one chaincode to another chaincode."
msgstr ""

#: ../../source/developapps/chaincodenamespace.md:268
msgid ""
"Although we have only discussed query transactions in the example, it is "
"possible to invoke a smart contract which will update the called "
"chaincode's world state.  See the considerations below."
msgstr ""

#: ../../source/developapps/chaincodenamespace.md:272
msgid "Considerations"
msgstr ""

