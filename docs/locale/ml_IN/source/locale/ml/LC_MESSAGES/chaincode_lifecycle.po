# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, hyperledger
# This file is distributed under the same license as the
# hyperledger-fabricdocs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: hyperledger-fabricdocs master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-14 17:38+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../source/chaincode_lifecycle.md:1
msgid "Fabric chaincode lifecycle"
msgstr ""

#: ../../source/chaincode_lifecycle.md:3
msgid "What is Chaincode?"
msgstr ""

#: ../../source/chaincode_lifecycle.md:5
msgid ""
"Chaincode is a program, written in Go, Node.js, or Java that implements a"
" prescribed interface. Chaincode runs in a secured Docker container "
"isolated from the endorsing peer process. Chaincode initializes and "
"manages ledger state through transactions submitted by applications."
msgstr ""

#: ../../source/chaincode_lifecycle.md:11
msgid ""
"A chaincode typically handles business logic agreed to by members of the "
"network, so it may be considered as a \"smart contract\". Ledger updates "
"created by a chaincode are scoped exclusively to that chaincode and can't"
" be accessed directly by another chaincode. However, within the same "
"network, given the appropriate permission a chaincode may invoke another "
"chaincode to access its state."
msgstr ""

#: ../../source/chaincode_lifecycle.md:18
msgid ""
"In this concept topic, we will explore chaincode through the eyes of a "
"blockchain network operator rather than an application developer. "
"Chaincode operators can use this topic as a guide to how to use the "
"Fabric chainode lifecycle to deploy and manage chaincode on their "
"network."
msgstr ""

#: ../../source/chaincode_lifecycle.md:23
msgid "Deploying a chaincode"
msgstr ""

#: ../../source/chaincode_lifecycle.md:25
msgid ""
"The Fabric chaincode lifecycle is a process that allows multiple "
"organizations to agree on how a chaincode will be operated before it can "
"be used on a channel. A network operator would use the Fabric lifecycle "
"to perform the following tasks:"
msgstr ""

#: ../../source/chaincode_lifecycle.md:34
msgid ""
"You can use the Fabric chaincode lifecycle by creating a new channel and "
"setting the channel capabilities to V2_0. You will not be able to use the"
" old lifecycle to install, instantiate, or update a chaincode on channels"
" with V2_0 capabilities enabled. However, you can still invoke chaincode "
"installed using the previous lifecycle model after you enable V2_0 "
"capabilities. If you are upgrading from a v1.4.x network and need to edit"
" your channel configurations to enable the new lifecycle, check out "
"Enabling the new chaincode lifecycle."
msgstr ""

#: ../../source/chaincode_lifecycle.md:42
msgid "Install and define a chaincode"
msgstr ""

#: ../../source/chaincode_lifecycle.md:44
msgid ""
"Fabric chaincode lifecycle requires that organizations agree to the "
"parameters that define a chaincode, such as name, version, and the "
"chaincode endorsement policy. Channel members come to agreement using the"
" following four steps. Not every organization on a channel needs to "
"complete each step."
msgstr ""

#: ../../source/chaincode_lifecycle.md:65
msgid ""
"This topic provides a detailed overview of the operations of the Fabric "
"chaincode lifecycle rather than the specific commands. To learn more "
"about how to use the Fabric lifecycle using the Peer CLI, see the "
"Deploying a smart contract to a channel tutorial or the peer lifecycle "
"command reference."
msgstr ""

#: ../../source/chaincode_lifecycle.md:71
msgid "Step One: Packaging the smart contract"
msgstr ""

#: ../../source/chaincode_lifecycle.md:73
msgid ""
"Chaincode needs to be packaged in a tar file before it can be installed "
"on your peers. You can package a chaincode using the Fabric peer "
"binaries, the Node Fabric SDK, or a third party tool such as GNU tar. "
"When you create a chaincode package, you need to provide a chaincode "
"package label to create a succinct and human readable description of the "
"package."
msgstr ""

#: ../../source/chaincode_lifecycle.md:79
msgid ""
"If you use a third party tool to package the chaincode, the resulting "
"file needs to be in the format below. The Fabric peer binaries and the "
"Fabric SDKs will automatically create a file in this format."
msgstr ""

#: ../../source/chaincode_lifecycle.md:93
msgid "Packaging the chaincode"
msgstr ""

#: ../../source/chaincode_lifecycle.md:95
msgid ""
"The chaincode is packaged separately by Org1 and Org2. Both organizations"
" use MYCC_1 as their package label in order to identify the package using"
" the name and version. It is not necessary for organizations to use the "
"same package label."
msgstr ""

#: ../../source/chaincode_lifecycle.md:100
msgid "Step Two: Install the chaincode on your peers"
msgstr ""

#: ../../source/chaincode_lifecycle.md:102
msgid ""
"You need to install the chaincode package on every peer that will execute"
" and endorse transactions. Whether using the CLI or an SDK, you need to "
"complete this step using your Peer Administrator. Your peer will build "
"the chaincode after the chaincode is installed, and return a build error "
"if there is a problem with your chaincode. It is recommended that "
"organizations only package a chaincode once, and then install the same "
"package on every peer that belongs to their org. If a channel wants to "
"ensure that each organization is running the same chaincode, one "
"organization can package a chaincode and send it to other channel members"
" out of band."
msgstr ""

#: ../../source/chaincode_lifecycle.md:112
msgid ""
"A successful install command will return a chaincode package identifier, "
"which is the package label combined with a hash of the package. This "
"package identifier is used to associate a chaincode package installed on "
"your peers with a chaincode definition approved by your organization. "
"Save the identifier for next step. You can also find the package "
"identifier by querying the packages installed on your peer using the Peer"
" CLI."
msgstr ""

#: ../../source/chaincode_lifecycle.md:119
msgid "Installing the chaincode"
msgstr ""

#: ../../source/chaincode_lifecycle.md:121
msgid ""
"A peer administrator from Org1 and Org2 installs the chaincode package "
"MYCC_1 on the peers joined to the channel. Installing the chaincode "
"package builds the chaincode and creates a package identifier of "
"MYCC_1:hash."
msgstr ""

#: ../../source/chaincode_lifecycle.md:125
msgid "Step Three: Approve a chaincode definition for your organization"
msgstr ""

#: ../../source/chaincode_lifecycle.md:127
msgid ""
"The chaincode is governed by a chaincode definition. When channel members"
" approve a chaincode definition, the approval acts as a vote by an "
"organization on the chaincode parameters it accepts. These approved "
"organization definitions allow channel members to agree on a chaincode "
"before it can be used on a channel. The chaincode definition includes the"
" following parameters, which need to be consistent across organizations:"
msgstr ""

#: ../../source/chaincode_lifecycle.md:181
msgid ""
"The chaincode definition also includes the Package Identifier. This is a "
"required parameter for each organization that wants to use the chaincode."
" The package ID does not need to be the same for all organizations. An "
"organization can approve a chaincode definition without installing a "
"chaincode package or including the identifier in the definition."
msgstr ""

#: ../../source/chaincode_lifecycle.md:187
msgid ""
"Each channel member that wants to use the chaincode needs to approve a "
"chaincode definition for their organization. This approval needs to be "
"submitted to the ordering service, after which it is distributed to all "
"peers. This approval needs to be submitted by your Organization "
"Administrator. After the approval transaction has been successfully "
"submitted, the approved definition is stored in a collection that is "
"available to all the peers of your organization. As a result you only "
"need to approve a chaincode for your organization once, even if you have "
"multiple peers."
msgstr ""

#: ../../source/chaincode_lifecycle.md:196
msgid "Approving the chaincode definition"
msgstr ""

#: ../../source/chaincode_lifecycle.md:198
msgid ""
"An organization administrator from Org1 and Org2 approve the chaincode "
"definition of MYCC for their organization. The chaincode definition "
"includes the chaincode name, version, and the endorsement policy, among "
"other fields. Since both organizations will use the chaincode to endorse "
"transactions, the approved definitions for both organizations need to "
"include the packageID."
msgstr ""

#: ../../source/chaincode_lifecycle.md:204
msgid "Step Four: Commit the chaincode definition to the channel"
msgstr ""

#: ../../source/chaincode_lifecycle.md:206
msgid ""
"Once a sufficient number of channel members have approved a chaincode "
"definition, one organization can commit the definition to the channel. "
"You can use the checkcommitreadiness command to check whether committing "
"the chaincode definition should be successful based on which channel "
"members have approved a definition before committing it to the channel "
"using the peer CLI. The commit transaction proposal is first sent to the "
"peers of channel members, who query the chaincode definition approved for"
" their organizations and endorse the definition if their organization has"
" approved it. The transaction is then submitted to the ordering service, "
"which then commits the chaincode definition to the channel. The commit "
"definition transaction needs to be submitted as the Organization "
"Administrator."
msgstr ""

#: ../../source/chaincode_lifecycle.md:218
msgid ""
"The number of organizations that need to approve a definition before it "
"can be successfully committed to the channel is governed by the "
"Channel/Application/LifecycleEndorsement policy. By default, this policy "
"requires that a majority of organizations in the channel endorse the "
"transaction. The LifecycleEndorsement policy is separate from the "
"chaincode endorsement policy. For example, even if a chaincode "
"endorsement policy only requires signatures from one or two "
"organizations, a majority of channel members still need to approve the "
"chaincode definition according to the default policy. When committing a "
"channel definition, you need to target enough peer organizations in the "
"channel to satisfy your LifecycleEndorsement policy. You can learn more "
"about the Fabric chaincode lifecycle policies in the Policies concept "
"topic."
msgstr ""

#: ../../source/chaincode_lifecycle.md:230
msgid ""
"You can also set the Channel/Application/LifecycleEndorsement policy to "
"be a signature policy and explicitly specify the set of organizations on "
"the channel that can approve a chaincode definition. This allows you to "
"create a channel where a select number of organizations act as chaincode "
"administrators and govern the business logic used by the channel. You can"
" also use a signature policy if your channel has a large number Idemix "
"organizations, which cannot approve chaincode definitions or endorse "
"chaincode and may prevent the channel from reaching a majority as a "
"result."
msgstr ""

#: ../../source/chaincode_lifecycle.md:239
msgid "Committing the chaincode definition to the channel"
msgstr ""

#: ../../source/chaincode_lifecycle.md:241
msgid ""
"One organization administrator from Org1 or Org2 commits the chaincode "
"definition to the channel. The definition on the channel does not include"
" the packageID."
msgstr ""

#: ../../source/chaincode_lifecycle.md:244
msgid ""
"An organization can approve a chaincode definition without installing the"
" chaincode package. If an organization does not need to use the "
"chaincode, they can approve a chaincode definition without a package "
"identifier to ensure that the Lifecycle Endorsement policy is satisfied."
msgstr ""

#: ../../source/chaincode_lifecycle.md:249
msgid ""
"After the chaincode definition has been committed to the channel, the "
"chaincode container will launch on all of the peers where the chaincode "
"has been installed, allowing channel members to start using the "
"chaincode. It may take a few minutes for the chaincode container to "
"start. You can use the chaincode definition to require the invocation of "
"the Init function to initialize the chaincode. If the invocation of the "
"Init function is requested, the first invoke of the chaincode must be a "
"call to the Init function. The invoke of the Init function is subject to "
"the chaincode endorsement policy."
msgstr ""

#: ../../source/chaincode_lifecycle.md:258
msgid "Starting the chaincode on the channel"
msgstr ""

#: ../../source/chaincode_lifecycle.md:260
msgid ""
"Once MYCC is defined on the channel, Org1 and Org2 can start using the "
"chaincode. The first invoke of the chaincode on each peer starts the "
"chaincode container on that peer."
msgstr ""

#: ../../source/chaincode_lifecycle.md:263
msgid "Upgrade a chaincode"
msgstr ""

#: ../../source/chaincode_lifecycle.md:265
msgid ""
"You can upgrade a chaincode using the same Fabric lifecycle process as "
"you used to install and start the chainocode. You can upgrade the "
"chaincode binaries, or only update the chaincode policies. Follow these "
"steps to upgrade a chaincode:"
msgstr ""

#: ../../source/chaincode_lifecycle.md:307
msgid ""
"After you commit the chaincode definition, a new chaincode container will"
" launch with the code from the upgraded chaincode binaries. If you "
"requested the execution of the Init function in the chaincode definition,"
" you need to initialize the upgraded chaincode by invoking the Init "
"function again after the new definition is successfully committed. If you"
" updated the chaincode definition without changing the chaincode version,"
" the chaincode container will remain the same and you do not need to "
"invoke Init function."
msgstr ""

#: ../../source/chaincode_lifecycle.md:315
msgid "Upgrade the chaincode"
msgstr ""

#: ../../source/chaincode_lifecycle.md:317
msgid ""
"Once the new definition has been committed to the channel, each peer will"
" automatically start the new chaincode container."
msgstr ""

#: ../../source/chaincode_lifecycle.md:319
msgid ""
"The Fabric chaincode lifecycle uses the sequence in the chaincode "
"definition to keep track of upgrades. All channel members need to "
"increment the sequence number by one and approve a new definition to "
"upgrade the chaincode. The version parameter is used to track the "
"chaincode binaries, and needs to be changed only when you upgrade the "
"chaincode binaries."
msgstr ""

#: ../../source/chaincode_lifecycle.md:325
msgid "Deployment scenarios"
msgstr ""

#: ../../source/chaincode_lifecycle.md:327
msgid ""
"The following examples illustrate how you can use the Fabric chaincode "
"lifecycle to manage channels and chaincode."
msgstr ""

#: ../../source/chaincode_lifecycle.md:330
msgid "Joining a channel"
msgstr ""

#: ../../source/chaincode_lifecycle.md:332
msgid ""
"A new organization can join a channel with a chaincode already defined, "
"and start using the chaincode after installing the chaincode package and "
"approving the chaincode definition that has already been committed to the"
" channel."
msgstr ""

#: ../../source/chaincode_lifecycle.md:336
msgid "Approve a chaincode definition"
msgstr ""

#: ../../source/chaincode_lifecycle.md:338
msgid ""
"Org3 joins the channel and approves the same chaincode definition that "
"was previously committed to the channel by Org1 and Org2."
msgstr ""

#: ../../source/chaincode_lifecycle.md:341
msgid ""
"After approving the chaincode definition, the new organization can start "
"using the chaincode after the package has been installed on their peers. "
"The definition does not need to be committed again. If the endorsement "
"policy is set the default policy that requires endorsements from a "
"majority of channel members, then the endorsement policy will be updated "
"automatically to include the new organization."
msgstr ""

#: ../../source/chaincode_lifecycle.md:347
msgid "Start the chaincode"
msgstr ""

#: ../../source/chaincode_lifecycle.md:349
msgid ""
"The chaincode container will start after the first invoke of the "
"chaincode on the Org3 peer."
msgstr ""

#: ../../source/chaincode_lifecycle.md:352
msgid "Updating an endorsement policy"
msgstr ""

#: ../../source/chaincode_lifecycle.md:354
msgid ""
"You can use the chaincode definition to update an endorsement policy "
"without having to repackage or re-install the chaincode. Channel members "
"can approve a chaincode definition with a new endorsement policy and "
"commit it to the channel."
msgstr ""

#: ../../source/chaincode_lifecycle.md:359
msgid "Approve new chaincode definition"
msgstr ""

#: ../../source/chaincode_lifecycle.md:361
msgid ""
"Org1, Org2, and Org3 approve a new endorsement policy requiring that all "
"three organizations endorse a transaction. They increment the definition "
"sequence from one to two, but do not need to update the chaincode "
"version."
msgstr ""

#: ../../source/chaincode_lifecycle.md:365
msgid ""
"The new endorsement policy will take effect after the new definition is "
"committed to the channel. Channel members do not have to restart the "
"chaincode container by invoking the chaincode or executing the Init "
"function in order to update the endorsement policy."
msgstr ""

#: ../../source/chaincode_lifecycle.md:370
msgid "Commit new chaincode definition"
msgstr ""

#: ../../source/chaincode_lifecycle.md:372
msgid ""
"One organization commits the new chaincode definition to the channel to "
"update the endorsement policy."
msgstr ""

#: ../../source/chaincode_lifecycle.md:375
msgid "Approving a definition without installing the chaincode"
msgstr ""

#: ../../source/chaincode_lifecycle.md:377
msgid ""
"You can approve a chaincode definition without installing the chaincode "
"package. This allows you to endorse a chaincode definition before it is "
"committed to the channel, even if you do not want to use the chaincode to"
" endorse transactions or query the ledger. You need to approve the same "
"parameters as other members of the channel, but not need to include the "
"packageID as part of the chaincode definition."
msgstr ""

#: ../../source/chaincode_lifecycle.md:384
msgid "Org3 does not install the chaincode"
msgstr ""

#: ../../source/chaincode_lifecycle.md:386
msgid ""
"Org3 does not install the chaincode package. As a result, they do not "
"need to provide a packageID as part of chaincode definition. However, "
"Org3 can still endorse the definition of MYCC that has been committed to "
"the channel."
msgstr ""

#: ../../source/chaincode_lifecycle.md:390
msgid "One organization disagrees on the chaincode definition"
msgstr ""

#: ../../source/chaincode_lifecycle.md:392
msgid ""
"An organization that does not approve a chaincode definition that has "
"been committed to the channel cannot use the chaincode. Organizations "
"that have either not approved a chaincode definition, or approved a "
"different chaincode definition will not be able to execute the chaincode "
"on their peers."
msgstr ""

#: ../../source/chaincode_lifecycle.md:397
msgid "Org3 disagrees on the chaincode"
msgstr ""

#: ../../source/chaincode_lifecycle.md:399
msgid ""
"Org3 approves a chaincode definition with a different endorsement policy "
"than Org1 and Org2. As a result, Org3 cannot use the MYCC chaincode on "
"the channel. However, Org1 or Org2 can still get enough endorsements to "
"commit the definition to the channel and use the chaincode. Transactions "
"from the chaincode will still be added to the ledger and stored on the "
"Org3 peer. However, the Org3 will not be able to endorse transactions."
msgstr ""

#: ../../source/chaincode_lifecycle.md:406
msgid ""
"An organization can approve a new chaincode definition with any sequence "
"number or version. This allows you to approve the definition that has "
"been committed to the channel and start using the chaincode. You can also"
" approve a new chaincode definition in order to correct any mistakes made"
" in the process of approving or packaging a chaincode."
msgstr ""

#: ../../source/chaincode_lifecycle.md:412
msgid "The channel does not agree on a chaincode definition"
msgstr ""

#: ../../source/chaincode_lifecycle.md:414
msgid ""
"If the organizations on a channel do not agree on a chaincode definition,"
" the definition cannot be committed to the channel. None of the channel "
"members will be able to use the chaincode."
msgstr ""

#: ../../source/chaincode_lifecycle.md:418
msgid "Majority disagree on the chaincode"
msgstr ""

#: ../../source/chaincode_lifecycle.md:420
msgid ""
"Org1, Org2, and Org3 all approve different chaincode definitions. As a "
"result, no member of the channel can get enough endorsements to commit a "
"chaincode definition to the channel. No channel member will be able to "
"use the chaincode."
msgstr ""

#: ../../source/chaincode_lifecycle.md:424
msgid "Organizations install different chaincode packages"
msgstr ""

#: ../../source/chaincode_lifecycle.md:426
msgid ""
"Each organization can use a different packageID when they approve a "
"chaincode definition. This allows channel members to install different "
"chaincode binaries that use the same endorsement policy and read and "
"write to data in the same chaincode namespace."
msgstr ""

#: ../../source/chaincode_lifecycle.md:431
msgid ""
"Organizations can use this capability to install smart contracts that "
"contain business logic that is specific to their organization. Each "
"organization's smart contract could contain additional validation that "
"the organization requires before their peers endorse a transaction. Each "
"organization can also write code that helps integrate the smart contract "
"with data from their existing systems."
msgstr ""

#: ../../source/chaincode_lifecycle.md:438
msgid "Using different chaincode binaries"
msgstr ""

#: ../../source/chaincode_lifecycle.md:440
msgid ""
"Org1 and Org2 each install versions of the MYCC chaincode containing "
"business logic that is specific to their organization."
msgstr ""

#: ../../source/chaincode_lifecycle.md:443
msgid "Creating multiple chaincodes using one package"
msgstr ""

#: ../../source/chaincode_lifecycle.md:445
msgid ""
"You can use one chaincode package to create multiple chaincode instances "
"on a channel by approving and committing multiple chaincode definitions. "
"Each definition needs to specify a different chaincode name. This allows "
"you to run multiple instances of a smart contract on a channel, but have "
"the contract be subject to different endorsement policies."
msgstr ""

#: ../../source/chaincode_lifecycle.md:451
msgid "Starting multiple chaincodes"
msgstr ""

#: ../../source/chaincode_lifecycle.md:453
msgid ""
"Org1 and Org2 use the MYCC_1 chaincode package to approve and commit two "
"different chaincode definitions. As a result, both peers have two "
"chaincode containers running on their peers. MYCC1 has an endorsement "
"policy of 1 out of 2, while MYCC2 has an endorsement policy of 2 out of "
"2."
msgstr ""

#: ../../source/chaincode_lifecycle.md:458
msgid "Migrate to the new Fabric lifecycle"
msgstr ""

#: ../../source/chaincode_lifecycle.md:460
msgid ""
"For information about migrating to the new lifecycle, check out "
"Considerations for getting to v2.0."
msgstr ""

#: ../../source/chaincode_lifecycle.md:462
msgid ""
"If you need to update your channel configurations to enable the new "
"lifecycle, check out Enabling the new chaincode lifecycle."
msgstr ""

#: ../../source/chaincode_lifecycle.md:464
msgid "More information"
msgstr ""

#: ../../source/chaincode_lifecycle.md:466
msgid ""
"You can watch video below to learn more about the motivation of the new "
"Fabric chaincode lifecycle and how it is implemented."
msgstr ""

