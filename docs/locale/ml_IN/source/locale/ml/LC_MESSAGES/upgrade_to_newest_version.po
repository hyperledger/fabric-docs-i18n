# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, hyperledger
# This file is distributed under the same license as the
# hyperledger-fabricdocs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: hyperledger-fabricdocs master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-14 17:38+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../source/upgrade_to_newest_version.md:1
msgid "Considerations for getting to v2.x"
msgstr ""

#: ../../source/upgrade_to_newest_version.md:3
msgid ""
"In this topic we'll cover recommendations for upgrading to the newest "
"release from the previous release as well as from the most recent long "
"term support (LTS) release."
msgstr ""

#: ../../source/upgrade_to_newest_version.md:5
msgid "Upgrading from 2.0 to 2.1"
msgstr ""

#: ../../source/upgrade_to_newest_version.md:7
msgid ""
"The 2.1 release of Fabric is a stabilization release, featuring bug fixes"
" and other forms of code hardening. As such there are no particular "
"considerations needed for getting from 2.0 to 2.1, and no new capability "
"levels to update your channels to."
msgstr ""

#: ../../source/upgrade_to_newest_version.md:9
msgid "Upgrading to 2.1 from the 1.4.x long term support release"
msgstr ""

#: ../../source/upgrade_to_newest_version.md:11
msgid ""
"Before attempting to upgrade from v1.4.x to v2.x, make sure to consider "
"the following:"
msgstr ""

#: ../../source/upgrade_to_newest_version.md:13
msgid "Chaincode lifecycle"
msgstr ""

#: ../../source/upgrade_to_newest_version.md:15
msgid ""
"The new chaincode lifecycle that debuted in v2.0 allows multiple "
"organizations to agree on how a chaincode will be operated before it can "
"be used on a channel. For more information about the new chaincode "
"lifecycle, check out Fabric chaincode lifecycle concept topic."
msgstr ""

#: ../../source/upgrade_to_newest_version.md:17
msgid ""
"It is a best practice to upgrade all of the peers on a channel before "
"enabling the Channel and Application capabilities that enable the new "
"chaincode lifecycle (the Channel capability is not strictly required, but"
" it makes sense to update it at this time). Note that any peers that are "
"not at least at v2.0 will crash after enabling either capability, while "
"any ordering nodes that are not at v2.0 will crash after the Channel "
"capability has been enabled. This crashing behavior is intentional, as "
"the peer or orderer cannot safely participate in the channel if it does "
"not support the required capabilities."
msgstr ""

#: ../../source/upgrade_to_newest_version.md:19
msgid ""
"After the Application capability has been updated to V2_0 on a channel, "
"you must use the v2.x lifecycle procedures to package, install, approve, "
"and commit new chaincodes on the channel. As a result, make sure to be "
"prepared for the new lifecycle before updating the capability."
msgstr ""

#: ../../source/upgrade_to_newest_version.md:21
msgid ""
"The new lifecycle defaults to using the endorsement policy configured in "
"the channel config (e.g., a MAJORITY of orgs). Therefore this endorsement"
" policy should be added to the channel configuration when enabling "
"capabilities on the channel."
msgstr ""

#: ../../source/upgrade_to_newest_version.md:23
msgid ""
"For information about how to edit the relevant channel configurations to "
"enable the new lifecycle by adding an endorsement policy for each "
"organization, check out Enabling the new chaincode lifecycle."
msgstr ""

#: ../../source/upgrade_to_newest_version.md:25
msgid "Chaincode shim changes (Go chaincode only)"
msgstr ""

#: ../../source/upgrade_to_newest_version.md:27
msgid ""
"The recommended approach is to vendor the shim in your v1.4 Go chaincode "
"before making upgrades to the peers and channels. If you do this, you do "
"not need to make any additional changes to your chaincode."
msgstr ""

#: ../../source/upgrade_to_newest_version.md:29
msgid ""
"If you did not vendor the shim in your v1.4 chaincode, the old v1.4 "
"chaincode images will still technically work after upgrade, but you are "
"in a risky state. If the chaincode image gets deleted from your "
"environment for whatever reason, the next invoke on v2.x peer will try to"
" rebuild the chaincode image and you'll get an error that the shim cannot"
" be found."
msgstr ""

#: ../../source/upgrade_to_newest_version.md:31
msgid "At this point, you have two options:"
msgstr ""

#: ../../source/upgrade_to_newest_version.md:37
msgid "Chaincode logger (Go chaincode only)"
msgstr ""

#: ../../source/upgrade_to_newest_version.md:39
msgid ""
"Support for user chaincodes to utilize the chaincode shim's logger via "
"NewLogger() has been removed. Chaincodes that used the shim's NewLogger()"
" must now shift to their own preferred logging mechanism."
msgstr ""

#: ../../source/upgrade_to_newest_version.md:41
msgid "For more information, check out Logging control."
msgstr ""

#: ../../source/upgrade_to_newest_version.md:43
msgid "Peer databases upgrade"
msgstr ""

#: ../../source/upgrade_to_newest_version.md:45
msgid ""
"For information about how to upgrade peers, check out our documentation "
"on upgrading components. During the process for upgrading your peers, you"
" will need to perform one additional step to upgrade the peer databases. "
"The databases of all peers (which include not just the state database but"
" the history database and other internal databases for the peer) must be "
"rebuilt using the v2.x data format as part of the upgrade to v2.x. To "
"trigger the rebuild, the databases must be dropped before the peer is "
"started. The instructions below utilize the peer node upgrade-dbs command"
" to drop the local databases managed by the peer and prepare them for "
"upgrade, so that they can be rebuilt the first time the v2.x peer starts."
" If you are using CouchDB as the state database, since it is not a local "
"database, the peer cannot automatically drop this database. You must drop"
" the CouchDB state database yourself."
msgstr ""

#: ../../source/upgrade_to_newest_version.md:47
msgid ""
"Follow the commands to upgrade a peer until the docker run command to "
"launch the new peer container (you can skip the step where you set an "
"IMAGE_TAG, since the upgrade dbs command is for the v2.x release of "
"Fabric only, but you will need to set the PEER_CONTAINER and "
"LEDGERS_BACKUP environment variables). Instead of the docker run command "
"to launch the peer, run this command instead to drop and prepare the "
"local databases managed by the peer (substitute 2.1 for 2.0 in these "
"commands if you are upgrading to that binary version from the 1.4.x LTS):"
msgstr ""

#: ../../source/upgrade_to_newest_version.md:57
msgid ""
"If you are using CouchDB as the state database, also drop the CouchDB "
"database.  This can be done by removing the CouchDB /data volume "
"directory."
msgstr ""

#: ../../source/upgrade_to_newest_version.md:59
msgid "Then issue this command to start the peer using the 2.0 tag:"
msgstr ""

#: ../../source/upgrade_to_newest_version.md:69
msgid ""
"The peer will rebuild the databases using the v2.x data format the first "
"time it starts. Because rebuilding the databases can be a lengthy process"
" (several hours, depending on the size of your databases), monitor the "
"peer logs to check the status of the rebuild. Every 1000th block you will"
" see a message like [lockbasedtxmgr] CommitLostBlock -> INFO 041 "
"Recommitting block [1000] to state database indicating the rebuild is "
"ongoing."
msgstr ""

#: ../../source/upgrade_to_newest_version.md:71
msgid ""
"If the database is not dropped as part of the upgrade process, the peer "
"start will return an error message stating that its databases are in the "
"old format and must be dropped using the peer node upgrade-dbs command "
"above (or dropped manually if using CouchDB state database). The node "
"will then need to be restarted again."
msgstr ""

#: ../../source/upgrade_to_newest_version.md:73
msgid "Capabilities"
msgstr ""

#: ../../source/upgrade_to_newest_version.md:75
msgid "The 2.0 release featured three new capabilities."
msgstr ""

#: ../../source/upgrade_to_newest_version.md:83
msgid ""
"As with any update of the capability levels, make sure to upgrade your "
"peer binaries before updating the Application and Channel capabilities, "
"and make sure to upgrade your orderer binaries before updating the "
"Orderer and Channel capabilities."
msgstr ""

#: ../../source/upgrade_to_newest_version.md:85
msgid ""
"For information about how to set new capabilities, check out Updating the"
" capability level of a channel."
msgstr ""

#: ../../source/upgrade_to_newest_version.md:87
msgid "Define ordering node endpoint per org (recommend)"
msgstr ""

#: ../../source/upgrade_to_newest_version.md:89
msgid ""
"Starting with version v1.4.2, it was recommended to define orderer "
"endpoints in both the system channel and in all application channels at "
"the organization level by adding a new OrdererEndpoints stanza within the"
" channel configuration of an organization, replacing the the global "
"OrdererAddresses section of channel configuration. If at least one "
"organization has an ordering service endpoint defined at an "
"organizational level, all orderers and peers will ignore the channel "
"level endpoints when connecting to ordering nodes."
msgstr ""

#: ../../source/upgrade_to_newest_version.md:91
msgid ""
"Utilizing organization level orderer endpoints is required when using "
"service discovery with ordering nodes provided by multiple organizations."
" This allows clients to provide the correct organization TLS "
"certificates."
msgstr ""

#: ../../source/upgrade_to_newest_version.md:93
msgid ""
"If your channel configuration does not yet include OrdererEndpoints per "
"org, you will need to perform a channel configuration update to add them "
"to the config. First, create a JSON file that includes the new "
"configuration stanza."
msgstr ""

#: ../../source/upgrade_to_newest_version.md:95
msgid ""
"In this example, we will create a stanza for a single org called "
"OrdererOrg. Note that if you have multiple ordering service "
"organizations, they will all have to be updated to include endpoints. "
"Let's call our JSON file orglevelEndpoints.json."
msgstr ""

#: ../../source/upgrade_to_newest_version.md:112
msgid "Then, export the following environment variables:"
msgstr ""

#: ../../source/upgrade_to_newest_version.md:121
msgid ""
"Once you have set the environment variables, navigate to Step 1: Pull and"
" translate the config."
msgstr ""

#: ../../source/upgrade_to_newest_version.md:123
msgid ""
"Once you have a modified_config.json, add the lifecycle organization "
"policy (as listed in orglevelEndpoints.json) using this command:"
msgstr ""

#: ../../source/upgrade_to_newest_version.md:129
msgid "Then, follow the steps at Step 3: Re-encode and submit the config."
msgstr ""

#: ../../source/upgrade_to_newest_version.md:131
msgid ""
"If every ordering service organization performs their own channel edit, "
"they can edit the configuration without needing further signatures (by "
"default, the only signature needed to edit parameters within an "
"organization is an admin of that organization). If a different "
"organization proposes the update, then the organization being edited will"
" need to sign the channel update request."
msgstr ""

