# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, hyperledger
# This file is distributed under the same license as the
# hyperledger-fabricdocs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: hyperledger-fabricdocs master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-14 17:38+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../source/tutorial/commercial_paper.md:1
msgid "Commercial paper tutorial"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:3
msgid ""
"Audience: Architects, application and smart contract developers, "
"administrators"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:6
msgid ""
"This tutorial will show you how to install and use a commercial paper "
"sample application and smart contract. It is a task-oriented topic, so it"
" emphasizes procedures above concepts. When youâ€™d like to understand the "
"concepts in more detail, you can read the Developing Applications topic."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:12
msgid ""
"commercialpaper.tutorial In this tutorial two organizations, MagnetoCorp "
"and DigiBank, trade commercial paper with each other using PaperNet, a "
"Hyperledger Fabric blockchain network."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:16
msgid ""
"Once you've set up the test network, you'll act as Isabella, an employee "
"of MagnetoCorp, who will issue a commercial paper on its behalf. You'll "
"then switch roles to take the role of Balaji, an employee of DigiBank, "
"who will buy this commercial paper, hold it for a period of time, and "
"then redeem it with MagnetoCorp for a small profit."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:22
msgid ""
"You'll act as an developer, end user, and administrator, each in "
"different organizations, performing the following steps designed to help "
"you understand what it's like to collaborate as two different "
"organizations working independently, but according to mutually agreed "
"rules in a Hyperledger Fabric network."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:41
msgid ""
"This tutorial has been tested on MacOS and Ubuntu, and should work on "
"other Linux distributions. A Windows version is under development."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:44
msgid "Prerequisites"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:46
msgid ""
"Before you start, you must install some prerequisite technology required "
"by the tutorial. We've kept these to a minimum so that you can get going "
"quickly."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:49
msgid "You must have the following technologies installed:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:64
msgid "You will find it helpful to install the following technologies:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:75
msgid ""
"You may find it helpful to install the following technologies as you "
"become more experienced with application and smart contract development. "
"There's no requirement to install these when you first run the tutorial:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:84
msgid "Download samples"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:86
msgid ""
"The commercial paper tutorial is one of the samples in the fabric-samples"
" directory. Before you begin this tutorial, ensure that you have followed"
" the instructions to install the Fabric Prerequisites and Download the "
"Samples, Binaries and Docker Images. When you are finished, you will have"
" cloned the fabric-samples repository that contains the tutorial scripts,"
" smart contract, and application files."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:93
msgid ""
"commercialpaper.download Download the fabric-samples GitHub repository to"
" your local machine."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:96
msgid ""
"After downloading, feel free to examine the directory structure of "
"fabric-samples:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:112
msgid ""
"Notice the commercial-paper directory -- that's where our sample is "
"located!"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:114
msgid ""
"You've now completed the first stage of the tutorial! As you proceed, "
"you'll open multiple command windows for different users and components. "
"For example:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:123
msgid ""
"We'll make it clear when you should run a command from particular command"
" window; for example:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:130
msgid "indicates that you should run the ls command from Isabella's window."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:132
msgid "Create the network"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:134
msgid ""
"This tutorial will deploy a smart contract using the Fabric test network."
" The test network consists of two peer organizations and an ordering "
"organization. The two peer organizations operate one peer each, while the"
" ordering organization operates a single node raft ordering service. We "
"will also use the test network to create a single channel named mychannel"
" that both peer organizations will be members of."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:141
msgid ""
"commercialpaper.network The Fabric test network is comprised of two peer "
"organizations, Org1 and Org2, each with one peer and its ledger database,"
" an ordering node. Each of these components runs as a Docker container."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:146
msgid ""
"The two peers, the peer ledgers, the orderer and the CA each run in the "
"their own Docker container. In production environments, organizations "
"typically use existing CAs that are shared with other systems; they're "
"not dedicated to the Fabric network."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:151
msgid ""
"The two organizations of the test network allow us to interact with a "
"blockchain ledger as two organizations that operate separate peers. In "
"this tutorial, we will operate Org1 of the test network as DigiBank and "
"Org2 as MagnetoCorp."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:155
msgid ""
"You can start the test network and create the channel with a script "
"provided in the commercial paper directory. Change to the commercial-"
"paper directory in the fabric-samples:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:161
msgid "Then use the script to start the test network:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:165
msgid ""
"If the command is successful, you will see the test network being created"
" in your logs. You can use the docker ps command to see the Fabric nodes "
"running on your local machine:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:179
msgid ""
"See if you can map these containers to the nodes of the test network (you"
" may need to horizontally scroll to locate the information):"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:188
msgid ""
"These containers all form a Docker network called net_test. You can view "
"the network with the docker network command:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:225
msgid ""
"See how the five containers use different IP addresses, while being part "
"of a single Docker network. (We've abbreviated the output for clarity.)"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:228
msgid ""
"Because we are operating the test network as DigiBank and MagnetoCorp, "
"peer0.org1.example.com will belong to the DigiBank organization while "
"peer0.org2.example.com will be operated by MagnetoCorp. Now that the test"
" network is up and running, we can refer our network as PaperNet from "
"this point forward."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:234
msgid ""
"To recap: you've downloaded the Hyperledger Fabric samples repository "
"from GitHub and you've got the test network running on your local "
"machine. Let's now start to play the role of MagnetoCorp, who wish to "
"trade commercial paper."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:238
msgid "Monitor the network as MagnetoCorp"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:240
msgid ""
"The commercial paper tutorial allows you to act as two organizations by "
"providing two separate folders for DigiBank and MagnetoCorp. The two "
"folders contain the smart contracts and application files for each "
"organization. Because the two organizations have different roles in the "
"trading of the commercial paper, the application files are different for "
"each organization. Open a new window in the fabric-samples repository and"
" use the following command to change into the MagnetoCorp directory:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:250
msgid ""
"The first thing we are going to do as MagnetoCorp is monitor the "
"components of PaperNet. An administrator can view the aggregated output "
"from a set of Docker containers using the logspout tool. The tool "
"collects the different output streams into one place, making it easy to "
"see what's happening from a single window. This can be really helpful for"
" administrators when installing smart contracts or for developers when "
"invoking smart contracts, for example."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:258
msgid ""
"In the MagnetoCorp directory, run the following command to run the "
"monitordocker.sh  script and start the logspout tool for the containers "
"associated with PaperNet running on net_test:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:272
msgid ""
"Note that you can pass a port number to the above command if the default "
"port in monitordocker.sh is already in use."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:277
msgid ""
"This window will now show output from the Docker containers for the "
"remainder of the tutorial, so go ahead and open another command window. "
"The next thing we will do is examine the smart contract that MagnetoCorp "
"will use to issue to the commercial paper."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:282
msgid "Examine the commercial paper smart contract"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:284
msgid ""
"issue, buy and redeem are the three functions at the heart of the "
"commercial paper smart contract. It is used by applications to submit "
"transactions which correspondingly issue, buy and redeem commercial paper"
" on the ledger. Our next task is to examine this smart contract."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:289
msgid ""
"Open a new terminal in the fabric-samples directory and change into the "
"MagnetoCorp folder to act as the MagnetoCorp developer."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:294
msgid ""
"You can then view the smart contract in the contract directory using your"
" chosen editor (VS Code in this tutorial):"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:300
msgid ""
"In the lib directory of the folder, you'll see papercontract.js file -- "
"this contains the commercial paper smart contract!"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:303
msgid ""
"commercialpaper.vscode1 An example code editor displaying the commercial "
"paper smart contract in papercontract.js"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:306
msgid ""
"papercontract.js is a JavaScript program designed to run in the Node.js "
"environment. Note the following key program lines:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:357
msgid ""
"Feel free to examine other files in the contract directory to understand "
"how the smart contract works, and read in detail how papercontract.js is "
"designed in the smart contract topic."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:361
msgid "Deploy the smart contract to the channel"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:363
msgid ""
"Before papercontract can be invoked by applications, it must be installed"
" onto the appropriate peer nodes of the test network and then defined on "
"the channel using the Fabric chaincode lifecycle. The Fabric chaincode "
"lifecycle allows multiple organizations to agree to the parameters of a "
"chaincode before the chainocde is deployed to a channel. As a result, we "
"need to install and approve the chaincode as administrators of both "
"MagnetoCorp and DigiBank."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:370
msgid ""
"commercialpaper.install  A MagnetoCorp administrator installs a copy of "
"the papercontract onto a MagnetoCorp peer."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:373
msgid ""
"Smart contracts are the focus of application development, and are "
"contained within a Hyperledger Fabric artifact called chaincode. One or "
"more smart contracts can be defined within a single chaincode, and "
"installing a chaincode will allow them to be consumed by the different "
"organizations in PaperNet. It means that only administrators need to "
"worry about chaincode; everyone else can think in terms of smart "
"contracts."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:380
msgid "Install and approve the smart contract as MagnetoCorp"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:382
msgid ""
"We will first install and approve the smart contract as the MagnetoCorp "
"admin. Make sure that you are operating from the magnetocorp folder, or "
"navigate back to that folder using the following command:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:389
msgid ""
"A MagnetoCorp administrator can interact with PaperNet using the peer "
"CLI. However, the administrator needs to set certain environment "
"variables in their command window to use the correct set of peer "
"binaries, send commands to the address of the MagnetoCorp peer, and sign "
"requests with the correct crypto material."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:394
msgid ""
"You can use a script provided by the sample to set the environment "
"variables in your command window. Run the following command in the "
"magnetocorp directory:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:400
msgid ""
"You will see the full list of environment variables printed in your "
"window. We can now use this command window to interact with PaperNet as "
"the MagnetoCorp administrator."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:404
msgid ""
"The first step is to install the papercontract smart contract. The smart "
"contract can be packaged into a chaincode using the peer lifecycle "
"chaincode package command. In the MagnetoCorp administrator's command "
"window, run the following command to create the chaincode package:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:411
msgid ""
"The MagnetoCorp admin can now install the chaincode on the MagnetoCorp "
"peer using the peer lifecycle chaincode install command:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:416
msgid ""
"If the command is successful, you will see messages similar to the "
"following printed in your terminal:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:422
msgid ""
"Because the MagnetoCorp admin has set CORE_PEER_ADDRESS=localhost:9051 to"
" target its commands to peer0.org2.example.com, the INFO 001 Installed "
"remotely... indicates that papercontract has been successfully installed "
"on this peer."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:426
msgid ""
"After we install the smart contract, we need to approve the chaincode "
"definition for papercontract as MagnetoCorp. The first step is to find "
"the packageID of the chaincode we installed on our peer. We can query the"
" packageID using the peer lifecycle chaincode queryinstalled command:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:434
msgid ""
"The command will return the same package identifier as the install "
"command. You should see output similar to the following:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:441
msgid ""
"We will need the package ID in the next step, so we will save it as an "
"environment variable. The package ID may not be the same for all users, "
"so you need to complete this step using the package ID returned from your"
" command window."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:448
msgid ""
"The admin can now approve the chaincode definition for MagnetoCorp using "
"the peer lifecycle chaincode approveformyorg command:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:454
msgid ""
"One of the most important chaincode parameters that channel members need "
"to agree to using the chaincode definition is the chaincode endorsement "
"policy. The endorsement policy describes the set of organizations that "
"must endorse (execute and sign) a transaction before it can be determined"
" to be valid. By approving the papercontract chaincode without the "
"--policy flag, the MagnetoCorp admin agrees to using the default "
"endorsement policy, which requires a majority of organizations on the "
"channel to endorse a transaction. All transactions, whether valid or "
"invalid, will be recorded on the ledger blockchain, but only valid "
"transactions will update the world state."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:464
msgid "Install and approve the smart contract as DigiBank"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:466
msgid ""
"By default, the Fabric Chaincode lifecycle requires a majority of "
"organizations on the channel to successfully commit the chaincode "
"definition to the channel. This implies that we need to approve the "
"papernet chaincode as both MagnetoCorp and DigiBank to get the required "
"majority of 2 out of 2. Open a new terminal window in the fabric-samples "
"and navigate to the older that contains the DigiBank smart contract and "
"application files:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:475
msgid ""
"Use the script in the DigiBank folder to set the environment variables "
"that will allow you to act as the DigiBank admin:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:481
msgid ""
"We can now install and approve papercontract as the DigiBank. Run the "
"following command to package the chaincode:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:486
msgid "The admin can now install the chaincode on the DigiBank peer:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:490
msgid ""
"We then need to query and save the packageID of the chaincode that was "
"just installed:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:495
msgid ""
"Save the package ID as an environment variable. Complete this step using "
"the package ID returned from your console."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:501
msgid ""
"The Digibank admin can now approve the chaincode definition of "
"papercontract:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:506
msgid "Commit the chaincode definition to the channel"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:508
msgid ""
"Now that DigiBank and MagnetoCorp have both approved the papernet "
"chaincode, we have the majority we need (2 out of 2) to commit the "
"chaincode definition to the channel. Once the chaincode is successfully "
"defined on the channel, the CommercialPaper smart contract inside the "
"papercontract chaincode can be invoked by client applications on the "
"channel. Since either organization can commit the chaincode to the "
"channel, we will continue operating as the DigiBank admin:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:516
msgid ""
"commercialpaper.commit  After the DigiBank administrator commits the "
"definition of the papercontract chaincode to the channel, a new Docker "
"chaincode container will be created to run papercontract on both PaperNet"
" peers"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:518
msgid ""
"The DigiBank administrator uses the peer lifecycle chaincode commit "
"command to commit the chaincode definition of papercontract to mychannel:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:523
msgid ""
"The chaincode container will start after the chaincode definition has "
"been committed to the channel. You can use the docker ps command to see "
"papercontract container starting on both peers."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:535
msgid ""
"Notice that the containers are named to indicate the peer that started "
"it, and the fact that it's running papercontract version 0."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:538
msgid ""
"Now that we have deployed the papercontract chaincode to the channel, we "
"can use the MagnetoCorp application to issue the commercial paper. Let's "
"take a moment to examine the application structure."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:542
msgid "Application structure"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:544
msgid ""
"The smart contract contained in papercontract is called by MagnetoCorp's "
"application issue.js. Isabella uses this application to submit a "
"transaction to the ledger which issues commercial paper 00001. Let's "
"quickly examine how the issue application works."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:549
msgid ""
"commercialpaper.application A gateway allows an application to focus on "
"transaction generation, submission and response. It coordinates "
"transaction proposal, ordering and notification processing between the "
"different network components."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:554
msgid ""
"Because the issue application submits transactions on behalf of Isabella,"
" it starts by retrieving Isabella's X.509 certificate from her wallet, "
"which might be stored on the local file system or a Hardware Security "
"Module HSM. The issue application is then able to utilize the gateway to "
"submit transactions on the channel. The Hyperledger Fabric SDK provides a"
" gateway abstraction so that applications can focus on application logic "
"while delegating network interaction to the gateway. Gateways and wallets"
" make it straightforward to write Hyperledger Fabric applications."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:566
msgid ""
"So let's examine the issue application that Isabella is going to use. "
"Open a separate terminal window for her, and in fabric-samples locate the"
" MagnetoCorp /application folder:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:577
msgid ""
"addToWallet.js is the program that Isabella is going to use to load her "
"identity into her wallet, and issue.js will use this identity to create "
"commercial paper 00001 on behalf of MagnetoCorp by invoking "
"papercontract."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:581
msgid ""
"Change to the directory that contains MagnetoCorp's copy of the "
"application issue.js, and use your code editor to examine it:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:589
msgid ""
"Examine this directory; it contains the issue application and all its "
"dependencies."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:592
msgid ""
"commercialpaper.vscode2 A code editor displaying the contents of the "
"commercial paper application directory."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:595
msgid "Note the following key program lines in issue.js:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:646
msgid ""
"Feel free to examine other files in the /application directory to "
"understand how issue.js works, and read in detail how it is implemented "
"in the application topic."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:650
msgid "Application dependencies"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:652
msgid ""
"The issue.js application is written in JavaScript and designed to run in "
"the Node.js environment that acts as a client to the PaperNet network. As"
" is common practice, MagnetoCorp's application is built on many external "
"node packages --- to improve quality and speed of development. Consider "
"how issue.js includes the js-yaml package to process the YAML gateway "
"connection profile, or the fabric-network package to access the Gateway "
"and Wallet classes:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:667
msgid ""
"These packages have to be downloaded from npm to the local file system "
"using the npm install command. By convention, packages must be installed "
"into an application-relative /node_modules directory for use at runtime."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:672
msgid ""
"Examine the package.json file to see how issue.js identifies the packages"
" to download and their exact versions:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:683
msgid "npm versioning is very powerful; you can read more about it here."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:686
msgid ""
"Let's install these packages with the npm install command -- this may "
"take up to a minute to complete:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:698
msgid "See how this command has updated the directory:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:707
msgid ""
"Examine the node_modules directory to see the packages that have been "
"installed. There are lots, because js-yaml and fabric-network are "
"themselves built on other npm packages! Helpfully, the package-lock.json "
"file identifies the exact versions installed, which can prove invaluable "
"if you want to exactly reproduce environments; to test, diagnose problems"
" or deliver proven applications for example."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:715
msgid "Wallet"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:717
msgid ""
"Isabella is almost ready to run issue.js to issue MagnetoCorp commercial "
"paper 00001; there's just one remaining task to perform! As issue.js acts"
" on behalf of Isabella, and therefore MagnetoCorp, it will use identity "
"from her wallet that reflects these facts. We now need to perform this "
"one-time activity of adding appropriate X.509 credentials to her wallet."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:724
msgid ""
"In Isabella's terminal window, run the addToWallet.js program to add "
"identity information to her wallet:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:733
msgid ""
"addToWallet.js is a simple file-copying program which you can examine at "
"your leisure. It moves an identity from the test network sample to "
"Isabella's wallet. Let's focus on the result of this program --- the "
"contents of the wallet which will be used to submit transactions to "
"PaperNet:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:744
msgid ""
"Isabella can store multiple identities in her wallet, though in our "
"example, she only uses one. The wallet folder contains an isabella.id "
"file that provides the information that Isabella needs to connect to the "
"network. Other identities used by Isabella would have their own file. You"
" can open this file to see the identity information that issue.js will "
"use on behalf of Isabella inside a JSON file. The output has been "
"formatted for clarity."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:764
msgid "In the file you can notice the following:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:774
msgid ""
"You can Learn more about certificates here. In practice, the certificate "
"file also contains some Fabric-specific metadata such as Isabella's "
"organization and role -- read more in the wallet topic."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:778
msgid "Issue application"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:780
msgid ""
"Isabella can now use issue.js to submit a transaction that will issue "
"MagnetoCorp commercial paper 00001:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:797
msgid ""
"The node command initializes a Node.js environment, and runs issue.js. We"
" can see from the program output that MagnetoCorp commercial paper 00001 "
"was issued with a face value of 5M USD."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:801
msgid ""
"As you've seen, to achieve this, the application invokes the issue "
"transaction defined in the CommercialPaper smart contract within "
"papercontract.js. This had been installed and instantiated in the network"
" by the MagnetoCorp administrator. It's the smart contract which "
"interacts with the ledger via the Fabric APIs, most notably putState() "
"and getState(), to represent the new commercial paper as a vector state "
"within the world state. We'll see how this vector state is subsequently "
"manipulated by the buy and redeem transactions also defined within the "
"smart contract."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:810
msgid ""
"All the time, the underlying Fabric SDK handles the transaction "
"endorsement, ordering and notification process, making the application's "
"logic straightforward; the SDK uses a gateway to abstract away network "
"details and connectionOptions to declare more advanced processing "
"strategies such as transaction retry."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:817
msgid ""
"Let's now follow the lifecycle of MagnetoCorp 00001 by switching our "
"emphasis to an employee of DigiBank, Balaji, who will buy the commercial "
"paper using a DigiBank application."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:821
msgid "Digibank applications"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:823
msgid ""
"Balaji uses DigiBank's buy application to submit a transaction to the "
"ledger which transfers ownership of commercial paper 00001 from "
"MagnetoCorp to DigiBank. The CommercialPaper smart contract is the same "
"as that used by MagnetoCorp's application, however the transaction is "
"different this time -- it's buy rather than issue. Let's examine how "
"DigiBank's application works."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:829
msgid ""
"Open a separate terminal window for Balaji. In fabric-samples, change to "
"the DigiBank application directory that contains the application, buy.js,"
" and open it with your editor:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:838
msgid ""
"As you can see, this directory contains both the buy and redeem "
"applications that will be used by Balaji."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:842
msgid ""
"commercialpaper.vscode3 DigiBank's commercial paper directory containing "
"the buy.js and redeem.js applications."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:846
msgid ""
"DigiBank's buy.js application is very similar in structure to "
"MagnetoCorp's issue.js with two important differences:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:872
msgid ""
"Feel free to examine other files in the application directory to "
"understand how the application works, and read in detail how buy.js is "
"implemented in the application topic."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:876
msgid "Run as DigiBank"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:878
msgid ""
"The DigiBank applications which buy and redeem commercial paper have a "
"very similar structure to MagnetoCorp's issue application. Therefore, "
"letâ€™s install their dependencies and set up Balaji's wallet so that he "
"can use these applications to buy and redeem commercial paper."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:883
msgid ""
"Like MagnetoCorp, Digibank must the install the required application "
"packages using the npm install command, and again, this make take a short"
" time to complete."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:887
msgid ""
"In the DigiBank administrator window, install the application "
"dependencies:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:898
msgid ""
"In Balaji's command window, run the addToWallet.js program to add the "
"identity to his wallet:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:907
msgid ""
"The addToWallet.js program has added identity information for balaji, to "
"his wallet, which will be used by buy.js and redeem.js to submit "
"transactions to PaperNet."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:911
msgid ""
"Like Isabella, Balaji can store multiple identities in his wallet, though"
" in our example, he only uses one. His corresponding id file at "
"digibank/identity/user/balaji/wallet/balaji.id is very similar Isabella's"
" --- feel free to examine it."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:916
msgid "Buy application"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:918
msgid ""
"Balaji can now use buy.js to submit a transaction that will transfer "
"ownership of MagnetoCorp commercial paper 00001 to DigiBank."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:921
msgid "Run the buy application in Balaji's window:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:937
msgid ""
"You can see the program output that MagnetoCorp commercial paper 00001 "
"was successfully purchased by Balaji on behalf of DigiBank. buy.js "
"invoked the buy transaction defined in the CommercialPaper smart contract"
" which updated commercial paper 00001 within the world state using the "
"putState() and getState() Fabric APIs. As you've seen, the application "
"logic to buy and issue commercial paper is very similar, as is the smart "
"contract logic."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:944
msgid "Redeem application"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:946
msgid ""
"The final transaction in the lifecycle of commercial paper 00001 is for "
"DigiBank to redeem it with MagnetoCorp. Balaji uses redeem.js to submit a"
" transaction to perform the redeem logic within the smart contract."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:950
msgid "Run the redeem transaction in Balaji's window:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:966
msgid ""
"Again, see how the commercial paper 00001 was successfully redeemed when "
"redeem.js invoked the redeem transaction defined in CommercialPaper. "
"Again, it updated commercial paper 00001 within the world state to "
"reflect that the ownership returned to MagnetoCorp, the issuer of the "
"paper."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:971
msgid "Clean up"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:973
msgid ""
"When you are finished using the Commercial Paper tutorial, you can use a "
"script to clean up your environment. Use a command window to navigate "
"back to the root directory of the commercial paper sample:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:979
msgid "You can then bring down the network with the following command:"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:983
msgid ""
"This command will bring down the peers, CouchDB containers, and ordering "
"node of the network, in addition to the logspout tool. It will also "
"remove the identities that we created for Isabella and Balaji. Note that "
"all of the data on the ledger will be lost. If you want to go through the"
" tutorial again, you will start from a clean initial state."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:985
msgid "Further reading"
msgstr ""

#: ../../source/tutorial/commercial_paper.md:987
msgid ""
"To understand how applications and smart contracts shown in this tutorial"
" work in more detail, you'll find it helpful to read Developing "
"Applications. This topic will give you a fuller explanation of the "
"commercial paper scenario, the PaperNet business network, its actors, and"
" how the applications and smart contracts they use work in detail."
msgstr ""

#: ../../source/tutorial/commercial_paper.md:994
msgid ""
"Also feel free to use this sample to start creating your own applications"
" and smart contracts!"
msgstr ""

