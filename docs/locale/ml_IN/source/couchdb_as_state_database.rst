സ്റ്റേറ്റ്  ഡാറ്റാബേസായി കൊച്ച്ഡിബി
=============================

സ്റ്റേറ്റ്  ഡാറ്റാബേസ് ഓപ്ഷനുകൾ
----------------------

ലെവൽഡിബി, കൊച്ച്ഡിബി എന്നിവയാണ് പിയർ സ്റ്റേറ്റ് ഡാറ്റാബേസിനായുള്ള നിലവിലെ ഓപ്ഷനുകൾ. ലെവൽ‌ഡിബി സ്ഥിരസ്ഥിതിയാണ് കീ-മൂല്യം സ്റ്റേറ്റ് ഡാറ്റാബേസ് പിയർ പ്രോസസ്സിൽ ഉൾപ്പെടുത്തിയിട്ടുണ്ട്. CouchDB ഒരു ഇതര ബാഹ്യ സംസ്ഥാന ഡാറ്റാബേസാണ്. ലെവൽ‌ഡിബി കീ-വാല്യു സ്റ്റോർ‌ പോലെ, ചൈൻ‌കോഡിൽ‌ മാതൃകയാക്കിയ ഏത് ബൈനറി ഡാറ്റയും കൊച്ച്ഡിബിക്ക് സംഭരിക്കാൻ‌ കഴിയും (JSON ഇതര ഡാറ്റയ്‌ക്കായി CouchDB അറ്റാച്ചുമെന്റുകൾ ആന്തരികമായി ഉപയോഗിക്കുന്നു). ഒരു പ്രമാണ ഒബ്ജക്റ്റ് സ്റ്റോർ എന്ന നിലയിൽ, JSON ഫോർ‌മാറ്റിൽ‌ ഡാറ്റ സംഭരിക്കാനും നിങ്ങളുടെ ഡാറ്റയ്‌ക്കെതിരെ സമൃദ്ധമായ ചോദ്യങ്ങൾ‌ നൽ‌കാനും CouchDB നിങ്ങളെ അനുവദിക്കുന്നു.നിങ്ങളുടെ ചോദ്യങ്ങളെ പിന്തുണയ്ക്കാൻ സൂചികകൾ ഉപയോഗിക്കുക.

ലെവൽ‌ഡിബിയും കൊച്ച്ഡിബിയും ഒരു കീ (അസറ്റ്) നേടുന്നതും സജ്ജീകരിക്കുന്നതും പോലുള്ള കോർ‌ ചെയിൻ‌കോഡ് പ്രവർ‌ത്തനങ്ങളെ പിന്തുണയ്‌ക്കുന്നു
, കീകളെ അടിസ്ഥാനമാക്കി ആണ് അനേഷണം  . കീകൾ‌ ശ്രേണി പ്രകാരം അന്വേഷിക്കാൻ‌ കഴിയും, കൂടാതെ സംയോജിത കീകൾ‌ ആകാം ഒന്നിലധികം പാരാമീറ്ററുകൾക്കെതിരെ തുല്യതാ ചോദ്യങ്ങൾ പ്രവർത്തനക്ഷമമാക്കുന്നതിന് മാതൃകയാക്കി. ഉദാഹരണത്തിന് ഒരു സംയോജനം ഒരു നിശ്ചിത എന്റിറ്റിയുടെ ഉടമസ്ഥതയിലുള്ള എല്ലാ അസറ്റുകളും അന്വേഷിക്കാൻ ``ഉടമയുടെ കീ, അസറ്റ്_ഐഡി`` ഉപയോഗിക്കാം. ഈ കീ അടിസ്ഥാനമാക്കിയുള്ളവ ലെഡ്ജറിനെതിരായ വായന-മാത്രം ചോദ്യങ്ങൾ‌ക്കും അതുപോലെ തന്നെ ഇടപാടുകൾ‌ക്കും ചോദ്യങ്ങൾ‌ ഉപയോഗിക്കാൻ‌ കഴിയും ലെഡ്ജർ അപ്‌ഡേറ്റുചെയ്യുക.

JSON- ൽ നിങ്ങളുടെ ഡാറ്റ മോഡലിംഗ് ചെയ്യുന്നത് നിങ്ങളുടെ ഡാറ്റയുടെ മൂല്യങ്ങൾക്കെതിരെ സമൃദ്ധമായ ചോദ്യങ്ങൾ നൽകാൻ നിങ്ങളെ അനുവദിക്കുന്നു,
കീകൾ ഉപയോഗിച്ചു അനേഷിക്കുന്നതിനു പകരം ആണ് ഇത്  . ഇത് നിങളുടെ അപ്പ്ലിക്കേഷനും ചെയിൻകോഡിനും ബ്ലോക്‌ചെയ്ന് നിന്നും വായിക്കാൻ സഹായിക്കുന്നു  . CouchDB ഉപയോഗിക്കുന്നത് നിങ്ങളെ കണ്ടുമുട്ടാൻ സഹായിക്കും ലെവൽ‌ഡിബി പിന്തുണയ്‌ക്കാത്ത നിരവധി ഉപയോഗ കേസുകളുടെ ഓഡിറ്റിംഗ്, റിപ്പോർട്ടിംഗ് ആവശ്യകതകൾ. നിങ്ങൾ CouchDB ഉപയോഗിക്കുകയും JSON ൽ നിങ്ങളുടെ ഡാറ്റ മോഡൽ ചെയ്യുകയും ചെയ്യുന്നുവെങ്കിൽ, നിങ്ങളുടെ ചെയിൻ‌കോഡ് ഉപയോഗിച്ച് സൂചികകൾ വിന്യസിക്കാനും കഴിയും.സൂചികകൾ‌ ഉപയോഗിക്കുന്നത് ചോദ്യങ്ങൾ‌ കൂടുതൽ‌ സൗകര്യപ്രദവും കാര്യക്ഷമവുമാക്കുന്നു, മാത്രമല്ല വലിയ ചോദ്യം ചെയ്യാൻ‌ നിങ്ങളെ പ്രാപ്‌തമാക്കുന്നു ചെയിൻ‌കോഡിൽ നിന്നുള്ള ഡാറ്റാസെറ്റുകൾ‌.

പിയറിനൊപ്പം ഒരു പ്രത്യേക ഡാറ്റാബേസ് പ്രക്രിയയായി CouchDB പ്രവർത്തിക്കുന്നു, അതിനാൽ അധികമുണ്ട് സജ്ജീകരണം, മാനേജുമെന്റ്, പ്രവർത്തനങ്ങൾ എന്നിവയുടെ പരിഗണനകൾ. ആരംഭിക്കുന്നത് നിങ്ങൾക്ക് പരിഗണിക്കാം സ്ഥിരസ്ഥിതിയായി ഉൾച്ചേർത്ത ലെവൽ‌ഡിബി, കൂടുതൽ‌ സങ്കീർ‌ണ്ണമായ സമൃദ്ധമായ ചോദ്യങ്ങൾ‌ നിങ്ങൾ‌ക്കാവശ്യമുണ്ടെങ്കിൽ‌ CouchDB ലേക്ക് നീങ്ങുക. അസറ്റ് ഡാറ്റയെ JSON ആയി മോഡൽ ചെയ്യുന്നത് ഒരു നല്ല പരിശീലനമാണ്, അതുവഴി നിങ്ങൾക്ക് പ്രകടനം നടത്താനുള്ള ഓപ്ഷൻ ഉണ്ട് ഭാവിയിൽ ആവശ്യമെങ്കിൽ സങ്കീർണ്ണമായ സമ്പന്നമായ ചോദ്യങ്ങൾ.

.. note:: ഒരു CouchDB JSON പ്രമാണത്തിന്റെ കീയിൽ സാധുവായ യുടിഎഫ് -8 സ്ട്രിംഗുകൾ മാത്രമേ ഉൾക്കൊള്ളാൻ കഴിയൂ, മാത്രമല്ല അടിവരയിട്ട് ("_") ആരംഭിക്കാൻ കഴിയില്ല. നിങ്ങൾ CouchDB അല്ലെങ്കിൽ LevelDB ഉപയോഗിക്കുന്നുണ്ടെങ്കിലും, നിങ്ങൾ ഉപയോഗിക്കുന്നത് ഒഴിവാക്കണം    കീകളിൽ U + 0000 (nil byte)

   CouchDB- ലെ JSON പ്രമാണങ്ങൾക്ക് ഇനിപ്പറയുന്ന മൂല്യങ്ങൾ ഉയർന്ന തലത്തിലുള്ള ഫീൽഡ് നാമങ്ങളായി ഉപയോഗിക്കാൻ കഴിയില്ല. ഈ മൂല്യങ്ങൾ ആന്തരിക ഉപയോഗത്തിനായി കരുതിവച്ചിരിക്കുന്നു.

   - ``അടിവരയിട്ട് ആരംഭിക്കുന്ന ഏത് ഫീൽഡും,  "_"``
   - ``~പതിപ്പ്``

ചെയിൻ‌കോഡിൽ‌ നിന്നും CouchDB ഉപയോഗിക്കുന്നു
----------------------------

ചെയിൻ‌കോഡ് അന്വേഷണങ്ങൾ
~~~~~~~~~~~~~~~~~

മിക്ക `chaincode shim APIs <https://godoc.org/github.com/hyperledger/fabric-chaincode-go/shim#ChaincodeStubInterface>`__ ലെവൽ‌ഡിബി അല്ലെങ്കിൽ കൊച്ച്ഡിബി സ്റ്റേറ്റ് ഡാറ്റാബേസ് ഉപയോഗിച്ച് ഉപയോഗിക്കാം, ഉദാ. ``GetState``, ``PutState``, ``GetStateByRange``, ``GetStateByPartialCompositeKey``. കൂടാതെ നിങ്ങൾ CouchDB ഉപയോഗിക്കുമ്പോൾ സംസ്ഥാന ഡാറ്റാബേസും മോഡൽ അസറ്റുകളും JSON ആയി ചെയിൻ‌കോഡിൽ‌, നിങ്ങൾ‌ക്ക് എതിരെ സമൃദ്ധമായ ചോദ്യങ്ങൾ‌ നടത്താൻ‌ കഴിയും ``GetQueryResult`` API ഉപയോഗിച്ച് ഒരു CouchDB അന്വേഷണ സ്‌ട്രിംഗ് കൈമാറുന്നതിലൂടെ സ്റ്റേറ്റ് ഡാറ്റാബേസിലെ JSON. ചോദ്യ സ്ട്രിംഗ് `CouchDB JSON query syntax <http://docs.couchdb.org/en/2.1.1/api/database/find.html>`__ പിന്തുടരുന്നു.

`CouchDB JSON query syntax <http://docs.couchdb.org/en/2.1.1/api/database/find.html>`__  ചെയിൻ‌കോഡിൽ‌ നിന്നുള്ള CouchDB അന്വേഷണങ്ങളുടെ ഉപയോഗം കാണിക്കുന്നു. ഒരു ഉടമ ഐഡി ചെയിൻ‌കോഡിലേക്ക് കൈമാറുന്നതിലൂടെ പാരാമീറ്ററൈസ്ഡ് ചോദ്യങ്ങൾ കാണിക്കുന്ന ഒരു ``queryMarblesByOwner ()`` ഫംഗ്ഷൻ ഇതിൽ ഉൾപ്പെടുന്നു. തുടർന്ന് “മാർബിൾ” എന്ന ഡോക് ടൈപ്പിനും JSON അന്വേഷണ വാക്യഘടന ഉപയോഗിക്കുന്ന ഉടമ ഐഡിക്കും പൊരുത്തപ്പെടുന്ന JSON പ്രമാണങ്ങൾക്കായുള്ള സ്റ്റേറ്റ് ഡാറ്റ അന്വേഷിക്കുന്നു:

.. code:: bash

  {"selector":{"docType":"marble","owner":<OWNER_ID>}}

ലെഡ്ജറിലെ ഡാറ്റ മനസിലാക്കാൻ സമ്പന്നമായ ചോദ്യങ്ങൾക്കുള്ള പ്രതികരണങ്ങൾ ഉപയോഗപ്രദമാണ്. എന്നിരുന്നാലും,
സമൃദ്ധമായ അന്വേഷണത്തിനായി സജ്ജീകരിച്ച ഫലം ചെയിൻ‌കോഡ് നിർവ്വഹണത്തിനും സമയം ചെലവഴിക്കുന്നതിനും ഇടയിൽ സ്ഥിരത കൈവരിക്കുമെന്നതിന് യാതൊരു ഉറപ്പുമില്ല. തൽഫലമായി, നിങ്ങൾ ഒരു സമ്പന്നമായ അന്വേഷണം ഉപയോഗിക്കുകയും ഒരൊറ്റ ഇടപാടിൽ ചാനൽ ലെഡ്ജർ അപ്‌ഡേറ്റ് ചെയ്യുകയും ചെയ്യരുത്. ഉദാഹരണത്തിന്, ആലീസിന്റെ ഉടമസ്ഥതയിലുള്ള എല്ലാ അസറ്റുകൾക്കുമായി നിങ്ങൾ ഒരു സമൃദ്ധമായ അന്വേഷണം നടത്തി അവ ബോബിലേക്ക് മാറ്റുകയാണെങ്കിൽ, ചെയിൻ‌കോഡ് നിർവ്വഹണ സമയവും സമയവും തമ്മിലുള്ള മറ്റൊരു ഇടപാട് വഴി ഒരു പുതിയ അസറ്റ് ആലീസിന് നൽകാം.


.. couchdb-pagination:

CouchDB pagination
^^^^^^^^^^^^^^^^^^

സമ്പന്നമായ ചോദ്യങ്ങൾ‌ക്കും ശ്രേണി അടിസ്ഥാനമാക്കിയുള്ള ചോദ്യങ്ങൾ‌ക്കുമായുള്ള അന്വേഷണ ഫലങ്ങൾ‌ പേജിംഗ് ചെയ്യുന്നതിന് ഫാബ്രിക് പിന്തുണയ്‌ക്കുന്നു. കാര്യക്ഷമമായ pagination പിന്തുണയ്‌ക്കുന്നതിന്, ഫാബ്രിക് pagination API- കൾ ഉപയോഗിക്കണം. പ്രത്യേകിച്ചും, അന്വേഷണ ഫലങ്ങളിൽ ഫാബ്രിക് തന്നെ മാനേജുചെയ്യുകയും കൊച്ച്ഡിബിയിലേക്ക് കൈമാറുന്ന പേജ് വലുപ്പ പരിധി വ്യക്തമായി സജ്ജമാക്കുകയും ചെയ്യുന്നതിനാൽ കൊച്ച്ഡിബി ``പരിധി`` കീവേഡ് കൊച്ച്ഡിബി അന്വേഷണങ്ങളിൽ മാനിക്കപ്പെടില്ല.
പേജിനേറ്റഡ് ക്വറി API- കൾ (``GetStateByRangeWithPagination ()``, ``GetStateByPartialCompositeKeyWithPagination ()``,  ``GetQueryResultWithPagination ()``) എന്നിവ ഉപയോഗിച്ച് ഒരു പേജ് വലുപ്പം വ്യക്തമാക്കിയിട്ടുണ്ടെങ്കിൽ, ഒരു കൂട്ടം ഫലങ്ങൾ‌ (പരിധി നിശ്ചയിക്കും) ഒരു ബുക്ക്മാർക്കിനൊപ്പം ചെയിൻ‌കോഡിലേക്ക്. ചെയിൻ‌കോഡിൽ‌ നിന്നും ഇൻ‌വോക്കിംഗ് ക്ലയന്റുകളിലേക്ക് ബുക്ക്‌മാർ‌ക്ക് മടക്കിനൽകാൻ‌ കഴിയും, അത് ഫലങ്ങളുടെ അടുത്ത "പേജ്" സ്വീകരിക്കുന്നതിന് ഫോളോ ഓൺ അന്വേഷണത്തിൽ‌ ബുക്ക്‌മാർ‌ക്ക് ഉപയോഗിക്കാൻ‌ കഴിയും.

പേജിനേഷൻ API- കൾ വായന-മാത്രം ഇടപാടുകളിൽ മാത്രമുള്ളതാണ്, അന്വേഷണ ഫലങ്ങൾ ക്ലയന്റ് പേജിംഗ് ആവശ്യകതകളെ പിന്തുണയ്ക്കുന്നതിനാണ്. വായിക്കാനും എഴുതാനും ആവശ്യമായ ഇടപാടുകൾക്ക്, പേജില്ലാത്ത നോൺ ചെയിൻകോഡ് അന്വേഷണ API- കൾ ഉപയോഗിക്കുക. ചെയിൻ‌കോഡിനുള്ളിൽ‌ നിങ്ങൾ‌ക്ക് ആവശ്യമുള്ള ഡെപ്റ്റിലേക്ക് റിസൾ‌ട്ട് സെറ്റുകൾ‌ വഴി ആവർത്തിക്കാൻ‌ കഴിയും.

പേജിനേഷൻ API- കൾ ഉപയോഗിച്ചിട്ടുണ്ടോ എന്നത് പരിഗണിക്കാതെ തന്നെ, എല്ലാ ചെയിൻ‌കോഡ് അന്വേഷണങ്ങളും ``core.yaml`` ൽ നിന്നുള്ള ``totalQueryLimit`` (default 100000)കൊണ്ട് ബന്ധപ്പെട്ടിരിക്കുന്നു. ആകസ്മികമോ ക്ഷുദ്രകരമോ ആയ ദീർഘകാല ചോദ്യങ്ങൾ ഒഴിവാക്കാൻ, ചെയിൻ‌കോഡ് ആവർത്തിച്ച് ക്ലയന്റിലേക്ക് മടങ്ങുന്ന ഫലങ്ങളുടെ പരമാവധി എണ്ണം ഇതാണ്.

.. note:: ചെയിൻ‌കോഡ് പേജിനേറ്റഡ് ചോദ്യങ്ങൾ ഉപയോഗിക്കുന്നുണ്ടോ ഇല്ലയോ എന്നത് പരിഗണിക്കാതെ തന്നെ, ``core.yaml`` ൽ നിന്നുള്ള  ``internalQueryLimit`` (default 1000) അടിസ്ഥാനമാക്കി ബാച്ചുകളിൽ പിയർ കൊച്ച്ഡിബിയെ അന്വേഷിക്കും. ചെയിൻ‌കോഡ് എക്സിക്യൂട്ട് ചെയ്യുമ്പോൾ പിയറിനും കൊച്ച്ഡിബിക്കും ഇടയിൽ ന്യായമായ വലുപ്പത്തിലുള്ള റിസൾട്ട് സെറ്റുകൾ കൈമാറുന്നുവെന്ന് ഈ സ്വഭാവം ഉറപ്പാക്കുന്നു, മാത്രമല്ല ഇത് ചെയിൻ‌കോഡിനും കോളിംഗ് ക്ലയന്റിനും സുതാര്യമാണ്.

പേജിനേഷൻ ഉപയോഗിക്കുന്ന ഒരു ഉദാഹരണം  :doc:`couchdb_tutorial` ട്യൂട്ടോറിയലിൽ ഉൾപ്പെടുത്തിയിരിക്കുന്നു.

CouchDB സൂചികകൾ
~~~~~~~~~~~~~~~

JSON അന്വേഷണങ്ങൾ കാര്യക്ഷമമാക്കുന്നതിന് CouchDB- ലെ സൂചികകൾ ആവശ്യമാണ്, ഒപ്പം ഒരു തരം JSON അന്വേഷണത്തിനും ഇത് ആവശ്യമാണ്. നിങ്ങളുടെ ലെഡ്ജറിൽ‌ ധാരാളം ഡാറ്റ ഉള്ളപ്പോൾ‌ ചെയിൻ‌കോഡിൽ‌ നിന്നും ഡാറ്റ അന്വേഷിക്കാൻ ഇൻ‌ഡെക്സുകൾ‌ നിങ്ങളെ പ്രാപ്‌തമാക്കുന്നു. ``/META-INF/statedb/couchdb/indexes`` ഡയറക്‌ടറിയിൽ‌ ഇൻ‌ഡെക്സുകൾ‌ ചെയിൻ‌കോഡിനൊപ്പം പാക്കേജുചെയ്യാൻ‌ കഴിയും. ഓരോ സൂചികയും സ്വന്തം ടെക്സ്റ്റ് ഫയലിൽ ``*.json`` എക്സ്റ്റൻഷനുമായി നിർവചിക്കേണ്ടതുണ്ട്, `CouchDB index JSON syntax <http://docs.couchdb.org/en/2.1.1/api/database/find.html#db-index>`__.  ഉദാഹരണത്തിന്, മുകളിലുള്ള മാർബിൾ ചോദ്യത്തെ പിന്തുണയ്ക്കുന്നതിന്, ``docType``, ``owner`` ഫീൽഡുകളിലെ ഒരു സാമ്പിൾ സൂചിക നൽകിയിരിക്കുന്നു:

.. code:: bash

  {"index":{"fields":["docType","owner"]},"ddoc":"indexOwnerDoc", "name":"indexOwner","type":"json"}

സാമ്പിൾ സൂചിക `here <https://github.com/hyperledger/fabric-samples/blob/{BRANCH}/chaincode/marbles02/go/META-INF/statedb/couchdb/indexes/indexOwner.json>`__.

ചെയിൻ‌കോഡിന്റെ ``META-INF/statedb/couchdb/indexes`` ഡയറക്‌ടറിയിലെ ഏത് സൂചികയും വിന്യാസത്തിനായി ചെയിൻ‌കോഡിനൊപ്പം പാക്കേജുചെയ്യും. പിയറിൽ‌ ചെയിൻ‌കോഡ് പാക്കേജ് ഇൻ‌സ്റ്റാൾ‌ ചെയ്യുമ്പോഴും ചാനലിനോട് ചെയിൻ‌കോഡ് നിർ‌വ്വചനം പ്രതിജ്ഞാബദ്ധമാകുമ്പോഴും ഇൻ‌ഡെക്സ് ഒരു പിയേഴ്സ് ചാനലിലേക്കും ചെയിൻ‌കോഡ് നിർദ്ദിഷ്ട ഡാറ്റാബേസിലേക്കും വിന്യസിക്കും. നിങ്ങൾ ആദ്യം ചെയിൻ‌കോഡ് ഇൻ‌സ്റ്റാൾ‌ ചെയ്യുകയും ചാനലിലേക്ക് ചെയിൻ‌കോഡ് നിർ‌വ്വചനം നടത്തുകയും ചെയ്താൽ‌, ഇൻ‌ഡെക്സ് കമ്മിറ്റ് സമയത്ത് വിന്യസിക്കും. ചാനലിൽ ഇതിനകം തന്നെ ചെയിൻ‌കോഡ് നിർ‌വ്വചിക്കുകയും ചാനലിൽ‌ ചേർന്ന ഒരു പിയറിൽ‌ ചെയിൻ‌കോഡ് പാക്കേജ് ഇൻ‌സ്റ്റാൾ‌ ചെയ്യുകയും ചെയ്‌തിട്ടുണ്ടെങ്കിൽ‌, ഇൻ‌ഡെക്സ് ചെയിൻ‌കോഡ് ** ഇൻസ്റ്റാളേഷൻ ** സമയത്ത് വിന്യസിക്കും.

വിന്യാസത്തിന് ശേഷം, ചെയിൻകോഡ് അന്വേഷണങ്ങൾ സൂചിക സ്വപ്രേരിതമായി ഉപയോഗിക്കും. ഒരു ചോദ്യത്തിൽ ഉപയോഗിക്കുന്ന ഫീൽഡുകളെ അടിസ്ഥാനമാക്കി ഏത് സൂചികയാണ് ഉപയോഗിക്കേണ്ടതെന്ന് CouchDB ന് യാന്ത്രികമായി നിർണ്ണയിക്കാൻ കഴിയും. പകരമായി, സെലക്ടർ ചോദ്യത്തിൽ ``use_index`` കീവേഡ് ഉപയോഗിച്ച് സൂചിക വ്യക്തമാക്കാം.

ഇൻസ്റ്റാളുചെയ്യുന്ന ചെയിൻകോഡിന്റെ തുടർന്നുള്ള പതിപ്പുകളിലും ഇതേ സൂചിക നിലനിൽക്കാം. സൂചിക മാറ്റുന്നതിന്, സമാന സൂചിക നാമം ഉപയോഗിക്കുക, പക്ഷേ സൂചിക നിർവചനം മാറ്റുക. ഇൻസ്റ്റാളേഷൻ / ഇൻസ്റ്റന്റേഷൻ കഴിഞ്ഞാൽ, ഇൻഡെക്സ് നിർവചനം പിയറിന്റെ സ്റ്റേറ്റ് ഡാറ്റാബേസിലേക്ക് വീണ്ടും വിന്യസിക്കപ്പെടും.

നിങ്ങൾക്ക് ഇതിനകം തന്നെ ഒരു വലിയ അളവിലുള്ള ഡാറ്റ ഉണ്ടെങ്കിൽ, പിന്നീട് ചെയിൻ‌കോഡ് ഇൻസ്റ്റാൾ ചെയ്യുകയാണെങ്കിൽ, ഇൻസ്റ്റാളുചെയ്യുമ്പോൾ സൂചിക സൃഷ്ടിക്കുന്നതിന് കുറച്ച് സമയമെടുക്കും. അതുപോലെ, നിങ്ങൾക്ക് ഇതിനകം തന്നെ ഒരു വലിയ അളവിലുള്ള ഡാറ്റയുണ്ടെങ്കിൽ തുടർന്നുള്ള ചെയിൻ‌കോഡ് പതിപ്പിന്റെ നിർ‌വ്വചനം നടത്തുകയാണെങ്കിൽ‌, ഇൻ‌ഡെക്സ് സൃഷ്‌ടിക്കുന്നതിന് കുറച്ച് സമയമെടുക്കും. ഈ സമയത്ത് സ്റ്റേറ്റ് ഡാറ്റാബേസ് അന്വേഷിക്കുന്ന ചെയിൻകോഡ് ഫംഗ്ഷനുകൾ വിളിക്കുന്നത് ഒഴിവാക്കുക, കാരണം സൂചിക സമാരംഭിക്കുമ്പോൾ ചെയിൻകോഡ് അന്വേഷണം കാലഹരണപ്പെടും. ഇടപാട് പ്രോസസ്സിംഗ് സമയത്ത്, ലെഡ്ജറുമായി ബ്ലോക്കുകൾ പ്രതിജ്ഞാബദ്ധമായതിനാൽ സൂചികകൾ സ്വപ്രേരിതമായി പുതുക്കും. ചെയിൻ‌കോഡ് ഇൻ‌സ്റ്റാളേഷൻ‌ സമയത്ത് പിയർ‌ തകർ‌ന്നാൽ‌, CouchDB സൂചികകൾ‌ സൃഷ്‌ടിച്ചേക്കില്ല. ഇത് സംഭവിക്കുകയാണെങ്കിൽ, സൂചികകൾ സൃഷ്ടിക്കുന്നതിന് നിങ്ങൾ ചെയിൻകോഡ് വീണ്ടും ഇൻസ്റ്റാൾ ചെയ്യേണ്ടതുണ്ട്.

CouchDB കോൺഫിഗറേഷൻ
---------------------

Goleveldb- ൽ നിന്ന് CouchDB- ലേക്ക് ``സ്റ്റേറ്റ് ഡാറ്റാബേസ്`` കോൺഫിഗറേഷൻ ഓപ്ഷൻ മാറ്റിക്കൊണ്ട് CouchDB സ്റ്റേറ്റ് ഡാറ്റാബേസായി പ്രാപ്തമാക്കി. കൂടാതെ, പിയർ ഉപയോഗിക്കുന്ന CouchDB- യിലേക്ക് പോയിന്റുചെയ്യുന്നതിന് ``couchDBAddress`` ക്രമീകരിക്കേണ്ടതുണ്ട്. CouchDB ഒരു ഉപയോക്തൃനാമവും പാസ്‌വേഡും ഉപയോഗിച്ച് ക്രമീകരിച്ചിട്ടുണ്ടെങ്കിൽ ഉപയോക്തൃനാമവും പാസ്‌വേഡ് സവിശേഷതകളും ഒരു അഡ്മിൻ ഉപയോക്തൃനാമവും പാസ്‌വേഡും ഉപയോഗിച്ച് ജനകീയമായിരിക്കണം. അധിക ഓപ്ഷനുകൾ ``couchDBConfig`` വിഭാഗത്തിൽ നൽകിയിട്ടുണ്ട്, അവ സ്ഥലത്ത് രേഖപ്പെടുത്തിയിട്ടുണ്ട്. പിയർ പുനരാരംഭിച്ച ഉടൻ തന്നെ *core.yaml* ലെ മാറ്റങ്ങൾ പ്രാബല്യത്തിൽ വരും.

ഉദാഹരണത്തിന്, core.yaml മൂല്യങ്ങളെ അസാധുവാക്കാൻ നിങ്ങൾക്ക് ഡോക്കർ എൻവയോൺമെന്റ് വേരിയബിളുകളിൽ കടന്നുപോകാൻ കഴിയും ``CORE_LEDGER_STATE_STATEDATABASE``, `` CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS`` എന്നിവ.

*Core.yaml* ൽ നിന്നുള്ള ``സ്റ്റേറ്റ് ഡാറ്റാബേസ്`` വിഭാഗം ചുവടെ:

.. code:: bash

    state:
      # stateDatabase - options are "goleveldb", "CouchDB"
      # goleveldb - default state database stored in goleveldb.
      # CouchDB - store state database in CouchDB
      stateDatabase: goleveldb
      # Limit on the number of records to return per query
      totalQueryLimit: 10000
      couchDBConfig:
         # It is recommended to run CouchDB on the same server as the peer, and
         # not map the CouchDB container port to a server port in docker-compose.
         # Otherwise proper security must be provided on the connection between
         # CouchDB client (on the peer) and server.
         couchDBAddress: couchdb:5984
         # This username must have read and write authority on CouchDB
         username:
         # The password is recommended to pass as an environment variable
         # during start up (e.g. LEDGER_COUCHDBCONFIG_PASSWORD).
         # If it is stored here, the file must be access control protected
         # to prevent unintended users from discovering the password.
         password:
         # Number of retries for CouchDB errors
         maxRetries: 3
         # Number of retries for CouchDB errors during peer startup
         maxRetriesOnStartup: 10
         # CouchDB request timeout (unit: duration, e.g. 20s)
         requestTimeout: 35s
         # Limit on the number of records per each CouchDB query
         # Note that chaincode queries are only bound by totalQueryLimit.
         # Internally the chaincode may execute multiple CouchDB queries,
         # each of size internalQueryLimit.
         internalQueryLimit: 1000
         # Limit on the number of records per CouchDB bulk update batch
         maxBatchUpdateSize: 1000
         # Warm indexes after every N blocks.
         # This option warms any indexes that have been
         # deployed to CouchDB after every N blocks.
         # A value of 1 will warm indexes after every block commit,
         # to ensure fast selector queries.
         # Increasing the value may improve write efficiency of peer and CouchDB,
         # but may degrade query response time.
         warmIndexesAfterNBlocks: 1


ഫാബ്രിക് നൽകിയ ഡോക്കർ ചിത്രങ്ങൾക്ക് പുറത്തുള്ള കൊച്ച്ഡിബി ഇൻസ്റ്റാളേഷനുകൾക്കായി,
അഡ്‌മിൻ ഉപയോക്തൃനാമവും പാസ്‌വേഡും സജ്ജീകരിക്കുന്നതിന് ആ ഇൻസ്റ്റാളേഷന്റെ  `local.ini file of that installation
<http://docs.couchdb.org/en/2.1.1/config/intro.html#configuration-files>`__ എഡിറ്റുചെയ്യണം.

ഡോക്കർ രചിക്കുന്ന സ്ക്രിപ്റ്റുകൾ കണ്ടെയ്നർ സൃഷ്ടിക്കുമ്പോൾ ഉപയോക്തൃനാമവും പാസ്‌വേഡും മാത്രമേ സജ്ജമാക്കൂ. കണ്ടെയ്നർ സൃഷ്ടിച്ചതിനുശേഷം ഉപയോക്തൃനാമമോ പാസ്‌വേഡോ മാറ്റണമെങ്കിൽ *local.ini * ഫയൽ എഡിറ്റുചെയ്യണം.

ഫാബ്രിക്-CouchDB കണ്ടെയ്നർ പോർട്ട് ഒരു ഹോസ്റ്റ് പോർട്ടിലേക്ക് മാപ്പ് ചെയ്യാൻ നിങ്ങൾ തിരഞ്ഞെടുക്കുകയാണെങ്കിൽ, സുരക്ഷാ പ്രത്യാഘാതങ്ങളെക്കുറിച്ച് നിങ്ങൾക്കറിയാമെന്ന് ഉറപ്പാക്കുക. ഒരു വികസന പരിതസ്ഥിതിയിൽ CouchDB കണ്ടെയ്നർ പോർട്ട് മാപ്പുചെയ്യുന്നത് CouchDB REST API നെ തുറന്നുകാട്ടുന്നു, കൂടാതെ CouchDB വെബ് ഇന്റർഫേസ് (ഫോക്സ്റ്റൺ) വഴി ഡാറ്റാബേസ് ദൃശ്യവൽക്കരിക്കാൻ നിങ്ങളെ അനുവദിക്കുന്നു. ഒരു ഉൽ‌പാദന പരിതസ്ഥിതിയിൽ, CouchDB കണ്ടെയ്‌നറിലേക്കുള്ള ആക്‌സസ്സ് നിയന്ത്രിക്കുന്നതിന് നിങ്ങൾ ഹോസ്റ്റ് പോർട്ട് മാപ്പുചെയ്യുന്നതിൽ നിന്ന് വിട്ടുനിൽക്കണം. പിയർക്ക് മാത്രമേ കൊച്ച്ഡിബി കണ്ടെയ്നർ ആക്സസ് ചെയ്യാൻ കഴിയൂ

.. note:: ഓരോ പിയർ സ്റ്റാർട്ടപ്പിലും CouchDB പിയർ ഓപ്ഷനുകൾ വായിക്കുന്നു.

ചോദ്യങ്ങൾക്ക് നല്ല പരിശീലനങ്ങൾ
--------------------------

മുഴുവൻ കൊച്ച്ഡിബി ഡാറ്റാബേസിന്റെയും സ്കാൻ കാരണമാകുന്ന ചോദ്യങ്ങൾക്കായി ചെയിൻകോഡ് ഉപയോഗിക്കുന്നത് ഒഴിവാക്കുക. പൂർണ്ണ ദൈർ‌ഘ്യ ഡാറ്റാബേസ് സ്കാനുകൾ‌ ദൈർ‌ഘ്യമേറിയ പ്രതികരണ സമയങ്ങളിൽ‌ കലാശിക്കുകയും നിങ്ങളുടെ നെറ്റ്‌വർ‌ക്കിന്റെ പ്രകടനത്തെ നശിപ്പിക്കുകയും ചെയ്യും. ദൈർഘ്യമേറിയ ചോദ്യങ്ങൾ ഒഴിവാക്കാൻ നിങ്ങൾക്ക് ഇനിപ്പറയുന്ന ചില നടപടികൾ കൈക്കൊള്ളാം:

- JSON ചോദ്യങ്ങൾ ഉപയോഗിക്കുമ്പോൾ:

 *ചെയിൻകോഡ് പാക്കേജിൽ സൂചികകൾ സൃഷ്ടിക്കുന്നത് ഉറപ്പാക്കുക.
 *പൂർണ്ണ ഡാറ്റാബേസ് സ്കാനുകളിലേക്ക് നയിക്കുന്ന ``$or``, ``$in`` and ``$regex`` എന്നിവ പോലുള്ള അന്വേഷണ ഓപ്പറേറ്റർമാരെ ഒഴിവാക്കുക.

- ശ്രേണി അന്വേഷണങ്ങൾ‌, സംയോജിത കീ ചോദ്യങ്ങൾ‌, JSON ചോദ്യങ്ങൾ‌ എന്നിവയ്‌ക്കായി:

 * ഒരു വലിയ ഫല സെറ്റിന് പകരം പേജിംഗ് പിന്തുണ ഉപയോഗിക്കുക.

- നിങ്ങളുടെ അപ്ലിക്കേഷന്റെ ഭാഗമായി ഒരു ഡാഷ്‌ബോർഡ് നിർമ്മിക്കാനോ മൊത്തം ഡാറ്റ ശേഖരിക്കാനോ നിങ്ങൾ ആഗ്രഹിക്കുന്നുവെങ്കിൽ, നിങ്ങളുടെ ബ്ലോക്ക്‌ചെയിൻ നെറ്റ്‌വർക്കിൽ നിന്നുള്ള ഡാറ്റ പകർത്തുന്ന ഒരു ഓഫ്-ചെയിൻ ഡാറ്റാബേസ് അന്വേഷിക്കാൻ നിങ്ങൾക്ക് കഴിയും. നിങ്ങളുടെ നെറ്റ്‌വർക്കിന്റെ പ്രകടനത്തെ തരംതാഴ്ത്താതെയും ഇടപാടുകൾ തടസ്സപ്പെടുത്താതെയും നിങ്ങളുടെ ആവശ്യങ്ങൾക്കായി ഒപ്റ്റിമൈസ് ചെയ്ത ഒരു ഡാറ്റ സ്റ്റോറിലെ ബ്ലോക്ക്ചെയിൻ ഡാറ്റ അന്വേഷിക്കാനും വിശകലനം ചെയ്യാനും ഇത് നിങ്ങളെ അനുവദിക്കുന്നു. ഇത് നേടുന്നതിന്, ഒരു ഓഫ്-ചെയിൻ ഡാറ്റാബേസിലേക്കോ അനലിറ്റിക്സ് എഞ്ചിനിലേക്കോ ഇടപാട് ഡാറ്റ എഴുതുന്നതിന് അപ്ലിക്കേഷനുകൾ ബ്ലോക്ക് അല്ലെങ്കിൽ ചെയിൻകോഡ് ഇവന്റുകൾ ഉപയോഗിച്ചേക്കാം. ലഭിച്ച ഓരോ ബ്ലോക്കിനും, ബ്ലോക്ക് ലിസണർ ആപ്ലിക്കേഷൻ ബ്ലോക്ക് ഇടപാടുകളിലൂടെ ആവർത്തിക്കുകയും സാധുവായ ഓരോ ഇടപാടിന്റെയും ``rwset`` ൽ നിന്നുള്ള കീ / മൂല്യം റൈറ്റുകൾ ഉപയോഗിച്ച് ഒരു ഡാറ്റ സ്റ്റോർ നിർമ്മിക്കുകയും ചെയ്യും. ഡൗൺസ്ട്രീമു  ഡാറ്റാ സ്റ്റോറുകളുടെ സമഗ്രത ഉറപ്പാക്കുന്നതിന്  :doc:`peer_event_services`  വീണ്ടും പ്ലേ ചെയ്യാവുന്ന ഇവന്റുകൾ നൽകുന്നു.

.. ക്രിയേറ്റീവ് കോമൺസ് ആട്രിബ്യൂഷൻ 4.0 അന്താരാഷ്ട്ര ലൈസൻസിന് കീഴിൽ ലൈസൻസ് നേടി
 https://creativecommons.org/licenses/by/4.0/
