
CouchDB ഉപയോഗിക്കുന്നു
=============

ഹൈപ്പർലെഡ്ജർ ഫാബ്രിക്കുള്ള സ്റ്റേറ്റ് ഡാറ്റാബേസായി കൊച്ച്ഡിബി ഉപയോഗിക്കുന്നതിന് ആവശ്യമായ ഘട്ടങ്ങളെ ഈ ട്യൂട്ടോറിയൽ വിവരിക്കും. ഇപ്പോൾ, നിങ്ങൾക്ക് ഫാബ്രിക് ആശയങ്ങൾ പരിചയമുണ്ടായിരിക്കുകയും ചില സാമ്പിളുകളും ട്യൂട്ടോറിയലുകളും പര്യവേക്ഷണം ചെയ്യുകയും വേണം.

.. note:: ഈ നിർദ്ദേശങ്ങൾ ഫാബ്രിക് v2.0 പതിപ്പിൽ അവതരിപ്പിച്ച പുതിയ ഫാബ്രിക് ചെയിൻകോഡ് ജീവിതചക്രം ഉപയോഗിക്കുന്നു. ചെയിൻ‌കോഡിനൊപ്പം ഇൻ‌ഡെക്സുകൾ‌ ഉപയോഗിക്കുന്നതിന് മുമ്പത്തെ ജീവിതചക്രം മോഡൽ‌ ഉപയോഗിക്കാൻ‌ നിങ്ങൾ‌ താൽ‌പ്പര്യപ്പെടുന്നെങ്കിൽ‌, `യൂസിംഗ് കൗച്ച്ഡിബി  `Using CouchDB <https://hyperledger-fabric.readthedocs.io/en/release-1.4/couchdb_tutorial.html>`__.

ട്യൂട്ടോറിയൽ ഇനിപ്പറയുന്ന ഘട്ടങ്ങളിലൂടെ നിങ്ങളെ കൊണ്ടുപോകും:

#. :ref:`cdb-enable-couch`
#. :ref:`cdb-create-index`
#. :ref:`cdb-add-index`
#. :ref:`cdb-install-deploy`
#. :ref:`cdb-query`
#. :ref:`cdb-best`
#. :ref:`cdb-pagination`
#. :ref:`cdb-update-index`
#. :ref:`cdb-delete-index`


CouchDB- യിലേക്ക് കൂടുതൽ ആഴത്തിൽ പ്രവേശിക്കുന്നതിന്  :doc:`couchdb_as_state_database` കാണുക, ഫാബ്രിക് ലെഡ്ജറിനെക്കുറിച്ചുള്ള കൂടുതൽ വിവരങ്ങൾക്ക്  `Ledger <ledger/ledger.html>`_ വിഷയം കാണുക. നിങ്ങളുടെ ബ്ലോക്ക്‌ചെയിൻ നെറ്റ്‌വർക്കിൽ CouchDB എങ്ങനെ പ്രയോജനപ്പെടുത്താം എന്നതിനെക്കുറിച്ചുള്ള വിശദാംശങ്ങൾക്ക് ചുവടെയുള്ള ട്യൂട്ടോറിയൽ പിന്തുടരുക.

ഈ ട്യൂട്ടോറിയലിലുടനീളം, `Marbles sample <https://github.com/hyperledger/fabric-samples/blob/{BRANCH}/chaincode/marbles02/go/marbles_chaincode.go>`__  എങ്ങനെ ഉപയോഗിക്കാമെന്ന് തെളിയിക്കാൻ ഞങ്ങളുടെ ഉപയോഗ കേസായി ഉപയോഗിക്കും. ഫാബ്രിക്കിനൊപ്പം കൊച്ച്ഡിബി ഉപയോഗിക്കുക, മാർബിൾസിനെ ഫാബ്രിക് ടെസ്റ്റ് നെറ്റ്‌വർക്കിലേക്ക് വിന്യസിക്കും. നിങ്ങൾ ചുമതല പൂർത്തിയാക്കിയിരിക്കണം  :doc:`install` .

എന്തുകൊണ്ട് CouchDB?
~~~~~~~~~~~~

ഫാബ്രിക് രണ്ട് തരം പിയർ ഡാറ്റാബേസുകളെ പിന്തുണയ്ക്കുന്നു. പിയർ നോഡിൽ ഉൾച്ചേർത്ത സ്ഥിരസ്ഥിതി ഡാറ്റാബേസാണ് ലെവൽ ഡിബി. ലെവൽ‌ഡിബി ചെയിൻ‌കോഡ് ഡാറ്റയെ ലളിതമായ കീ-മൂല്യ ജോഡികളായി സംഭരിക്കുന്നു, മാത്രമല്ല കീ, കീ ശ്രേണി, സംയോജിത കീ ചോദ്യങ്ങൾ എന്നിവയെ മാത്രമേ പിന്തുണയ്ക്കൂ. ലെജറിലെ ഡാറ്റയെ JSON ആയി മോഡൽ ചെയ്യാനും ഡാറ്റാ മൂല്യങ്ങൾക്കെതിരെ സമൃദ്ധമായ ചോദ്യങ്ങൾ നൽകാനും അനുവദിക്കുന്ന ഒരു ഓപ്‌ഷണൽ, ഇതര സംസ്ഥാന ഡാറ്റാബേസാണ് കോച്ച്ഡിബി. കീകളേക്കാൾ. ചോദ്യങ്ങൾ‌ കൂടുതൽ‌ കാര്യക്ഷമമാക്കുന്നതിനും വലിയ ഡാറ്റാസെറ്റുകൾ‌ അന്വേഷിക്കാൻ‌ നിങ്ങളെ പ്രാപ്‌തമാക്കുന്നതിനും നിങ്ങളുടെ ചെയിൻ‌കോഡിനൊപ്പം ഇൻ‌ഡെക്സുകൾ‌ വിന്യസിക്കാനും CouchDB നിങ്ങളെ അനുവദിക്കുന്നു.

CouchDB- യുടെ ഉള്ളടക്കത്തെ അടിസ്ഥാനമാക്കിയുള്ള JSON അന്വേഷണങ്ങൾ പ്രയോജനപ്പെടുത്തുന്നതിന്, നിങ്ങളുടെ ഡാറ്റ JSON ഫോർമാറ്റിൽ മാതൃകയാക്കണം. നിങ്ങളുടെ നെറ്റ്‌വർക്ക് സജ്ജീകരിക്കുന്നതിന് മുമ്പ് ലെവൽഡിബി അല്ലെങ്കിൽ കൊച്ച്ഡിബി ഉപയോഗിക്കണമോ എന്ന് നിങ്ങൾ തീരുമാനിക്കണം. ഡാറ്റ അനുയോജ്യത പ്രശ്‌നങ്ങൾ കാരണം ലെവൽഡിബി ഉപയോഗിക്കുന്നതിൽ നിന്ന് കൊച്ച്ഡിബിയിലേക്ക് ഒരു പിയർ മാറുന്നത് പിന്തുണയ്‌ക്കുന്നില്ല. നെറ്റ്‌വർക്കിലെ എല്ലാ സമപ്രായക്കാരും ഒരേ ഡാറ്റാബേസ് തരം ഉപയോഗിക്കണം. നിങ്ങൾക്ക് JSON, ബൈനറി ഡാറ്റ മൂല്യങ്ങളുടെ മിശ്രിതമുണ്ടെങ്കിൽ, നിങ്ങൾക്ക് ഇപ്പോഴും CouchDB ഉപയോഗിക്കാം, എന്നിരുന്നാലും കീ, കീ ശ്രേണി, സംയോജിത കീ ചോദ്യങ്ങൾ എന്നിവ അടിസ്ഥാനമാക്കി മാത്രമേ ബൈനറി മൂല്യങ്ങൾ അന്വേഷിക്കാൻ കഴിയൂ.

.. _cdb-enable-couch:

ഹൈപ്പർലെഡ്ജർ ഫാബ്രിക്കിൽ കൊച്ച്ഡിബി പ്രവർത്തനക്ഷമമാക്കുക
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

പിയറിനൊപ്പം ഒരു പ്രത്യേക ഡാറ്റാബേസ് പ്രക്രിയയായി CouchDB പ്രവർത്തിക്കുന്നു. സജ്ജീകരണം, മാനേജുമെന്റ്, പ്രവർത്തനങ്ങൾ എന്നിവയിൽ കൂടുതൽ പരിഗണനകളുണ്ട്. `CouchDB <https://hub.docker.com/_/couchdb/>`__ ന്റെ ഒരു ഡോക്കർ ചിത്രം ലഭ്യമാണ്, മാത്രമല്ല ഇത് പിയറിന്റെ അതേ സെർവറിൽ പ്രവർത്തിപ്പിക്കാൻ ഞങ്ങൾ ശുപാർശ ചെയ്യുന്നു. കൊച്ച്ഡിബി കണ്ടെയ്നറിലേക്ക് പോയിന്റുചെയ്യുന്നതിന്  ``core.yaml`` ൽ കാണുന്ന കോൺഫിഗറേഷൻ മാറ്റിക്കൊണ്ട് നിങ്ങൾ ഒരു പിയറിന് ഒരു കൊച്ച്ഡിബി കണ്ടെയ്നർ സജ്ജീകരിക്കുകയും ഓരോ പിയർ കണ്ടെയ്നറും അപ്‌ഡേറ്റ് ചെയ്യുകയും വേണം. എൻ‌വയോൺ‌മെൻറ് വേരിയബിൾ‌ FABRIC_CFG_PATH വ്യക്തമാക്കിയ ഡയറക്‌ടറിയിൽ‌ ``core.yaml`` ഫയൽ‌ സ്ഥിതിചെയ്യണം:

* ഡോക്കർ‌ വിന്യാസങ്ങൾ‌ക്കായി, ``core.yaml`` മുൻ‌കൂട്ടി ക്രമീകരിച്ച് പിയർ കണ്ടെയ്‌നറിൽ‌ ``FABRIC_CFG_PATH`` ഫോൾ‌ഡറിൽ‌ സ്ഥിതിചെയ്യുന്നു. എന്നിരുന്നാലും, ഡോക്കർ എൻ‌വയോൺ‌മെൻറുകൾ‌ ഉപയോഗിക്കുമ്പോൾ‌, core.yaml നെ അസാധുവാക്കുന്നതിന് ``docker-compose-couch.yaml`` എഡിറ്റുചെയ്യുന്നതിലൂടെ നിങ്ങൾ‌ സാധാരണ എൻ‌വയോൺ‌മെൻറ് വേരിയബിളുകൾ‌ നൽ‌കുന്നു.

* നേറ്റീവ് ബൈനറി വിന്യാസങ്ങൾക്കായി, റിലീസ് ആർട്ടിഫാക്റ്റ് വിതരണത്തിനൊപ്പം ``core.yaml`` ഉൾപ്പെടുത്തിയിട്ടുണ്ട്.

``core.yaml`` ന്റെ ``സ്റ്റേറ്റ് ഡാറ്റാബേസ്`` വിഭാഗം എഡിറ്റുചെയ്യുക. ``സ്റ്റേറ്റ് ഡാറ്റാബേസ്`` ആയി ``കൗച്ഡിബി`` വ്യക്തമാക്കി അനുബന്ധ ``കൗച്ച് ഡി.ബി.കോൺഫിഗ്`` പ്രോപ്പർട്ടികൾ പൂരിപ്പിക്കുക. കൂടുതൽ വിവരങ്ങൾക്ക്, `CouchDB configuration <couchdb_as_state_database.html#couchdb-configuration>`__ കാണുക.

.. _cdb-create-index:

ഒരു സൂചിക സൃഷ്ടിക്കുക
~~~~~~~~~~~~~~~

സൂചികകൾ‌ പ്രധാനമായിരിക്കുന്നത് എന്തുകൊണ്ട്?

എല്ലാ ചോദ്യങ്ങളും ഉപയോഗിച്ച് ഓരോ വരിയും പരിശോധിക്കാതെ തന്നെ ഒരു ഡാറ്റാബേസ് അന്വേഷിക്കാൻ സൂചികകൾ അനുവദിക്കുന്നു, ഇത് വേഗത്തിലും കാര്യക്ഷമമായും പ്രവർത്തിക്കുന്നു. സാധാരണഗതിയിൽ, ഡാറ്റ കൂടുതൽ കാര്യക്ഷമമായി അന്വേഷിക്കാൻ അനുവദിക്കുന്ന പതിവ് അന്വേഷണ മാനദണ്ഡങ്ങൾക്കാണ് സൂചികകൾ നിർമ്മിച്ചിരിക്കുന്നത്. CouchDB- യുടെ പ്രധാന നേട്ടം കൈവരിക്കുന്നതിന് -- JSON ഡാറ്റയ്‌ക്കെതിരെ സമൃദ്ധമായ ചോദ്യങ്ങൾ നടത്താനുള്ള കഴിവ് -- സൂചികകൾ ആവശ്യമില്ല, പക്ഷേ അവ പ്രകടനത്തിനായി ശക്തമായി ശുപാർശ ചെയ്യുന്നു. കൂടാതെ, ഒരു ചോദ്യത്തിൽ തരംതിരിക്കൽ ആവശ്യമാണെങ്കിൽ, CouchDB ന് അടുക്കിയ ഫീൽഡുകളുടെ ഒരു സൂചിക ആവശ്യമാണ്.

.. note::

ഇൻ‌ഡെക്സ് ഇല്ലാത്ത സമൃദ്ധമായ ചോദ്യങ്ങൾ‌ പ്രവർ‌ത്തിക്കും, പക്ഷേ ഇൻ‌ഡെക്സ് കണ്ടെത്തിയില്ലെന്ന് CouchDB ലോഗിൽ‌ ഒരു മുന്നറിയിപ്പ് നൽ‌കാം. എന്നിരുന്നാലും, ഒരു സമ്പന്നമായ ചോദ്യത്തിൽ ഒരു തരം സ്പെസിഫിക്കേഷൻ ഉൾപ്പെടുന്നുവെങ്കിൽ, ആ ഫീൽഡിലെ ഒരു സൂചിക ആവശ്യമാണ്; അല്ലാത്തപക്ഷം, ചോദ്യം പരാജയപ്പെടുകയും ഒരു പിശക് എറിയുകയും ചെയ്യും.

ഒരു സൂചിക നിർമ്മിക്കുന്നത് തെളിയിക്കാൻ, ഞങ്ങൾ 
To demonstrate building an index, we will use the data from the `Marbles sample <https://github.com/hyperledger/fabric-samples/blob/{BRANCH}/chaincode/marbles02/go/marbles_chaincode.go>`__ ൽ നിന്നുള്ള ഡാറ്റ ഉപയോഗിക്കും.

ഈ ഉദാഹരണത്തിൽ, മാർബിൾസ് ഡാറ്റാ ഘടന നിർവചിച്ചിരിക്കുന്നത്:

.. code:: javascript

  type marble struct {
	   ObjectType string `json:"docType"` //സ്റ്റേറ്റ് ഡാറ്റാബേസിലെ വിവിധ തരം വസ്തുക്കളെ വേർതിരിച്ചറിയാൻ docType ഉപയോഗിക്കുന്നു
	   Name       string `json:"name"`    //കേസ് കുതിച്ചുകയറാതിരിക്കാൻ ഫീൽഡ് ടാഗുകൾ ആവശ്യമാണ്
	   Color      string `json:"color"`
           Size       int    `json:"size"`
           Owner      string `json:"owner"`
  }


ഈ ഘടനയിൽ, ആട്രിബ്യൂട്ടുകൾ ( ``docType`` , ``name`` , ``color`` , ``size`` , ``owner`` ) അസറ്റുമായി ബന്ധപ്പെട്ട ലെഡ്ജർ ഡാറ്റയെ നിർവചിക്കുന്നു. വെവ്വേറെ അന്വേഷിക്കേണ്ടിവരുന്ന വ്യത്യസ്ത ഡാറ്റാ തരങ്ങളെ വേർതിരിച്ചറിയാൻ ചെയിൻ‌കോഡിൽ‌ ഉപയോഗിക്കുന്ന ഒരു പാറ്റേണാണ്  ``docType`` ആട്രിബ്യൂട്ട്.    CouchDB ഉപയോഗിക്കുമ്പോൾ, ചെയിൻ‌കോഡ് നെയിംസ്‌പെയ്‌സിൽ ഓരോ തരം പ്രമാണത്തെയും വേർതിരിച്ചറിയാൻ ഈ ``docType`` ആട്രിബ്യൂട്ട് ഉൾപ്പെടുത്താൻ ശുപാർശ ചെയ്‌തു. (ഓരോ ചെയിൻ‌കോഡിനെയും അതിന്റേതായ കൊച്ച്ഡിബി ഡാറ്റാബേസായി പ്രതിനിധീകരിക്കുന്നു, അതായത്, ഓരോ ചെയിൻ‌കോഡിനും കീകൾ‌ക്ക് അതിന്റേതായ നെയിംസ്‌പെയ്‌സ് ഉണ്ട്.)

മാർബിൾസ് ഡാറ്റാ ഘടനയുമായി ബന്ധപ്പെട്ട്, ഈ document/asset ഒരു മാർബിൾ അസറ്റാണെന്ന് തിരിച്ചറിയാൻ  ``docType`` ഉപയോഗിക്കുന്നു. ചെയിൻ‌കോഡ് ഡാറ്റാബേസിൽ‌ മറ്റ് documents/assets ഉണ്ടാകാം. ഡാറ്റാബേസിലെ പ്രമാണങ്ങൾ‌ ഈ ആട്രിബ്യൂട്ട് മൂല്യങ്ങൾ‌ക്കെതിരെയും തിരയാൻ‌ കഴിയും.

ചെയിൻ‌കോഡ് അന്വേഷണങ്ങളിൽ‌ ഉപയോഗിക്കുന്നതിന് ഒരു സൂചിക നിർ‌വ്വചിക്കുമ്പോൾ‌, ഓരോന്നും സ്വന്തം ടെക്സ്റ്റ് ഫയലിൽ‌  `* .json` എക്സ്റ്റൻഷനുമായി നിർ‌വ്വചിക്കണം, കൂടാതെ ഇൻ‌ഡെക്സ് നിർ‌വ്വചനം കൊച്ച്ഡിബി ഇൻ‌ഡെക്സ് JSON ഫോർ‌മാറ്റിൽ‌ ഫോർ‌മാറ്റ് ചെയ്യണം.

ഒരു സൂചിക നിർവചിക്കുന്നതിന്, മൂന്ന് വിവരങ്ങൾ ആവശ്യമാണ്:

 * `fields` : ഇവ പതിവായി ചോദിക്കുന്ന ഫീൽ‌ഡുകളാണ്
 * `name` : സൂചികയുടെ പേര്
 *  `type` : എല്ലായ്പ്പോഴും ഈ സന്ദർഭത്തിൽ json

ഉദാഹരണത്തിന്, `` foo`` എന്ന് പേരുള്ള ഒരു ഫീൽഡിനായി `` foo-index`` എന്ന് പേരുള്ള ലളിതമായ സൂചിക.

.. code:: json

    {
        "index": {
            "fields": ["foo"]
        },
        "name" : "foo-index",
        "type" : "json"
    }

വേണമെങ്കിൽ ഡിസൈൻ ഡോക്യുമെന്റ് ആട്രിബ്യൂട്ട്  ``ddoc``  സൂചിക നിർവചനത്തിൽ വ്യക്തമാക്കാം. ഒരു `design document <http://guide.couchdb.org/draft/design.html>`__ എന്നത് സൂചികകൾ ഉൾക്കൊള്ളുന്നതിനായി രൂപകൽപ്പന ചെയ്‌തിരിക്കുന്ന CouchDB നിർമ്മിതിയാണ്. കാര്യക്ഷമതയ്ക്കായി ഇൻഡെക്സുകളെ ഡിസൈൻ ഡോക്യുമെന്റുകളായി തരം തിരിക്കാം, പക്ഷേ ഡിസൈൻ പ്രമാണത്തിന് ഒരു സൂചികയാണ് കൊച്ച്ഡിബി ശുപാർശ ചെയ്യുന്നത്.

.. tip:: ഒരു സൂചിക നിർവചിക്കുമ്പോൾ സൂചിക നാമത്തിനൊപ്പം  ``ddoc`` ആട്രിബ്യൂട്ടും മൂല്യവും ഉൾപ്പെടുത്തുന്നത് നല്ല പരിശീലനമാണ്. ആവശ്യമെങ്കിൽ നിങ്ങൾക്ക് പിന്നീട് സൂചിക അപ്‌ഡേറ്റ് ചെയ്യാൻ കഴിയുമെന്ന് ഉറപ്പാക്കാൻ ഈ ആട്രിബ്യൂട്ട് ഉൾപ്പെടുത്തേണ്ടത് പ്രധാനമാണ്. ഒരു ചോദ്യത്തിൽ ഏത് സൂചിക ഉപയോഗിക്കണമെന്ന് വ്യക്തമായി വ്യക്തമാക്കാനുള്ള കഴിവും ഇത് നൽകുന്നു.


ഒന്നിലധികം ഫീൽ‌ഡുകൾ‌  ``docType`` , ``owner``` എന്നിവ ഉപയോഗിച്ച്  ``indexOwner`` എന്ന സൂചിക നാമമുള്ള മാർ‌ബിൾ‌സ് സാമ്പിളിൽ‌ നിന്നുള്ള ഇൻ‌ഡെക്സ് നിർ‌വചനത്തിന്റെ മറ്റൊരു ഉദാഹരണം ഇതാ  ``ddoc`` ആട്രിബ്യൂട്ട് ഉൾ‌പ്പെടുന്നു:

.. _indexExample:


.. code:: json

  {
    "index":{
        "fields":["docType","owner"] // അന്വേഷിക്കേണ്ട ഫീൽഡുകളുടെ പേരുകൾ
    },
    "ddoc":"indexOwnerDoc", // (optional) സൂചിക സൃഷ്ടിക്കുന്ന ഡിസൈൻ പ്രമാണത്തിന്റെ പേര്.
    "name":"indexOwner",
    "type":"json"
  }

മുകളിലുള്ള ഉദാഹരണത്തിൽ,  ``indexOwnerDoc`` എന്ന ഡിസൈൻ പ്രമാണം ഇതിനകം നിലവിലില്ലെങ്കിൽ, സൂചിക വിന്യസിക്കുമ്പോൾ അത് യാന്ത്രികമായി സൃഷ്ടിക്കപ്പെടും. ഫീൽ‌ഡുകളുടെ പട്ടികയിൽ‌ വ്യക്തമാക്കിയ ഒന്നോ അതിലധികമോ ആട്രിബ്യൂട്ടുകൾ‌ ഉപയോഗിച്ച് ഒരു സൂചിക നിർമ്മിക്കാൻ‌ കഴിയും കൂടാതെ ഏതെങ്കിലും ആട്രിബ്യൂട്ടുകൾ‌ വ്യക്തമാക്കാനും കഴിയും. ഒരേ ഡോക്‌ടൈപ്പിനായി ഒന്നിലധികം സൂചികകളിൽ ഒരു ആട്രിബ്യൂട്ട് നിലനിൽക്കാം. ഇനിപ്പറയുന്ന ഉദാഹരണത്തിൽ,  ``index1``ൽ  ``owner`` എന്ന ആട്രിബ്യൂട്ട് മാത്രമേ ഉൾപ്പെടുന്നുള്ളൂ,  ``index2`` ൽ  ``owner and color`` ആട്രിബ്യൂട്ടുകളും ``index3`` ആട്രിബ്യൂട്ടുകളും ഉൾപ്പെടുന്നു  ``owner, color and size`` . കൂടാതെ, CouchDB ശുപാർശചെയ്‌ത പരിശീലനം പിന്തുടർന്ന് ഓരോ സൂചിക നിർവചനത്തിനും അതിന്റേതായ  ``ddoc`` മൂല്യമുണ്ടെന്ന് ശ്രദ്ധിക്കുക.

.. code:: json

  {
    "index":{
        "fields":["owner"] // Names of the fields to be queried
    },
    "ddoc":"index1Doc", // (optional) Name of the design document in which the index will be created.
    "name":"index1",
    "type":"json"
  }

  {
    "index":{
        "fields":["owner", "color"] // Names of the fields to be queried
    },
    "ddoc":"index2Doc", // (optional) Name of the design document in which the index will be created.
    "name":"index2",
    "type":"json"
  }

  {
    "index":{
        "fields":["owner", "color", "size"] // Names of the fields to be queried
    },
    "ddoc":"index3Doc", // (optional) Name of the design document in which the index will be created.
    "name":"index3",
    "type":"json"
  }


പൊതുവേ, അന്വേഷണ ഫിൽ‌റ്ററുകളിലും തരങ്ങളിലും ഉപയോഗിക്കുന്ന ഫീൽ‌ഡുകളുമായി പൊരുത്തപ്പെടുന്നതിന് നിങ്ങൾ‌ ഇൻ‌ഡെക്സ് ഫീൽ‌ഡുകൾ‌ മാതൃകയാക്കണം. JSON ഫോർമാറ്റിൽ ഒരു സൂചിക നിർമ്മിക്കുന്നതിനെക്കുറിച്ചുള്ള കൂടുതൽ വിവരങ്ങൾക്ക്  `CouchDB documentation <http://docs.couchdb.org/en/latest/api/database/find.html#db-index>`__ കാണുക.

ഇൻ‌ഡെക്‌സിംഗിനെക്കുറിച്ചുള്ള ഒരു അന്തിമ വാക്ക്,  ``ഇൻ‌ഡെക്സ് വാർമിംഗ്``  എന്ന പാറ്റേൺ ഉപയോഗിച്ച് ഡാറ്റാബേസിലെ പ്രമാണങ്ങൾ ഇൻഡെക്‌സ് ചെയ്യുന്നതിന് ഫാബ്രിക് ശ്രദ്ധിക്കുന്നു. അടുത്ത ചോദ്യം വരെ CouchDB സാധാരണയായി പുതിയതോ അപ്‌ഡേറ്റുചെയ്‌തതോ ആയ പ്രമാണങ്ങൾ സൂചികയിലാക്കില്ല. ഡാറ്റയുടെ ഓരോ ബ്ലോക്കും പ്രതിജ്ഞാബദ്ധമായതിനുശേഷം ഒരു സൂചിക അപ്‌ഡേറ്റ് അഭ്യർത്ഥിച്ചുകൊണ്ട് സൂചികകൾ  'warm' നിൽക്കുന്നുവെന്ന് ഫാബ്രിക് ഉറപ്പാക്കുന്നു. അന്വേഷണം പ്രവർത്തിപ്പിക്കുന്നതിന് മുമ്പ് സൂചിക രേഖകൾ ആവശ്യമില്ലാത്തതിനാൽ ചോദ്യങ്ങൾ വേഗത്തിലാണെന്ന് ഇത് ഉറപ്പാക്കുന്നു. സംസ്ഥാന ഡാറ്റാബേസിലേക്ക് പുതിയ റെക്കോർഡുകൾ ചേർക്കുമ്പോഴെല്ലാം ഈ പ്രക്രിയ സൂചിക നിലവിലുള്ളതും പുതുക്കുന്നതുമാണ്.

.. _cdb-add-index:


നിങ്ങളുടെ ചെയിൻകോഡ് ഫോൾഡറിലേക്ക് സൂചിക ചേർക്കുക
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

നിങ്ങൾ‌ ഒരു ഇൻ‌ഡെക്സ് അന്തിമമാക്കി കഴിഞ്ഞാൽ‌, വിന്യാസത്തിനായി നിങ്ങളുടെ മെയിൻ‌ഡാറ്റ ഫോൾ‌ഡറിൽ‌ സ്ഥാപിച്ച് നിങ്ങളുടെ ചെയിൻ‌കോഡ് ഉപയോഗിച്ച് പാക്കേജ് ചെയ്യേണ്ടതുണ്ട്. :doc:`commands/peerlifecycle` കമാൻഡ് ഉപയോഗിച്ച് നിങ്ങൾക്ക് ചെയിൻകോഡ് ഇൻസ്റ്റാൾ ചെയ്യാൻ കഴിയും. JSON ഇൻ‌ഡെക്സ് ഫയലുകൾ‌ ചെയിൻ‌കോഡ് താമസിക്കുന്ന ഡയറക്‌ടറിയിൽ‌ സ്ഥിതിചെയ്യുന്ന ``META-INF/statedb/couchdb/indexes`` പാതയിലാണ് സ്ഥിതിചെയ്യേണ്ടത്.

ചുവടെയുള്ള `Marbles sample <https://github.com/hyperledger/fabric-samples/tree/{BRANCH}/chaincode/marbles02/go>`__ ചുവടെ സൂചിക ചെയിൻ‌കോഡുമായി എങ്ങനെ പാക്കേജുചെയ്യുന്നുവെന്ന് വ്യക്തമാക്കുന്നു.

.. image:: images/couchdb_tutorial_pkg_example.png
  :scale: 100%
  :align: center
  :alt: Marbles Chaincode Index Package

ഈ സാമ്പിളിൽ indexOwnerDoc എന്ന ഒരു സൂചിക ഉൾപ്പെടുന്നു:

.. code:: json

  {"index":{"fields":["docType","owner"]},"ddoc":"indexOwnerDoc", "name":"indexOwner","type":"json"}


നെറ്റ്‌വർക്ക് ആരംഭിക്കുക
-----------------

:guilabel:`Try it yourself`


ഞങ്ങൾ ഫാബ്രിക് ടെസ്റ്റ് ശൃംഖല കൊണ്ടുവന്ന് മാർബിൾസ് ചെയിനോക്ഡ് വിന്യസിക്കാൻ ഉപയോഗിക്കും. ഫാബ്രിക് സാമ്പിളുകളിലെ `ടെസ്റ്റ്-നെറ്റ്‌വർക്ക്` ഡയറക്‌ടറിയിലേക്ക് നാവിഗേറ്റുചെയ്യുന്നതിന് ഇനിപ്പറയുന്ന കമാൻഡ് ഉപയോഗിക്കുക:

.. code:: bash

    cd fabric-samples/test-network

ഈ ട്യൂട്ടോറിയലിനായി, അറിയപ്പെടുന്ന ഒരു പ്രാരംഭ അവസ്ഥയിൽ നിന്ന് പ്രവർത്തിക്കാൻ ഞങ്ങൾ ആഗ്രഹിക്കുന്നു. ഇനിപ്പറയുന്ന കമാൻഡ് ഏതെങ്കിലും സജീവമോ പഴകിയതോ ആയ ഡോക്കർ കണ്ടെയ്‌നറുകളെ നശിപ്പിക്കുകയും മുമ്പ് സൃഷ്‌ടിച്ച കരക act ശല വസ്തുക്കൾ നീക്കംചെയ്യുകയും ചെയ്യും:

.. code:: bash

    ./network.sh down

നിങ്ങൾ മുമ്പ് ട്യൂട്ടോറിയലിലൂടെ പ്രവർത്തിച്ചിട്ടില്ലെങ്കിൽ, ഞങ്ങൾ നെറ്റ്വർക്കിലേക്ക് വിന്യസിക്കുന്നതിന് മുമ്പ് നിങ്ങൾ ചെയിൻകോഡ് ഡിപൻഡൻസികൾ വെണ്ടർ ചെയ്യേണ്ടതുണ്ട്. ഇനിപ്പറയുന്ന കമാൻഡുകൾ പ്രവർത്തിപ്പിക്കുക:

.. code:: bash

    cd ../chaincode/marbles02/go
    GO111MODULE=on go mod vendor
    cd ../../../test-network

`ടെസ്റ്റ്-നെറ്റ്‌വർക്ക്` ഡയറക്‌ടറിയിൽ നിന്ന്, ഇനിപ്പറയുന്ന കമാൻഡ് ഉപയോഗിച്ച് ടെസ്റ്റ് നെറ്റ്‌വർക്ക് CouchDB ഉപയോഗിച്ച് വിന്യസിക്കുക:

.. code:: bash

    ./network.sh up createChannel -s couchdb

ഇത് സംസ്ഥാന ഡാറ്റാബേസായി CouchDB ഉപയോഗിക്കുന്ന രണ്ട് ഫാബ്രിക് പിയർ നോഡുകൾ സൃഷ്ടിക്കും. ഇത് ഒരു ഓർഡറിംഗ് നോഡും ``mychannel`` എന്ന ഒരൊറ്റ ചാനലും സൃഷ്ടിക്കും.

.. _cdb-install-deploy:

ചെയിൻകോഡ് ഇൻസ്റ്റാൾ ചെയ്ത് നിർവചിക്കുക
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

ക്ലയൻറ് ആപ്ലിക്കേഷനുകൾ ചെയിൻകോഡ് വഴി ബ്ലോക്ക്ചെയിൻ ലെഡ്ജറുമായി സംവദിക്കുന്നു. അതിനാൽ ഞങ്ങളുടെ ഇടപാടുകൾ നടപ്പിലാക്കുകയും അംഗീകരിക്കുകയും ചെയ്യുന്ന ഓരോ പിയറിലും ഞങ്ങൾ ഒരു ചെയിൻകോഡ് ഇൻസ്റ്റാൾ ചെയ്യേണ്ടതുണ്ട്. എന്നിരുന്നാലും, ഞങ്ങളുടെ ചെയിൻ‌കോഡുമായി സംവദിക്കുന്നതിന് മുമ്പ്, ചാനൽ‌ അംഗങ്ങൾ‌ ചെയിൻ‌കോഡ് ഭരണം സ്ഥാപിക്കുന്ന ഒരു ചെയിൻ‌കോഡ് നിർ‌വ്വചനം അംഗീകരിക്കേണ്ടതുണ്ട്. മുമ്പത്തെ വിഭാഗത്തിൽ‌, ചെയിൻ‌കോഡ് ഫോൾ‌ഡറിലേക്ക് ഇൻ‌ഡെക്സ് എങ്ങനെ ചേർക്കാമെന്ന് ഞങ്ങൾ‌ തെളിയിച്ചു, അങ്ങനെ ഇൻ‌ഡെക്സ് ചെയിൻ‌കോഡിനൊപ്പം വിന്യസിക്കും.

നമ്മളുടെ  പിയറുകളിൽ ഇൻ‌സ്റ്റാൾ‌ ചെയ്യുന്നതിന് മുമ്പ് ചെയിൻ‌കോഡ് പാക്കേജു ചെയ്യേണ്ടതുണ്ട്. മാർബിൾസ് ചെയിൻ‌കോഡ് പാക്കേജ് ചെയ്യുന്നതിന് നമുക്ക് `peer lifecycle chaincode package <commands/peerlifecycle.html#peer-lifecycle-chaincode-package>`__ കമാൻഡ് ഉപയോഗിക്കാം.

:guilabel:`Try it yourself`

1. നിങ്ങൾ‌ ടെസ്റ്റ് നെറ്റ്‌വർക്ക് ആരംഭിച്ചതിന് ശേഷം, ഓർ‌ഗ്‌ 1 അഡ്‌മിനായി നെറ്റ്‌വർ‌ക്കുമായി സംവദിക്കുന്നതിന് നിങ്ങളുടെ സി‌എൽ‌എയിൽ‌ ഇനിപ്പറയുന്ന എൻ‌വയോൺ‌മെൻറ് വേരിയബിളുകൾ‌ പകർ‌ത്തി ഒട്ടിക്കുക. നിങ്ങൾ `ടെസ്റ്റ്-നെറ്റ്‌വർക്ക്` ഡയറക്‌ടറിയിലാണെന്ന് ഉറപ്പാക്കുക.

.. code:: bash

    export PATH=${PWD}/../bin:${PWD}:$PATH
    export FABRIC_CFG_PATH=${PWD}/../config/
    export CORE_PEER_TLS_ENABLED=true
    export CORE_PEER_LOCALMSPID="Org1MSP"
    export CORE_PEER_TLS_ROOTCERT_FILE=${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
    export CORE_PEER_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
    export CORE_PEER_ADDRESS=localhost:7051

2. മാർബിൾസ് ചെയിൻ‌കോഡ് പാക്കേജുചെയ്യുന്നതിന് ഇനിപ്പറയുന്ന കമാൻഡ് ഉപയോഗിക്കുക:

.. code:: bash

    peer lifecycle chaincode package marbles.tar.gz --path ../chaincode/marbles02/go --lang golang --label marbles_1

ഈ കമാൻഡ് marbles.tar.gz എന്ന ഒരു ചെയിൻ‌കോഡ് പാക്കേജ് സൃഷ്ടിക്കും.

3. പിയർ  ``peer0.org1.example.com`` : ലേക്ക് ചെയിൻ‌കോഡ് പാക്കേജ് ഇൻസ്റ്റാൾ ചെയ്യുന്നതിന് ഇനിപ്പറയുന്ന കമാൻഡ് ഉപയോഗിക്കുക:

.. code:: bash

    peer lifecycle chaincode install marbles.tar.gz

വിജയകരമായ ഒരു ഇൻസ്റ്റാൾ കമാൻഡ് ചുവടെയുള്ള പ്രതികരണത്തിന് സമാനമായി ചെയിൻ‌കോഡ് ഐഡന്റിഫയർ നൽകും:

.. code:: bash

    2019-04-22 18:47:38.312 UTC [cli.lifecycle.chaincode] submitInstallProposal -> INFO 001 Installed remotely: response:<status:200 payload:"\nJmarbles_1:0907c1f3d3574afca69946e1b6132691d58c2f5c5703df7fc3b692861e92ecd3\022\tmarbles_1" >
    2019-04-22 18:47:38.312 UTC [cli.lifecycle.chaincode] submitInstallProposal -> INFO 002 Chaincode code package identifier: marbles_1:0907c1f3d3574afca69946e1b6132691d58c2f5c5703df7fc3b692861e92ecd3

``peer0.org1.example.com`` ൽ ചെയിൻ‌കോഡ് ഇൻ‌സ്റ്റാൾ‌ ചെയ്‌തതിന്‌ ശേഷം, ഓർ‌ഗ് 1 നായി ഞങ്ങൾ‌ ചെയിൻ‌കോഡ് നിർ‌വ്വചനം അംഗീകരിക്കേണ്ടതുണ്ട്.

4. ഇൻ‌സ്റ്റാൾ‌ ചെയ്‌ത ചെയിൻ‌കോഡിന്റെ പാക്കേജ് ഐഡിക്കായി നിങ്ങളുടെ പിയർ‌ അന്വേഷിക്കുന്നതിന് ഇനിപ്പറയുന്ന കമാൻഡ് ഉപയോഗിക്കുക.

.. code:: bash

    peer lifecycle chaincode queryinstalled

ഇൻസ്റ്റാൾ കമാൻഡിന് സമാനമായ പാക്കേജ് ഐഡന്റിഫയർ കമാൻഡ് നൽകും. ഇനിപ്പറയുന്നവയ്ക്ക് സമാനമായ output ട്ട്‌പുട്ട് നിങ്ങൾ കാണും:

.. code:: bash

    Installed chaincodes on peer:
    Package ID: marbles_1:60ec9430b221140a45b96b4927d1c3af736c1451f8d432e2a869bdbf417f9787, Label: marbles_1

5. പരിസ്ഥിതി വേരിയബിളായി പാക്കേജ് ഐഡി പ്രഖ്യാപിക്കുക.  ``peer lifecycle chaincode queryinstalled`` കമാൻ‌ഡിൻ‌ നൽ‌കിയ marbles_1 പാക്കേജ് ഐഡി ചുവടെയുള്ള കമാൻഡിലേക്ക് ഒട്ടിക്കുക. പാക്കേജ് ഐഡി എല്ലാ ഉപയോക്താക്കൾക്കും ഒരുപോലെയായിരിക്കില്ല, അതിനാൽ നിങ്ങളുടെ കൺസോളിൽ നിന്ന് മടങ്ങിയ പാക്കേജ് ഐഡി ഉപയോഗിച്ച് ഈ ഘട്ടം പൂർത്തിയാക്കേണ്ടതുണ്ട്.

.. code:: bash

    export CC_PACKAGE_ID=marbles_1:60ec9430b221140a45b96b4927d1c3af736c1451f8d432e2a869bdbf417f97877

6. ഓർഗ് 1 എന്ന മാർബിൾസ് ചെയിൻകോഡിന്റെ നിർവചനം അംഗീകരിക്കുന്നതിന് ഇനിപ്പറയുന്ന കമാൻഡ് ഉപയോഗിക്കുക.

.. code:: bash

    export ORDERER_CA=${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem
    peer lifecycle chaincode approveformyorg -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --channelID mychannel --name marbles --version 1.0 --signature-policy "OR('Org1MSP.member','Org2MSP.member')" --init-required --package-id $CC_PACKAGE_ID --sequence 1 --tls true --cafile $ORDERER_CA

കമാൻഡ് വിജയകരമായി പൂർത്തിയാകുമ്പോൾ ഇതുപോലുള്ള ഒന്ന് നിങ്ങൾ കാണും:

.. code:: bash

    2020-01-07 16:24:20.886 EST [chaincodeCmd] ClientWait -> INFO 001 txid [560cb830efa1272c85d2f41a473483a25f3b12715d55e22a69d55abc46581415] committed with status (VALID) at

ചാനലിനോട് പ്രതിജ്ഞാബദ്ധമാകുന്നതിന് മുമ്പായി ഒരു ചെയിൻകോഡ് നിർവചനം അംഗീകരിക്കുന്നതിന് ഞങ്ങൾക്ക് ഭൂരിപക്ഷം ഓർഗനൈസേഷനുകൾ ആവശ്യമാണ്. ചെയിൻ‌കോഡ് നിർ‌വ്വചനം അംഗീകരിക്കുന്നതിന് ഞങ്ങൾക്ക് Org2 ആവശ്യമാണെന്ന് ഇത് സൂചിപ്പിക്കുന്നു. ചെയിൻ‌കോഡ് അംഗീകരിക്കുന്നതിന് ഞങ്ങൾക്ക് ഓർ‌ഗ് 2 ആവശ്യമില്ലാത്തതിനാലും ഏതെങ്കിലും ഓർ‌ഗ് 2 സമപ്രായക്കാരിൽ‌ പാക്കേജ് ഇൻ‌സ്റ്റാൾ‌ ചെയ്യാത്തതിനാലും, ചെയിൻ‌കോഡ് നിർ‌വചനത്തിന്റെ ഭാഗമായി ഞങ്ങൾ‌ ഒരു പാക്കേജ് ഐഡി നൽകേണ്ടതില്ല.

7. Org2 അഡ്‌മിനായി പ്രവർത്തിക്കാൻ CLI ഉപയോഗിക്കുക. പിയർ കണ്ടെയ്നറിലേക്ക് ഒരു ഗ്രൂപ്പായി ഇനിപ്പറയുന്ന കമാൻഡുകൾ പകർത്തി ഒട്ടിക്കുക, അവയെല്ലാം ഒരേസമയം പ്രവർത്തിപ്പിക്കുക.

.. code:: bash

    export CORE_PEER_LOCALMSPID="Org2MSP"
    export CORE_PEER_TLS_ROOTCERT_FILE=${PWD}/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt
    export CORE_PEER_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp
    export CORE_PEER_ADDRESS=localhost:9051

8. Org2 നായുള്ള ചെയിൻ‌കോഡ് നിർ‌വ്വചനം അംഗീകരിക്കുന്നതിന് ഇനിപ്പറയുന്ന കമാൻഡ് ഉപയോഗിക്കുക:

.. code:: bash

    peer lifecycle chaincode approveformyorg -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --channelID mychannel --name marbles --version 1.0 --signature-policy "OR('Org1MSP.member','Org2MSP.member')" --init-required --sequence 1 --tls true --cafile $ORDERER_CA

9. ചാനലിന് ചെയിൻ‌കോഡ് നിർ‌വ്വചനം നൽകുന്നതിന് നമുക്ക് ഇപ്പോൾ `peer lifecycle chaincode commit <commands/peerlifecycle.html#peer-lifecycle-chaincode-commit>`__ കമാൻഡ് ഉപയോഗിക്കാം:

.. code:: bash

    export ORDERER_CA=${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem
    export ORG1_CA=${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
    export ORG2_CA=${PWD}/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt
    peer lifecycle chaincode commit -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --channelID mychannel --name marbles --version 1.0 --sequence 1 --signature-policy "OR('Org1MSP.member','Org2MSP.member')" --init-required --tls true --cafile $ORDERER_CA --peerAddresses localhost:7051 --tlsRootCertFiles $ORG1_CA --peerAddresses localhost:9051 --tlsRootCertFiles $ORG2_CA

കമ്മിറ്റ് ഇടപാട് വിജയകരമായി പൂർത്തിയാകുമ്പോൾ നിങ്ങൾ എന്തെങ്കിലും കാണും
ഇതിന് സമാനമായത്:


.. code:: bash

    2019-04-22 18:57:34.274 UTC [chaincodeCmd] ClientWait -> INFO 001 txid [3da8b0bb8e128b5e1b6e4884359b5583dff823fce2624f975c69df6bce614614] committed with status (VALID) at peer0.org2.example.com:9051
    2019-04-22 18:57:34.709 UTC [chaincodeCmd] ClientWait -> INFO 002 txid [3da8b0bb8e128b5e1b6e4884359b5583dff823fce2624f975c69df6bce614614] committed with status (VALID) at peer0.org1.example.com:7051

10. മാർബിൾസ് ചെയിൻകോഡിൽ ഒരു ഓർഗനൈസേഷൻ ഫംഗ്ഷൻ അടങ്ങിയിരിക്കുന്നതിനാൽ, ഞങ്ങൾക്ക് ഇത് ആവശ്യമാണ്
ചെയിൻ‌കോഡിലെ മറ്റ് ഫംഗ്ഷനുകൾ‌ ഉപയോഗിക്കുന്നതിന് മുമ്പ് `peer chaincode invoke <commands/peerchaincode.html?%20chaincode%20instantiate#peer-chaincode-invoke>`__ ഉപയോഗിക്കുക 

.. code:: bash

    peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --channelID mychannel --name marbles --isInit --tls true --cafile $ORDERER_CA --peerAddresses localhost:7051 --tlsRootCertFiles $ORG1_CA -c '{"Args":["Init"]}'

സ്ഥിരീകരണ സൂചിക വിന്യസിച്ചു
-------------------------

പിയറിൽ ചെയിൻ‌കോഡ് ഇൻസ്റ്റാൾ ചെയ്ത് ചാനലിലേക്ക് വിന്യസിച്ചുകഴിഞ്ഞാൽ ഓരോ പിയറിന്റെയും കൊച്ച്ഡിബി സ്റ്റേറ്റ് ഡാറ്റാബേസിലേക്ക് സൂചികകൾ വിന്യസിക്കും. ഡോക്കർ കണ്ടെയ്നറിലെ പിയർ ലോഗ് പരിശോധിച്ചുകൊണ്ട് കൊച്ച്ഡിബി സൂചിക വിജയകരമായി സൃഷ്ടിച്ചുവെന്ന് നിങ്ങൾക്ക് സ്ഥിരീകരിക്കാൻ കഴിയും.

:guilabel:`Try it yourself`

പിയർ ഡോക്കർ കണ്ടെയ്നറിലെ ലോഗുകൾ കാണുന്നതിന്, ഒരു പുതിയ ടെർമിനൽ വിൻഡോ തുറന്ന് സൂചിക സൃഷ്ടിച്ചുവെന്ന് സന്ദേശ സ്ഥിരീകരണത്തിനായി grep ചെയ്യുന്നതിന് ഇനിപ്പറയുന്ന കമാൻഡ് പ്രവർത്തിപ്പിക്കുക.

::

   docker logs peer0.org1.example.com  2>&1 | grep "CouchDB index"


ഇനിപ്പറയുന്നവ പോലെ കാണപ്പെടുന്ന ഒരു ഫലം നിങ്ങൾ കാണും:

::

   [couchdb] CreateIndex -> INFO 0be Created CouchDB index [indexOwner] in state database [mychannel_marbles] using design document [_design/indexOwnerDoc]

.. note::  `` peer0.org1.example.com``  എന്നതിനേക്കാൾ വ്യത്യസ്തമായ ഒരു പിയറിൽ നിങ്ങൾ മാർബിൾസ് ഇൻസ്റ്റാൾ ചെയ്തിട്ടുണ്ടെങ്കിൽ,
 നിങ്ങൾക്കത് പകരം മറ്റൊരു പിയറിന്റെ പേര് ഉപയോഗിച്ച് മാറ്റിസ്ഥാപിക്കേണ്ടതുണ്ട്
 മാർബിൾസ് സ്ഥാപിച്ചു.

.. _cdb-query:

CouchDB സ്റ്റേറ്റ് ഡാറ്റാബേസ് അന്വേഷിക്കുക
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

ഇപ്പോൾ ഇൻ‌ഡെക്സ് JSON ഫയലിൽ‌ നിർ‌വ്വചിക്കുകയും ചെയിൻ‌കോഡിനൊപ്പം വിന്യസിക്കുകയും ചെയ്‌തിരിക്കുന്നതിനാൽ‌, ചൈൻ‌കോഡ് ഫംഗ്ഷനുകൾ‌ക്ക് കൊച്ച്ഡിബി സ്റ്റേറ്റ് ഡാറ്റാബേസിനെതിരെ JSON ചോദ്യങ്ങൾ‌ നടപ്പിലാക്കാൻ‌ കഴിയും, അതുവഴി പിയർ‌ കമാൻ‌ഡുകൾ‌ക്ക് ചെയിൻ‌കോഡ് ഫംഗ്ഷനുകൾ‌ അഭ്യർ‌ത്ഥിക്കാൻ‌ കഴിയും.

ഒരു ചോദ്യത്തിൽ ഒരു സൂചിക നാമം വ്യക്തമാക്കുന്നത് ഓപ്ഷണലാണ്. വ്യക്തമാക്കിയിട്ടില്ലെങ്കിൽ, അന്വേഷിക്കുന്ന ഫീൽഡുകൾക്കായി ഒരു സൂചിക ഇതിനകം നിലവിലുണ്ട്, നിലവിലുള്ള സൂചിക സ്വപ്രേരിതമായി ഉപയോഗിക്കും.

.. tip:: ``use_index`` കീവേഡ് ഉപയോഗിച്ച് ഒരു ചോദ്യത്തിൽ ഒരു സൂചിക നാമം വ്യക്തമായി ഉൾപ്പെടുത്തുന്നത് നല്ല പരിശീലനമാണ്. ഇത് കൂടാതെ, CouchDB കുറച്ച് ഒപ്റ്റിമൽ സൂചിക തിരഞ്ഞെടുക്കാം. കൂടാതെ CouchDB ഒരു സൂചിക ഉപയോഗിക്കില്ലായിരിക്കാം, മാത്രമല്ല പരിശോധന സമയത്ത് കുറഞ്ഞ അളവിൽ നിങ്ങൾക്കത് മനസ്സിലാകില്ല. ഉയർന്ന അളവുകളിൽ മാത്രമേ നിങ്ങൾക്ക് വേഗത കുറഞ്ഞ പ്രകടനം മനസ്സിലാക്കാൻ കഴിയൂ, കാരണം CouchDB ഒരു സൂചിക ഉപയോഗിക്കാത്തതിനാൽ നിങ്ങൾ അത് അനുമാനിച്ചു.


ചെയിൻ‌കോഡിൽ‌ അന്വേഷണം നിർമ്മിക്കുക
----------------------------

നിങ്ങളുടെ ചെയിൻ‌കോഡിനുള്ളിൽ‌ നിർ‌വ്വചിച്ച ചോദ്യങ്ങൾ‌ ഉപയോഗിച്ച് ലെഡ്‌ജറിലെ ഡാറ്റയ്‌ക്കെതിരെ സങ്കീർ‌ണ്ണമായ സമൃദ്ധമായ ചോദ്യങ്ങൾ‌ നടത്താൻ‌ നിങ്ങൾ‌ക്ക് കഴിയും. `marbles02 sample <https://github.com/hyperledger/fabric-samples/blob/{BRANCH}/chaincode/marbles02/go/marbles_chaincode.go>`__ രണ്ട് സമ്പന്നമായ അന്വേഷണ പ്രവർത്തനങ്ങൾ ഉൾക്കൊള്ളുന്നു:

  * **queryMarbles** --

       **താൽ‌ക്കാലിക സമൃദ്ധമായ ചോദ്യത്തിന്റെ ഉദാഹരണം **  . ഒരു (സെലക്ടർ) സ്ട്രിംഗ് ഫംഗ്ഷനിലേക്ക് കൈമാറാൻ കഴിയുന്ന ഒരു ചോദ്യമാണിത്. റൺടൈമിൽ സ്വന്തം സെലക്ടർമാരെ ചലനാത്മകമായി നിർമ്മിക്കേണ്ട ക്ലയന്റ് അപ്ലിക്കേഷനുകൾക്ക് ഈ അന്വേഷണം ഉപയോഗപ്രദമാകും. സെലക്ടർമാരെക്കുറിച്ചുള്ള കൂടുതൽ വിവരങ്ങൾക്ക് `CouchDB selector syntax <http://docs.couchdb.org/en/latest/api/database/find.html#find-selectors>`__  കാണുക.


  * **queryMarblesByOwner** --

       ചോദ്യ ലോജിക്ക് ചെയിൻ‌കോഡിലേക്ക് ചുട്ടെടുക്കുന്ന   **പാരാമീറ്ററൈസ്ഡ് അന്വേഷണത്തിന്റെ **   ഉദാഹരണം. ഈ സാഹചര്യത്തിൽ, മാർബിൾ ഉടമയായ ഒരൊറ്റ വാദം ഫംഗ്ഷൻ സ്വീകരിക്കുന്നു. “മാർബിൾ” ന്റെ ഡോക് ടൈപ്പിനോടും JSON അന്വേഷണ സിന്റാക്സ് ഉപയോഗിക്കുന്ന ഉടമ ഐഡിയോടും പൊരുത്തപ്പെടുന്ന JSON പ്രമാണങ്ങൾക്കായുള്ള സ്റ്റേറ്റ് ഡാറ്റാബേസ് ഇത് അന്വേഷിക്കുന്നു.


പിയർ കമാൻഡ് ഉപയോഗിച്ച് അന്വേഷണം പ്രവർത്തിപ്പിക്കുക
------------------------------------

ഒരു ക്ലയന്റ് ആപ്ലിക്കേഷന്റെ അഭാവത്തിൽ, ചെയിൻ‌കോഡിൽ‌ നിർ‌വ്വചിച്ചിരിക്കുന്ന ചോദ്യങ്ങൾ‌ പരിശോധിക്കുന്നതിന് ഞങ്ങൾക്ക് പിയർ കമാൻഡ് ഉപയോഗിക്കാം. `പിയർ ചെയിൻ‌കോഡ് അന്വേഷണം <commands/peerchaincode.html?%20chaincode%20query#peer-chaincode-query>`__ മാർ‌ബിൾ‌സ് സൂചിക ``indexOwner`` ഉപയോഗിക്കുന്നതിനുള്ള കമാൻഡും "ടോം" ന്റെ ഉടമസ്ഥതയിലുള്ള എല്ലാ മാർബിളുകൾ‌ക്കായുള്ള അന്വേഷണവും ``queryMarbles`` പ്രവർത്തനം.

:guilabel:`Try it yourself`

ഡാറ്റാബേസ് അന്വേഷിക്കുന്നതിന് മുമ്പ്, ഞങ്ങൾ കുറച്ച് ഡാറ്റ ചേർക്കണം. "ടോം" ന്റെ ഉടമസ്ഥതയിലുള്ള ഒരു മാർബിൾ സൃഷ്ടിക്കുന്നതിന് ഇനിപ്പറയുന്ന കമാൻഡ് Org1 ആയി പ്രവർത്തിപ്പിക്കുക:

.. code:: bash

    export CORE_PEER_LOCALMSPID="Org1MSP"
    export CORE_PEER_TLS_ROOTCERT_FILE=${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
    export CORE_PEER_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
    export CORE_PEER_ADDRESS=localhost:7051
    peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile ${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n marbles -c '{"Args":["initMarble","marble1","blue","35","tom"]}'

ചെയിൻ‌കോഡ് സമാരംഭിക്കുമ്പോൾ ഒരു സൂചിക വിന്യസിച്ച ശേഷം, അത് സ്വപ്രേരിതമായി ചെയിൻ‌കോഡ് അന്വേഷണങ്ങൾ‌ ഉപയോഗിക്കും. അന്വേഷിക്കുന്ന ഫീൽഡുകളെ അടിസ്ഥാനമാക്കി ഏത് സൂചിക ഉപയോഗിക്കണമെന്ന് CouchDB- ന് നിർണ്ണയിക്കാനാകും. അന്വേഷണ മാനദണ്ഡത്തിനായി ഒരു സൂചിക നിലവിലുണ്ടെങ്കിൽ അത് ഉപയോഗിക്കും. എന്നിരുന്നാലും, അന്വേഷണത്തിൽ  ``use_index`` കീവേഡ് വ്യക്തമാക്കുക എന്നതാണ് ശുപാർശ ചെയ്യുന്ന സമീപനം.  ``Use_index``  കീവേഡ് ഉൾപ്പെടുത്തി സെലക്ടർ സിന്റാക്സിൽ സൂചിക എങ്ങനെ വ്യക്തമായി വ്യക്തമാക്കാം എന്നതിന്റെ ഒരു ഉദാഹരണമാണ് ചുവടെയുള്ള പിയർ കമാൻഡ്:

.. code:: bash

   // Rich Query with index name explicitly specified:
   peer chaincode query -C mychannel -n marbles -c '{"Args":["queryMarbles", "{\"selector\":{\"docType\":\"marble\",\"owner\":\"tom\"}, \"use_index\":[\"_design/indexOwnerDoc\", \"indexOwner\"]}"]}'

മുകളിലുള്ള അന്വേഷണ കമാൻഡിലേക്ക് കടക്കുമ്പോൾ മൂന്ന് ആർഗ്യുമെന്റുകളുണ്ട്

*  ``ക്വറി മാർബിൾസ്``

മാർബിൾസ് ചെയിൻകോഡിലെ പ്രവർത്തനത്തിന്റെ പേര്. ഒരു  `shim <https://godoc.org/github.com/hyperledger/fabric-chaincode-go/shim>`__  ലെഡ്ജർ ആക്സസ് ചെയ്യുന്നതിനും പരിഷ്കരിക്കുന്നതിനും  ``shim.ChaincodeStubInterface`` ഉപയോഗിക്കുന്നു. ദി   ``getQueryResultForQueryString()``  ചോദ്യ സ്‌ട്രിംഗ് ഷിം API- ലേക്ക് കൈമാറുന്നു ``getQueryResult()``.

.. code:: bash

  func (t *SimpleChaincode) queryMarbles(stub shim.ChaincodeStubInterface, args []string) pb.Response {

	  //   0
	  // "queryString"
	   if len(args) < 1 {
		   return shim.Error("Incorrect number of arguments. Expecting 1")
	   }

	   queryString := args[0]

	   queryResults, err := getQueryResultForQueryString(stub, queryString)
	   if err != nil {
		 return shim.Error(err.Error())
	   }
	   return shim.Success(queryResults)
  }

*  ``{"selector":{"docType":"marble","owner":"tom"}``

``marble`` തരത്തിന്റെ എല്ലാ പ്രമാണങ്ങളും കണ്ടെത്തുന്ന ഒരു  **ad hoc selector**  സ്‌ട്രിംഗിന്റെ ഉദാഹരണമാണിത്, ഇവിടെ ``owner`` ആട്രിബ്യൂട്ടിന്  ``tom``മൂല്യം ഉണ്ട്.


*  ``"use_index":["_design/indexOwnerDoc", "indexOwner"]``

ഡിസൈൻ പ്രമാണത്തിന്റെ പേര്  ``ഇൻ‌ഡെക്സ്ഓവർ‌ഡോക്`` , ഇൻ‌ഡെക്സ് നാമം  ``ഇൻ‌ഡെക്സ്ഓവർ‌``  എന്നിവ വ്യക്തമാക്കുന്നു. ഈ ഉദാഹരണത്തിൽ സെലക്ടർ ചോദ്യത്തിൽ  ``use_index`` കീവേഡ് ഉപയോഗിച്ച് വ്യക്തമാക്കിയ സൂചിക നാമം വ്യക്തമായി ഉൾക്കൊള്ളുന്നു. മുകളിലുള്ള സൂചിക നിർവചനം ഓർമ്മിക്കുന്നു :ref:`cdb-create-index`, അതിൽ ഒരു ഡിസൈൻ പ്രമാണം അടങ്ങിയിരിക്കുന്നു,  ``"ddoc":"indexOwnerDoc"``. CouchDB ഉപയോഗിച്ച്, അന്വേഷണത്തിൽ സൂചികയുടെ പേര് വ്യക്തമായി ഉൾപ്പെടുത്താൻ നിങ്ങൾ ആഗ്രഹിക്കുന്നുവെങ്കിൽ, സൂചിക നിർവചനത്തിൽ ``ddoc`` മൂല്യം ഉൾപ്പെടുത്തണം, അതിനാൽ ഇത്  ``use_index`` കീവേഡ് ഉപയോഗിച്ച് പരാമർശിക്കാൻ കഴിയും.


ചോദ്യം വിജയകരമായി പ്രവർത്തിക്കുന്നു കൂടാതെ ഇനിപ്പറയുന്ന ഫലങ്ങളുമായി സൂചികയെ സ്വാധീനിക്കുന്നു:

.. code:: json

  Query Result: [{"Key":"marble1", "Record":{"color":"blue","docType":"marble","name":"marble1","owner":"tom","size":35}}]

.. _cdb-best:

ചോദ്യങ്ങൾക്കും സൂചികകൾക്കും മികച്ച പരിശീലനങ്ങൾ ഉപയോഗിക്കുക
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

കൗച്ച്ഡിബിയിലെ മുഴുവൻ ഡാറ്റാബേസും സ്കാൻ ചെയ്യാതെ തന്നെ സൂചികകൾ ഉപയോഗിക്കുന്ന ചോദ്യങ്ങൾ വേഗത്തിൽ പൂർത്തിയാകും. സൂചികകൾ മനസിലാക്കുന്നത് മികച്ച പ്രകടനത്തിനായി നിങ്ങളുടെ ചോദ്യങ്ങൾ എഴുതാനും നിങ്ങളുടെ നെറ്റ്‌വർക്കിൽ വലിയ അളവിലുള്ള ഡാറ്റയോ ബ്ലോക്കുകളോ കൈകാര്യം ചെയ്യാൻ അപ്ലിക്കേഷനെ സഹായിക്കുകയും ചെയ്യും.

നിങ്ങളുടെ ചെയിൻ‌കോഡ് ഉപയോഗിച്ച് നിങ്ങൾ‌ ഇൻ‌സ്റ്റാൾ‌ ചെയ്യുന്ന സൂചികകൾ‌ ആസൂത്രണം ചെയ്യുന്നതും പ്രധാനമാണ്. നിങ്ങളുടെ മിക്ക ചോദ്യങ്ങളെയും പിന്തുണയ്‌ക്കുന്ന ഒരു ചെയിൻ‌കോഡിന് കുറച്ച് സൂചികകൾ‌ മാത്രമേ നിങ്ങൾ‌ ഇൻ‌സ്റ്റാൾ‌ ചെയ്യാവൂ. വളരെയധികം സൂചികകൾ ചേർക്കുന്നത്, അല്ലെങ്കിൽ ഒരു സൂചികയിൽ അമിതമായ ഫീൽഡുകൾ ഉപയോഗിക്കുന്നത് നിങ്ങളുടെ നെറ്റ്‌വർക്കിന്റെ പ്രകടനത്തെ നശിപ്പിക്കും. ഓരോ ബ്ലോക്കും പ്രതിജ്ഞാബദ്ധമായതിനുശേഷം സൂചികകൾ അപ്‌ഡേറ്റ് ചെയ്യുന്നതിനാലാണിത്. "ഇൻഡെക്സ് വാർമിംഗ്" വഴി കൂടുതൽ സൂചികകൾ അപ്‌ഡേറ്റ് ചെയ്യേണ്ടതുണ്ട്, ഇടപാടുകൾ പൂർത്തിയാകാൻ കൂടുതൽ സമയമെടുക്കും.

ചോദ്യങ്ങൾ സൂചികകൾ എങ്ങനെ ഉപയോഗിക്കുന്നുവെന്നും ഏത് തരത്തിലുള്ള അന്വേഷണങ്ങളാണ് മികച്ച പ്രകടനം കാഴ്ചവയ്ക്കുന്നതെന്നും തെളിയിക്കാൻ ഈ വിഭാഗത്തിലെ ഉദാഹരണങ്ങൾ സഹായിക്കും. നിങ്ങളുടെ ചോദ്യങ്ങൾ എഴുതുമ്പോൾ ഇനിപ്പറയുന്നവ ഓർമ്മിക്കുക:

*  ഇൻഡെക്സിലെ എല്ലാ ഫീൽഡുകളും സെലക്ടറിലായിരിക്കണം അല്ലെങ്കിൽ ഇൻഡെക്സ് ഉപയോഗിക്കുന്നതിനായി നിങ്ങളുടെ അന്വേഷണത്തിന്റെ വിഭാഗങ്ങൾ ക്രമീകരിക്കുക.
*  കൂടുതൽ‌ സങ്കീർ‌ണ്ണമായ ചോദ്യങ്ങൾ‌ക്ക് കുറഞ്ഞ പ്രകടനമുണ്ടാകും കൂടാതെ ഒരു സൂചിക ഉപയോഗിക്കുന്നതിനുള്ള സാധ്യത കുറയും.
*  ഒരു പൂർണ്ണ പട്ടിക സ്കാൻ അല്ലെങ്കിൽ  ``$or``, ``$in`` and ``$regex``എന്നിവപോലുള്ള ഒരു പൂർണ്ണ സൂചിക സ്കാനിൽ കലാശിക്കുന്ന ഓപ്പറേറ്റർമാരെ ഒഴിവാക്കാൻ നിങ്ങൾ ശ്രമിക്കണം.

ഈ ട്യൂട്ടോറിയലിന്റെ മുമ്പത്തെ വിഭാഗത്തിൽ‌, നിങ്ങൾ‌ ഇനിപ്പറയുന്ന ചോദ്യം മാർ‌ബിൾ‌സ് ചെയിൻ‌കോഡിനെ വീണ്ടും നൽ‌കി:

.. code:: bash

  // Example one: query fully supported by the index
  peer chaincode query -C $CHANNEL_NAME -n marbles -c '{"Args":["queryMarbles", "{\"selector\":{\"docType\":\"marble\",\"owner\":\"tom\"}, \"use_index\":[\"indexOwnerDoc\", \"indexOwner\"]}"]}'

മാർബിൾസ് ചെയിൻ‌കോഡ് ``ഇൻ‌ഡെക്സ്ഓവർ‌ഡോക്`` സൂചിക ഉപയോഗിച്ച് ഇൻസ്റ്റാൾ ചെയ്തു:

.. code:: json

  {"index":{"fields":["docType","owner"]},"ddoc":"indexOwnerDoc", "name":"indexOwner","type":"json"}

ചോദ്യത്തിലെ രണ്ട് ഫീൽ‌ഡുകളായ  ``docType`` & ``owner`` എന്നിവ സൂചികയിൽ‌ ഉൾ‌പ്പെടുത്തിയിരിക്കുന്നതായി ശ്രദ്ധിക്കുക, ഇത് പൂർണ്ണമായും പിന്തുണയ്‌ക്കുന്ന ചോദ്യമായി മാറുന്നു. ഫലമായി, പൂർണ്ണമായ ഡാറ്റാബേസ് തിരയാതെ തന്നെ ഈ ചോദ്യത്തിന് സൂചികയിലെ ഡാറ്റ ഉപയോഗിക്കാൻ കഴിയും. ഇതുപോലുള്ള പൂർണ്ണ പിന്തുണയുള്ള ചോദ്യങ്ങൾ‌ നിങ്ങളുടെ ചെയിൻ‌കോഡിൽ‌ നിന്നുള്ള മറ്റ് ചോദ്യങ്ങളേക്കാൾ വേഗത്തിൽ‌ മടങ്ങും.

മുകളിലുള്ള ചോദ്യത്തിലേക്ക് നിങ്ങൾ അധിക ഫീൽഡുകൾ ചേർക്കുകയാണെങ്കിൽ, അത് ഇപ്പോഴും സൂചിക ഉപയോഗിക്കും. എന്നിരുന്നാലും, ചോദ്യത്തിന് അധിക ഫീൽ‌ഡുകൾ‌ക്കായി ഇൻ‌ഡെക്‌സ് ചെയ്‌ത ഡാറ്റ സ്കാൻ‌ ചെയ്യേണ്ടിവരും, അതിന്റെ ഫലമായി പ്രതികരണ സമയം കൂടുതലാണ്. ഒരു ഉദാഹരണമായി, ചുവടെയുള്ള അന്വേഷണം ഇപ്പോഴും സൂചിക ഉപയോഗിക്കും, പക്ഷേ മുമ്പത്തെ ഉദാഹരണത്തേക്കാൾ കൂടുതൽ സമയം എടുക്കും.

.. code:: bash

  // Example two: query fully supported by the index with additional data peer chaincode query -C $CHANNEL_NAME -n marbles -c '{"Args":["queryMarbles", "{\"selector\":{\"docType\":\"marble\",\"owner\":\"tom\",\"color\":\"red\"}, \"use_index\":[\"/indexOwnerDoc\", \"indexOwner\"]}"]}'

സൂചികയിലെ എല്ലാ ഫീൽ‌ഡുകളും ഉൾ‌പ്പെടുത്താത്ത ഒരു ചോദ്യത്തിന് പകരം പൂർണ്ണ ഡാറ്റാബേസ് സ്കാൻ‌ ചെയ്യേണ്ടതുണ്ട്. ഉദാഹരണത്തിന്, ഉടമസ്ഥതയിലുള്ള ഇനത്തിന്റെ തരം വ്യക്തമാക്കാതെ ചുവടെയുള്ള ചോദ്യം ഉടമയ്‌ക്കായി തിരയുന്നു. ഉടമ ഇൻഡെക്സ് ഡോക്കിൽ `` ഉടമ``, `` ഡോക് ടൈപ്പ്`` എന്നീ ഫീൽഡുകൾ അടങ്ങിയിരിക്കുന്നതിനാൽ, ഈ ചോദ്യത്തിന് സൂചിക ഉപയോഗിക്കാൻ കഴിയില്ല.

.. code:: bash

  // Example three: query not supported by the index
  peer chaincode query -C $CHANNEL_NAME -n marbles -c '{"Args":["queryMarbles", "{\"selector\":{\"owner\":\"tom\"}, \"use_index\":[\"indexOwnerDoc\", \"indexOwner\"]}"]}'


പൊതുവേ, കൂടുതൽ‌ സങ്കീർ‌ണ്ണമായ ചോദ്യങ്ങൾ‌ക്ക് കൂടുതൽ‌ പ്രതികരണ സമയം ഉണ്ടായിരിക്കും, കൂടാതെ ഒരു സൂചിക പിന്തുണയ്‌ക്കുന്നതിനുള്ള സാധ്യത കുറവാണ്.  ``$or`` , ``$in`` and ``$regex`` എന്നിവ പോലുള്ള ഓപ്പറേറ്റർമാർ പലപ്പോഴും ചോദ്യം മുഴുവൻ സൂചികയും സ്കാൻ ചെയ്യുന്നതിനോ സൂചിക ഉപയോഗിക്കാതിരിക്കുന്നതിനോ കാരണമാകും.

ഒരു ഉദാഹരണമായി, ചുവടെയുള്ള ചോദ്യത്തിൽ ഒരു  ``$or`` പദം അടങ്ങിയിരിക്കുന്നു, അത് എല്ലാ മാർബിളിനെയും ടോമിന്റെ ഉടമസ്ഥതയിലുള്ള എല്ലാ ഇനങ്ങളെയും തിരയുന്നു.

.. code:: bash

  // Example four: query with $or supported by the index  peer chaincode query -C $CHANNEL_NAME -n marbles -c '{"Args":["queryMarbles", "{\"selector\":{"\$or\":[{\"docType\:\"marble\"},{\"owner\":\"tom\"}]}, \"use_index\":[\"indexOwnerDoc\", \"indexOwner\"]}"]}'

``indexOwnerDoc`` ൽ‌ ഉൾ‌പ്പെടുത്തിയിരിക്കുന്ന ഫീൽ‌ഡുകൾ‌ക്കായി തിരയുന്നതിനാൽ‌ ഈ ചോദ്യം ഇപ്പോഴും ഇൻ‌ഡെക്സ് ഉപയോഗിക്കും. എന്നിരുന്നാലും, അന്വേഷണത്തിലെ  ``$or`` അവസ്ഥയ്ക്ക് സൂചികയിലെ എല്ലാ ഇനങ്ങളും സ്കാൻ ചെയ്യേണ്ടതുണ്ട്, അതിന്റെ ഫലമായി പ്രതികരണ സമയം കൂടുതലാണ്.

സൂചിക പിന്തുണയ്‌ക്കാത്ത സങ്കീർണ്ണമായ ചോദ്യത്തിന്റെ ഒരു ഉദാഹരണം ചുവടെ.

.. code:: bash

  // Example five: Query with $or not supported by the index peer chaincode query -C $CHANNEL_NAME -n marbles -c '{"Args":["queryMarbles", "{\"selector\":{"\$or\":[{\"docType\":\"marble\",\"owner\":\"tom\"},{"\color\":"\yellow\"}]}, \"use_index\":[\"indexOwnerDoc\", \"indexOwner\"]}"]}'

ടോമിന്റെ ഉടമസ്ഥതയിലുള്ള എല്ലാ മാർബിളുകൾക്കും അല്ലെങ്കിൽ മഞ്ഞ നിറത്തിലുള്ള മറ്റേതെങ്കിലും ഇനങ്ങൾക്കുമായി അന്വേഷണം തിരയുന്നു. ഈ ചോദ്യം സൂചിക ഉപയോഗിക്കില്ല, കാരണം ``$or`` അവസ്ഥ പാലിക്കുന്നതിന് മുഴുവൻ പട്ടികയും തിരയേണ്ടതുണ്ട്. നിങ്ങളുടെ ലെഡ്ജറിലെ ഡാറ്റയുടെ അളവിനെ ആശ്രയിച്ച്, ഈ ചോദ്യം പ്രതികരിക്കാൻ വളരെയധികം സമയമെടുക്കും അല്ലെങ്കിൽ കാലഹരണപ്പെടാം.

നിങ്ങളുടെ ചോദ്യങ്ങൾക്കൊപ്പം മികച്ച കീഴ്‌വഴക്കങ്ങൾ പാലിക്കേണ്ടത് പ്രധാനമാണെങ്കിലും, വലിയ അളവിൽ ഡാറ്റ ശേഖരിക്കുന്നതിനുള്ള സൂചികകളല്ല സൂചികകൾ ഉപയോഗിക്കുന്നത്. ഇടപാടുകൾ സാധൂകരിക്കുന്നതിനും സ്ഥിരീകരിക്കുന്നതിനും ബ്ലോക്ക്‌ചെയിൻ ഡാറ്റ ഘടന ഒപ്റ്റിമൈസ് ചെയ്‌തിരിക്കുന്നു, മാത്രമല്ല ഇത് ഡാറ്റാ അനലിറ്റിക്‌സിനോ റിപ്പോർട്ടിംഗിനോ അനുയോജ്യമല്ല. നിങ്ങളുടെ ആപ്ലിക്കേഷന്റെ ഭാഗമായി ഒരു ഡാഷ്‌ബോർഡ് നിർമ്മിക്കാനോ നിങ്ങളുടെ നെറ്റ്‌വർക്കിൽ നിന്നുള്ള ഡാറ്റ വിശകലനം ചെയ്യാനോ ആഗ്രഹിക്കുന്നുവെങ്കിൽ, നിങ്ങളുടെ സമപ്രായക്കാരിൽ നിന്നുള്ള ഡാറ്റ പകർത്തുന്ന ഒരു ഓഫ് ചെയിൻ ഡാറ്റാബേസ് അന്വേഷിക്കുന്നതാണ് മികച്ച പരിശീലനം. നിങ്ങളുടെ നെറ്റ്‌വർക്കിന്റെ പ്രകടനത്തെ തരംതാഴ്ത്താതെയും ഇടപാടുകൾ തടസ്സപ്പെടുത്താതെയും ബ്ലോക്ക്ചെയിനിലെ ഡാറ്റ മനസിലാക്കാൻ ഇത് നിങ്ങളെ അനുവദിക്കുന്നു.

ഒരു ഓഫ്-ചെയിൻ ഡാറ്റാബേസിലേക്കോ അനലിറ്റിക്സ് എഞ്ചിനിലേക്കോ ഇടപാട് ഡാറ്റ എഴുതുന്നതിന് നിങ്ങളുടെ അപ്ലിക്കേഷനിൽ നിന്ന് ബ്ലോക്ക് അല്ലെങ്കിൽ ചെയിൻകോഡ് ഇവന്റുകൾ ഉപയോഗിക്കാം. ലഭിച്ച ഓരോ ബ്ലോക്കിനും, ബ്ലോക്ക് ലിസണർ ആപ്ലിക്കേഷൻ ബ്ലോക്ക് ഇടപാടുകളിലൂടെ ആവർത്തിക്കുകയും സാധുവായ ഓരോ ഇടപാടിന്റെയും  ``rwset`` ൽ നിന്നുള്ള കീ / മൂല്യം റൈറ്റുകൾ ഉപയോഗിച്ച് ഒരു ഡാറ്റ സ്റ്റോർ നിർമ്മിക്കുകയും ചെയ്യും. താഴെയുള്ള ഡാറ്റാ സ്റ്റോറുകളുടെ സമഗ്രത ഉറപ്പാക്കുന്നതിന്  :doc:`peer_event_services`  വീണ്ടും പ്ലേ ചെയ്യാവുന്ന ഇവന്റുകൾ നൽകുന്നു. ഒരു ബാഹ്യ ഡാറ്റാബേസിലേക്ക് ഡാറ്റ എഴുതുന്നതിന് നിങ്ങൾക്ക് ഒരു ഇവന്റ് ശ്രോതാവിനെ എങ്ങനെ ഉപയോഗിക്കാമെന്നതിന്റെ ഒരു ഉദാഹരണത്തിനായി, `Off chain data sample <https://github.com/hyperledger/fabric-samples/tree/{BRANCH}/off_chain_data>`__ സന്ദർശിക്കുക ഫാബ്രിക് സാമ്പിളുകളിൽ.

.. _cdb-pagination:

Pagination ഉപയോഗിച്ച് CouchDB സ്റ്റേറ്റ് ഡാറ്റാബേസ് അന്വേഷിക്കുക
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

കൊച്ച്ഡിബി അന്വേഷണങ്ങൾ വഴി വലിയ റിസൾട്ട് സെറ്റുകൾ നൽകുമ്പോൾ, ഒരു കൂട്ടം എപി‌ഐകൾ ലഭ്യമാണ്, അത് ഫലങ്ങളുടെ പട്ടിക നിർ‌ണ്ണയിക്കാൻ ചെയിൻ‌കോഡ് വഴി വിളിക്കാൻ‌ കഴിയും. ഒരു  ``പേജ്‌സൈസ്``  ഉം ഒരു ആരംഭ പോയിന്റും വ്യക്തമാക്കിയുകൊണ്ട് ഫലം വിഭജിക്കുന്നതിനുള്ള ഒരു സംവിധാനം പേജിനേഷൻ നൽകുന്നു. - ഫലങ്ങളുടെ സെറ്റ് എവിടെ തുടങ്ങണമെന്ന് സൂചിപ്പിക്കുന്ന ഒരു  ``ബുക്ക്മാർക്ക്`` . കൂടുതൽ‌ ഫലങ്ങൾ‌ ലഭിക്കാത്തതുവരെ ക്ലയൻറ് അപ്ലിക്കേഷൻ‌ അന്വേഷണം പ്രവർ‌ത്തിപ്പിക്കുന്ന ചെയിൻ‌കോഡിനെ ആവർത്തിക്കുന്നു. കൂടുതൽ വിവരങ്ങൾക്ക് `topic on pagination with CouchDB <couchdb_as_state_database.html#couchdb-pagination>`__  പരിശോധിക്കുക.


Pagination എങ്ങനെയെന്ന് കാണിക്കുന്നതിന് ഞങ്ങൾ `Marbles sample <https://github.com/hyperledger/fabric-samples/blob/{BRANCH}/chaincode/marbles02/go/marbles_chaincode.go>`__ ഫംഗ്ഷൻ ``queryMarblesWithPagination`` ഉപയോഗിക്കും. ചെയിൻ‌കോഡിലും ക്ലയൻറ് ആപ്ലിക്കേഷനിലും നടപ്പിലാക്കാൻ‌ കഴിയും.

* **queryMarblesWithPagination** --

       പേജിനേഷനോടുകൂടിയ  **താൽ‌ക്കാലിക സമൃദ്ധമായ ചോദ്യത്തിന്റെ ഉദാഹരണം**  .  മുകളിലുള്ള ഉദാഹരണത്തിന് സമാനമായ പ്രവർത്തനത്തിലേക്ക് ഒരു (സെലക്ടർ) സ്ട്രിംഗ് കൈമാറാൻ കഴിയുന്ന ഒരു ചോദ്യമാണിത്. ഈ സാഹചര്യത്തിൽ, അന്വേഷണത്തോടൊപ്പം ഒരു ``പേജ് വലുപ്പം``  ഉം ഒരു  ``ബുക്ക്മാർക്ക്``   ഉം ഉൾപ്പെടുത്തിയിട്ടുണ്ട്.

പേജിനേഷൻ പ്രദർശിപ്പിക്കുന്നതിന്, കൂടുതൽ ഡാറ്റ ആവശ്യമാണ്. മുകളിൽ നിന്ന് നിങ്ങൾ ഇതിനകം മാർബിൾ 1 ചേർത്തിട്ടുണ്ടെന്ന് ഈ ഉദാഹരണം അനുമാനിക്കുന്നു. "ടോം" ന്റെ ഉടമസ്ഥതയിലുള്ള നാല് മാർബിളുകൾ കൂടി സൃഷ്ടിക്കുന്നതിന് പിയർ കണ്ടെയ്നറിൽ ഇനിപ്പറയുന്ന കമാൻഡുകൾ പ്രവർത്തിപ്പിക്കുക, "ടോം" ന്റെ ഉടമസ്ഥതയിലുള്ള മൊത്തം അഞ്ച് മാർബിളുകൾ സൃഷ്ടിക്കുക:

:guilabel:`Try it yourself`

.. code:: bash

    export CORE_PEER_LOCALMSPID="Org1MSP"
    export CORE_PEER_TLS_ROOTCERT_FILE=${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
    export CORE_PEER_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
    export CORE_PEER_ADDRESS=localhost:7051
    peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile  ${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n marbles -c '{"Args":["initMarble","marble2","yellow","35","tom"]}'
    peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile  ${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n marbles -c '{"Args":["initMarble","marble3","green","20","tom"]}'
    peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile  ${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n marbles -c '{"Args":["initMarble","marble4","purple","20","tom"]}'
    peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile  ${PWD}/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n marbles -c '{"Args":["initMarble","marble5","blue","40","tom"]}'

മുമ്പത്തെ ഉദാഹരണത്തിലെ അന്വേഷണത്തിനായുള്ള ആർ‌ഗ്യുമെൻറുകൾ‌ക്ക് പുറമേ, queryMarblesWithPagination ``പേജ്‌സൈസ്``, ``ബുക്ക്‌മാർ‌ക്ക്`` എന്നിവ ചേർക്കുന്നു. ``പേജ്സൈസ്`` ഓരോ ചോദ്യത്തിനും മടങ്ങിവരേണ്ട റെക്കോർഡുകളുടെ എണ്ണം വ്യക്തമാക്കുന്നു. പേജ് എവിടെ തുടങ്ങണമെന്ന് കൗച് ഡിബിയോട് പറയുന്ന ഒരു "ആങ്കർ" ആണ് ``ബുക്ക്മാർക്ക്``. (ഫലങ്ങളുടെ ഓരോ പേജും ഒരു അദ്വിതീയ ബുക്ക്മാർക്ക് നൽകുന്നു.)

* ``queryMarblesWithPagination``

       മാർബിൾസ് ചെയിൻകോഡിലെ പ്രവർത്തനത്തിന്റെ പേര്. ലെഡ്ജർ ആക്‌സസ് ചെയ്യുന്നതിനും പരിഷ്‌ക്കരിക്കുന്നതിനും ഒരു  ` `shim <https://godoc.org/github.com/hyperledger/fabric-chaincode-go/shim>`__ ``shim.ChaincodeStubInterface``  ഉപയോഗിക്കുന്നത് ശ്രദ്ധിക്കുക. ``GetQueryResultForQueryStringWithPagination ()`` പേജ്‌സൈസിനൊപ്പം ചോദ്യ സ്ട്രിംഗും ഷിം API- ലേക്ക് ബുക്ക്മാർക്കും നൽകുന്നു ``GetQueryResultWithPagination ()``.

.. code:: bash

  func (t *SimpleChaincode) queryMarblesWithPagination(stub shim.ChaincodeStubInterface, args []string) pb.Response {

  	//   0
  	// "queryString"
  	if len(args) < 3 {
  		return shim.Error("Incorrect number of arguments. Expecting 3")
  	}

  	queryString := args[0]
  	//return type of ParseInt is int64
  	pageSize, err := strconv.ParseInt(args[1], 10, 32)
  	if err != nil {
  		return shim.Error(err.Error())
  	}
  	bookmark := args[2]

  	queryResults, err := getQueryResultForQueryStringWithPagination(stub, queryString, int32(pageSize), bookmark)
  	if err != nil {
  		return shim.Error(err.Error())
  	}
  	return shim.Success(queryResults)
  }



ഇനിപ്പറയുന്ന ഉദാഹരണം ഒരു പിയർ കമാൻഡാണ്, അത്  ``3``  എന്ന പേജ് വലുപ്പമുള്ള ക്വറി മാർബിൾസ് വിത്ത്പാഗിനേഷനെ വിളിക്കുന്നു, കൂടാതെ ബുക്ക്മാർക്ക് ഒന്നും വ്യക്തമാക്കിയിട്ടില്ല.

.. tip:: ബുക്ക്‌മാർക്ക് ഒന്നും വ്യക്തമാക്കിയിട്ടില്ലെങ്കിൽ, അന്വേഷണം റെക്കോർഡുകളുടെ "ആദ്യ" പേജിൽ ആരംഭിക്കുന്നു.

:guilabel:`Try it yourself`

.. code:: bash

  // Rich Query with index name explicitly specified and a page size of 3:
  peer chaincode query -C $CHANNEL_NAME -n marbles -c '{"Args":["queryMarblesWithPagination", "{\"selector\":{\"docType\":\"marble\",\"owner\":\"tom\"}, \"use_index\":[\"_design/indexOwnerDoc\", \"indexOwner\"]}","3",""]}'	

ഇനിപ്പറയുന്ന പ്രതികരണം ലഭിച്ചു (വ്യക്തതയ്ക്കായി കാരേജ് റിട്ടേണുകൾ ചേർത്തു), അഞ്ച് മാർബിളുകളിൽ മൂന്നെണ്ണം മടക്കിനൽകുന്നു, കാരണം ``pagsize`` , ``3`` ആയി സജ്ജമാക്കി:

.. code:: bash

  [{"Key":"marble1", "Record":{"color":"blue","docType":"marble","name":"marble1","owner":"tom","size":35}},
   {"Key":"marble2", "Record":{"color":"yellow","docType":"marble","name":"marble2","owner":"tom","size":35}},
   {"Key":"marble3", "Record":{"color":"green","docType":"marble","name":"marble3","owner":"tom","size":20}}]
  [{"ResponseMetadata":{"RecordsCount":"3",
  "Bookmark":"g1AAAABLeJzLYWBgYMpgSmHgKy5JLCrJTq2MT8lPzkzJBYqz5yYWJeWkGoOkOWDSOSANIFk2iCyIyVySn5uVBQAGEhRz"}}]


.. note::  ഓരോ ചോദ്യത്തിനും കൊച്ച്ഡിബി ബുക്ക്മാർക്കുകൾ അദ്വിതീയമായി ജനറേറ്റുചെയ്യുന്നു, കൂടാതെ ഫല സെറ്റിൽ ഒരു പ്ലെയ്‌സ്‌ഹോൾഡറെ പ്രതിനിധീകരിക്കുന്നു. അടുത്ത സെറ്റ് ഫലങ്ങൾ വീണ്ടെടുക്കുന്നതിന് അന്വേഷണത്തിന്റെ തുടർന്നുള്ള ആവർത്തനത്തെക്കുറിച്ച് മടങ്ങിയ ബുക്ക്മാർക്ക് കൈമാറുക.

``3`` എന്ന പേജ് വലുപ്പമുള്ള queryMarblesWithPagination എന്ന് വിളിക്കാനുള്ള ഒരു പിയർ കമാൻഡാണ് ഇനിപ്പറയുന്നത്. ഈ സമയം ശ്രദ്ധിക്കുക, മുമ്പത്തെ ചോദ്യത്തിൽ നിന്ന് മടങ്ങിയ ബുക്ക്മാർക്ക് അന്വേഷണത്തിൽ ഉൾപ്പെടുന്നു.

:guilabel:`Try it yourself`

.. code:: bash

  peer chaincode query -C $CHANNEL_NAME -n marbles -c '{"Args":["queryMarblesWithPagination", "{\"selector\":{\"docType\":\"marble\",\"owner\":\"tom\"}, \"use_index\":[\"_design/indexOwnerDoc\", \"indexOwner\"]}","3","g1AAAABLeJzLYWBgYMpgSmHgKy5JLCrJTq2MT8lPzkzJBYqz5yYWJeWkGoOkOWDSOSANIFk2iCyIyVySn5uVBQAGEhRz"]}'

ഇനിപ്പറയുന്ന പ്രതികരണം ലഭിച്ചു (വ്യക്തതയ്ക്കായി കാരേജ് റിട്ടേണുകൾ ചേർത്തു). അവസാന രണ്ട് റെക്കോർഡുകൾ വീണ്ടെടുത്തു:

.. code:: bash

  [{"Key":"marble4", "Record":{"color":"purple","docType":"marble","name":"marble4","owner":"tom","size":20}},
   {"Key":"marble5", "Record":{"color":"blue","docType":"marble","name":"marble5","owner":"tom","size":40}}]
  [{"ResponseMetadata":{"RecordsCount":"2",
  "Bookmark":"g1AAAABLeJzLYWBgYMpgSmHgKy5JLCrJTq2MT8lPzkzJBYqz5yYWJeWkmoKkOWDSOSANIFk2iCyIyVySn5uVBQAGYhR1"}}]

അവസാന കമാൻഡ് queryMarblesWithPagination നെ ഒരു പേജ് വലുപ്പം ``3`` ഉം മുമ്പത്തെ അന്വേഷണത്തിൽ നിന്നുള്ള ബുക്ക്‌മാർക്കും ഉപയോഗിച്ച് വിളിക്കാനുള്ള ഒരു പിയർ കമാൻഡാണ്.

:guilabel:`Try it yourself`

.. code:: bash

    peer chaincode query -C $CHANNEL_NAME -n marbles -c '{"Args":["queryMarblesWithPagination", "{\"selector\":{\"docType\":\"marble\",\"owner\":\"tom\"}, \"use_index\":[\"_design/indexOwnerDoc\", \"indexOwner\"]}","3","g1AAAABLeJzLYWBgYMpgSmHgKy5JLCrJTq2MT8lPzkzJBYqz5yYWJeWkmoKkOWDSOSANIFk2iCyIyVySn5uVBQAGYhR1"]}'


ഇനിപ്പറയുന്ന പ്രതികരണം ലഭിച്ചു (വ്യക്തതയ്ക്കായി കാരേജ് റിട്ടേണുകൾ ചേർത്തു).
എല്ലാ പേജുകളും വീണ്ടെടുത്തതായി സൂചിപ്പിക്കുന്ന രേഖകളൊന്നും മടക്കിനൽകുന്നില്ല:

.. code:: bash

    []
    [{"ResponseMetadata":{"RecordsCount":"0",
    "Bookmark":"g1AAAABLeJzLYWBgYMpgSmHgKy5JLCrJTq2MT8lPzkzJBYqz5yYWJeWkmoKkOWDSOSANIFk2iCyIyVySn5uVBQAGYhR1"}}]

പേജിനേഷൻ ഉപയോഗിച്ച് ഒരു സെറ്റ് ക്ലയന്റ് ആപ്ലിക്കേഷന് എങ്ങനെ ആവർത്തനം ചെയ്യാമെന്നതിന്റെ ഒരു ഉദാഹരണത്തിനായി, `Marbles sample <https://github.com/hyperledger/fabric-samples/blob/{BRANCH}/chaincode/marbles02/go/marbles_chaincode.go>`__ .

.. _cdb-update-index:

ഒരു സൂചിക അപ്‌ഡേറ്റുചെയ്യുക
~~~~~~~~~~~~~~~

കാലക്രമേണ ഒരു സൂചിക അപ്‌ഡേറ്റ് ചെയ്യേണ്ടത് ആവശ്യമായി വന്നേക്കാം. ഇൻസ്റ്റാളുചെയ്യുന്ന ചെയിൻകോഡിന്റെ തുടർന്നുള്ള പതിപ്പുകളിലും ഇതേ സൂചിക നിലനിൽക്കാം. ഒരു സൂചിക അപ്‌ഡേറ്റ് ചെയ്യുന്നതിന്, യഥാർത്ഥ സൂചിക നിർവചനത്തിൽ ഡിസൈൻ ഡോക്യുമെന്റ്  ``ddoc`` ആട്രിബ്യൂട്ടും ഒരു സൂചിക നാമവും ഉൾപ്പെടുത്തിയിരിക്കണം. ഒരു സൂചിക നിർവചനം അപ്‌ഡേറ്റ് ചെയ്യുന്നതിന്, അതേ സൂചിക നാമം എന്നാൽ സൂചിക നിർവചനം മാറ്റുക. സൂചിക JSON ഫയൽ‌ എഡിറ്റുചെയ്‌ത് ഇൻ‌ഡെക്‌സിൽ‌ നിന്നും ഫീൽ‌ഡുകൾ‌ ചേർ‌ക്കുക അല്ലെങ്കിൽ‌ നീക്കംചെയ്യുക. ഫാബ്രിക് JSON സൂചിക തരം മാത്രമേ പിന്തുണയ്ക്കൂ. സൂചിക തരം മാറ്റുന്നത് പിന്തുണയ്‌ക്കുന്നില്ല. ചാനലിലേക്ക് ചെയിൻ‌കോഡ് നിർ‌വ്വചനം പ്രതിജ്ഞാബദ്ധമാകുമ്പോൾ‌ അപ്‌ഡേറ്റുചെയ്‌ത ഇൻ‌ഡെക്സ് നിർ‌വ്വചനം പിയറിന്റെ സ്റ്റേറ്റ് ഡാറ്റാബേസിലേക്ക് വീണ്ടും വിന്യസിക്കപ്പെടുന്നു. സൂചിക നാമത്തിലോ ``ddoc`` ആട്രിബ്യൂട്ടുകളിലോ വരുത്തിയ മാറ്റങ്ങൾ ഒരു പുതിയ സൂചിക സൃഷ്ടിക്കുന്നതിനിടയാക്കും, അത് നീക്കംചെയ്യുന്നതുവരെ യഥാർത്ഥ സൂചിക കൊച്ച്ഡിബിയിൽ മാറ്റമില്ല.

.. note::  സംസ്ഥാന ഡാറ്റാബേസിന് കാര്യമായ ഡാറ്റയുടെ അളവ് ഉണ്ടെങ്കിൽ, ഇൻഡെക്സ് പുനർനിർമ്മിക്കുന്നതിന് കുറച്ച് സമയമെടുക്കും, ഈ സമയത്ത് ചോദ്യങ്ങൾ പരാജയപ്പെടുകയോ കാലഹരണപ്പെടുകയോ ചെയ്യാമെന്ന് ചെയിൻകോഡ് അഭ്യർത്ഥിക്കുന്നു.

നിങ്ങളുടെ സൂചിക നിർ‌വ്വചനം ആവർത്തിക്കുന്നു
----------------------------------

ഒരു വികസന പരിതസ്ഥിതിയിൽ നിങ്ങളുടെ പിയറിന്റെ കൊച്ച്ഡിബി സ്റ്റേറ്റ് ഡാറ്റാബേസിലേക്ക് നിങ്ങൾക്ക് ആക്സസ് ഉണ്ടെങ്കിൽ, നിങ്ങളുടെ ചെയിൻകോഡ് അന്വേഷണങ്ങളെ പിന്തുണയ്ക്കുന്നതിനായി നിങ്ങൾക്ക് വിവിധ സൂചികകൾ ആവർത്തിച്ച് പരിശോധിക്കാൻ കഴിയും. ചെയിൻ‌കോഡിലെ ഏത് മാറ്റത്തിനും വീണ്ടും വിന്യാസം ആവശ്യമാണ്. സൂചികകൾ സൃഷ്ടിക്കുന്നതിനും അപ്‌ഡേറ്റ് ചെയ്യുന്നതിനും `CouchDB Fauxton interface <http://docs.couchdb.org/en/latest/fauxton/index.html>`__ അല്ലെങ്കിൽ ഒരു കമാൻഡ് ലൈൻ ചുരുളൻ യൂട്ടിലിറ്റി ഉപയോഗിക്കുക.

.. note:: കോച്ച്ഡിബിയിലേക്ക് സൂചികകൾ സൃഷ്ടിക്കുന്നതിനും അപ്ഡേറ്റ് ചെയ്യുന്നതിനും വിന്യസിക്കുന്നതിനുമുള്ള ഒരു വെബ് യുഐ ആണ് ഫോക്സ്റ്റൺ ഇന്റർഫേസ്. നിങ്ങൾക്ക് ഈ ഇന്റർഫേസ് പരീക്ഷിക്കാൻ താൽപ്പര്യമുണ്ടെങ്കിൽ, മാർബിൾസ് സാമ്പിളിലെ സൂചികയുടെ ഫോക്‌സ്റ്റൺ പതിപ്പിന്റെ ഫോർമാറ്റിന്റെ ഒരു ഉദാഹരണമുണ്ട്. നിങ്ങൾ CouchDB ഉപയോഗിച്ച് ടെസ്റ്റ് നെറ്റ്‌വർക്ക് വിന്യസിച്ചിട്ടുണ്ടെങ്കിൽ, ഒരു ബ്രസർ തുറന്ന് ```http://localhost:5984/_utils`` ലേക്ക് നാവിഗേറ്റുചെയ്യുന്നതിലൂടെ ഫോക്‌സ്റ്റൺ ഇന്റർഫേസ് ലോഡുചെയ്യാനാകും.

മറ്റൊരു തരത്തിൽ, ഫോക്‍സ്റ്റൺ യുഐ ഉപയോഗിക്കരുതെന്ന് നിങ്ങൾ ആഗ്രഹിക്കുന്നുവെങ്കിൽ, `` mychannel_marbles`` ഡാറ്റാബേസിൽ സൂചിക സൃഷ്ടിക്കാൻ ഉപയോഗിക്കാവുന്ന ചുരുളൻ കമാൻഡിന്റെ ഉദാഹരണമാണ് ഇനിപ്പറയുന്നവ:

.. code:: bash

  // Index for docType, owner.
  // Example curl command line to define index in the CouchDB channel_chaincode database
   curl -i -X POST -H "Content-Type: application/json" -d
          "{\"index\":{\"fields\":[\"docType\",\"owner\"]},
            \"name\":\"indexOwner\",
            \"ddoc\":\"indexOwnerDoc\",
            \"type\":\"json\"}" http://hostname:port/mychannel_marbles/_index

.. note:: നിങ്ങൾ CouchDB ഉപയോഗിച്ച് ക്രമീകരിച്ച ടെസ്റ്റ് നെറ്റ്‌വർക്ക് ഉപയോഗിക്കുകയാണെങ്കിൽ, മാറ്റിസ്ഥാപിക്കുക
 ഹോസ്റ്റ്നാമം:``localhost:5984`` ഉള്ള പോർട്ട്.

.. _cdb-delete-index:

ഒരു സൂചിക ഇല്ലാതാക്കുക
~~~~~~~~~~~~~~~

സൂചിക ഇല്ലാതാക്കൽ ഫാബ്രിക് ടൂളിംഗ് നിയന്ത്രിക്കുന്നില്ല. നിങ്ങൾക്ക് ഒരു സൂചിക ഇല്ലാതാക്കണമെങ്കിൽ, ഡാറ്റാബേസിനെതിരെ ഒരു ചുരുളൻ കമാൻഡ് സ്വമേധയാ നൽകുക അല്ലെങ്കിൽ ഫോക്സ്റ്റൺ ഇന്റർഫേസ് ഉപയോഗിച്ച് ഇല്ലാതാക്കുക.

ഒരു സൂചിക ഇല്ലാതാക്കാനുള്ള ചുരുളൻ കമാൻഡിന്റെ ഫോർമാറ്റ് ഇതായിരിക്കും:

.. code:: bash

   curl -X DELETE http://localhost:5984/{database_name}/_index/{design_doc}/json/{index_name} -H  "accept: */*" -H  "Host: localhost:5984"


ഈ ട്യൂട്ടോറിയലിൽ ഉപയോഗിച്ചിരിക്കുന്ന സൂചിക ഇല്ലാതാക്കാൻ, ചുരുളൻ കമാൻഡ് ഇതായിരിക്കും:

.. code:: bash

   curl -X DELETE http://localhost:5984/mychannel_marbles/_index/indexOwnerDoc/json/indexOwner -H  "accept: */*" -H  "Host: localhost:5984"



.. ക്രിയേറ്റീവ് കോമൺസ് ആട്രിബ്യൂഷൻ 4.0 അന്താരാഷ്ട്ര ലൈസൻസിന് കീഴിൽ ലൈസൻസ് നേടി
 https://creativecommons.org/licenses/by/4.0/
