# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, hyperledger
# This file is distributed under the same license as the
# hyperledger-fabricdocs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: hyperledger-fabricdocs master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-23 15:31-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../source/endorsement-policies.rst:2
msgid "Endorsement policies"
msgstr ""

#: ../../source/endorsement-policies.rst:4
msgid ""
"Every chaincode has an endorsement policy which specifies the set of "
"peers on a channel that must execute chaincode and endorse the execution "
"results in order for the transaction to be considered valid. These "
"endorsement policies define the organizations (through their peers) who "
"must \"endorse\" (i.e., approve of) the execution of a proposal."
msgstr ""

#: ../../source/endorsement-policies.rst:10
msgid ""
"Recall that **state**, represented by key-value pairs, is separate from "
"blockchain data. For more on this, check out our :doc:`ledger/ledger` "
"documentation."
msgstr ""

#: ../../source/endorsement-policies.rst:14
msgid ""
"As part of the transaction validation step performed by the peers, each "
"validating peer checks to make sure that the transaction contains the "
"appropriate **number** of endorsements and that they are from the "
"expected sources (both of these are specified in the endorsement policy)."
" The endorsements are also checked to make sure they're valid (i.e., that"
" they are valid signatures from valid certificates)."
msgstr ""

#: ../../source/endorsement-policies.rst:21
msgid "Multiple ways to require endorsement"
msgstr ""

#: ../../source/endorsement-policies.rst:23
msgid ""
"By default, endorsement policies are specified in the chaincode "
"definition, which is agreed to by channel members and then committed to a"
" channel (that is, one endorsement policy covers all of the state "
"associated with a chaincode)."
msgstr ""

#: ../../source/endorsement-policies.rst:27
msgid ""
"For private data collections, you can also specify an endorsement policy "
"at the private data collection level, which would override the chaincode "
"level endorsement policy for any keys in the private data collection, "
"thereby further restricting which organizations can write to a private "
"data collection."
msgstr ""

#: ../../source/endorsement-policies.rst:32
msgid ""
"Finally, there are cases where it may be necessary for a particular "
"public channel state or private data collection state (a particular key-"
"value pair, in other words) to have a different endorsement policy. This "
"**state-based endorsement** allows the chaincode-level or collection-"
"level endorsement policies to be overridden by a different policy for the"
" specified keys."
msgstr ""

#: ../../source/endorsement-policies.rst:38
msgid ""
"To illustrate the circumstances in which the various types of endorsement"
" policies might be used, consider a channel on which cars are being "
"exchanged. The \"creation\" --- also known as \"issuance\" -- of a car as"
" an asset that can be traded (putting the key-value pair that represents "
"it into the world state, in other words) would have to satisfy the "
"chaincode-level endorsement policy. To see how to set a chaincode-level "
"endorsement policy, check out the section below."
msgstr ""

#: ../../source/endorsement-policies.rst:45
msgid ""
"If the key representing the car requires a specific endorsement policy, "
"it can be defined either when the car is created or afterwards. There are"
" a number of reasons why it might be necessary or preferable to set a "
"state-specific endorsement policy. The car might have historical "
"importance or value that makes it necessary to have the endorsement of a "
"licensed appraiser. Also, the owner of the car (if they're a member of "
"the channel) might also want to ensure that their peer signs off on a "
"transaction. In both cases, **an endorsement policy is required for a "
"particular asset that is different from the default endorsement policies "
"for the other assets associated with that chaincode.**"
msgstr ""

#: ../../source/endorsement-policies.rst:55
msgid ""
"We'll show you how to define a state-based endorsement policy in a "
"subsequent section. But first, let's see how we set a chaincode-level "
"endorsement policy."
msgstr ""

#: ../../source/endorsement-policies.rst:59
msgid "Setting chaincode-level endorsement policies"
msgstr ""

#: ../../source/endorsement-policies.rst:61
msgid ""
"Chaincode-level endorsement policies are agreed to by channel members "
"when they approve a chaincode definition for their organization. A "
"sufficient number of channel members need to approve a chaincode "
"definition to meet the ``Channel/Application/LifecycleEndorsement`` "
"policy, which by default is set to a majority of channel members, before "
"the definition can be committed to the channel. Once the definition has "
"been committed, the chaincode is ready to use. Any invoke of the "
"chaincode that writes data to the ledger will need to be validated by "
"enough channel members to meet the endorsement policy."
msgstr ""

#: ../../source/endorsement-policies.rst:70
msgid ""
"You can specify an endorsement policy for a chainocode using the Fabric "
"SDKs. For an example, visit the `How to install and start your chaincode "
"<https://hyperledger.github.io/fabric-sdk-node/master/tutorial-chaincode-"
"lifecycle.html>`_ in the Node.js SDK documentation. You can also create "
"an endorsement policy from your CLI when you approve and commit a "
"chaincode definition with the Fabric peer binaries by using the "
"``--signature-policy`` flag."
msgstr ""

#: ../../source/endorsement-policies.rst:76
msgid ""
"Don't worry about the policy syntax (``'Org1.member'``, et all) right "
"now. We'll talk more about the syntax in the next section."
msgstr ""

#: ../../source/endorsement-policies.rst:79
#: ../../source/endorsement-policies.rst:98
#: ../../source/endorsement-policies.rst:110
#: ../../source/endorsement-policies.rst:169
msgid "For example:"
msgstr ""

#: ../../source/endorsement-policies.rst:85
msgid ""
"The above command approves the chaincode definition of ``mycc`` with the "
"policy ``AND('Org1.member', 'Org2.member')`` which would require that a "
"member of both Org1 and Org2 sign the transaction. After a sufficient "
"number of channel members approve a chaincode definition for ``mycc``, "
"the definition and endorsement policy can be committed to the channel "
"using the command below:"
msgstr ""

#: ../../source/endorsement-policies.rst:95
msgid ""
"Notice that, if the identity classification is enabled (see :doc:`msp`), "
"one can use the ``PEER`` role to restrict endorsement to only peers."
msgstr ""

#: ../../source/endorsement-policies.rst:105
msgid ""
"In addition to the specifying an endorsement policy from the CLI or SDK, "
"a chaincode can also use policies in the channel configuration as "
"endorsement policies. You can use the ``--channel-config-policy``flag to "
"select a channel policy with format used by the channel configuration and"
" by ACLs."
msgstr ""

#: ../../source/endorsement-policies.rst:116
msgid ""
"If you do not specify a policy, the chaincode definition will use the "
"``Channel/Application/Endorsement`` policy by default, which requires "
"that a transaction be validated by a majority of channel members. This "
"policy depends on the membership of the channel, so it will be updated "
"automatically when organizations are added or removed from a channel. One"
" advantage of using channel policies is that they can be written to be "
"updated automatically with channel membership."
msgstr ""

#: ../../source/endorsement-policies.rst:123
msgid ""
"If you specify an endorsement policy using the ``--signature-policy`` "
"flag or the SDK, you will need to update the policy when organizations "
"join or leave the channel. A new organization added to the channel after "
"the chaincode has been defined will be able to query a chaincode "
"(provided the query has appropriate authorization as defined by channel "
"policies and any application level checks enforced by the chaincode) but "
"will not be able to execute or endorse the chaincode. Only organizations "
"listed in the endorsement policy syntax will be able sign transactions."
msgstr ""

#: ../../source/endorsement-policies.rst:133
msgid "Endorsement policy syntax"
msgstr ""

#: ../../source/endorsement-policies.rst:135
msgid ""
"As you can see above, policies are expressed in terms of principals "
"(\"principals\" are identities matched to a role). Principals are "
"described as ``'MSP.ROLE'``, where ``MSP`` represents the required MSP ID"
" and ``ROLE`` represents one of the four accepted roles: ``member``, "
"``admin``, ``client``, and ``peer``."
msgstr ""

#: ../../source/endorsement-policies.rst:141
msgid "Here are a few examples of valid principals:"
msgstr ""

#: ../../source/endorsement-policies.rst:143
msgid "``'Org0.admin'``: any administrator of the ``Org0`` MSP"
msgstr ""

#: ../../source/endorsement-policies.rst:144
msgid "``'Org1.member'``: any member of the ``Org1`` MSP"
msgstr ""

#: ../../source/endorsement-policies.rst:145
msgid "``'Org1.client'``: any client of the ``Org1`` MSP"
msgstr ""

#: ../../source/endorsement-policies.rst:146
msgid "``'Org1.peer'``: any peer of the ``Org1`` MSP"
msgstr ""

#: ../../source/endorsement-policies.rst:148
msgid "The syntax of the language is:"
msgstr ""

#: ../../source/endorsement-policies.rst:150
msgid "``EXPR(E[, E...])``"
msgstr ""

#: ../../source/endorsement-policies.rst:152
msgid ""
"Where ``EXPR`` is either ``AND``, ``OR``, or ``OutOf``, and ``E`` is "
"either a principal (with the syntax described above) or another nested "
"call to ``EXPR``."
msgstr ""

#: ../../source/endorsement-policies.rst:156
msgid ""
"``AND('Org1.member', 'Org2.member', 'Org3.member')`` requests one "
"signature from each of the three principals."
msgstr ""

#: ../../source/endorsement-policies.rst:158
msgid ""
"``OR('Org1.member', 'Org2.member')`` requests one signature from either "
"one of the two principals."
msgstr ""

#: ../../source/endorsement-policies.rst:160
msgid ""
"``OR('Org1.member', AND('Org2.member', 'Org3.member'))`` requests either "
"one signature from a member of the ``Org1`` MSP or one signature from a "
"member of the ``Org2`` MSP and one signature from a member of the "
"``Org3`` MSP."
msgstr ""

#: ../../source/endorsement-policies.rst:163
msgid ""
"``OutOf(1, 'Org1.member', 'Org2.member')``, which resolves to the same "
"thing as ``OR('Org1.member', 'Org2.member')``."
msgstr ""

#: ../../source/endorsement-policies.rst:165
msgid ""
"Similarly, ``OutOf(2, 'Org1.member', 'Org2.member')`` is equivalent to "
"``AND('Org1.member', 'Org2.member')``, and ``OutOf(2, 'Org1.member', "
"'Org2.member', 'Org3.member')`` is equivalent to ``OR(AND('Org1.member', "
"'Org2.member'), AND('Org1.member', 'Org3.member'), AND('Org2.member', "
"'Org3.member'))``."
msgstr ""

#: ../../source/endorsement-policies.rst:172
msgid "Setting collection-level endorsement policies"
msgstr ""

#: ../../source/endorsement-policies.rst:173
msgid ""
"Similar to chaincode-level endorsement policies, when you approve and "
"commit a chaincode definition, you can also specify the chaincode's "
"private data collections and corresponding collection-level endorsement "
"policies. If a collection-level endorsement policy is set, transactions "
"that write to a private data collection key will require that the "
"specified organization peers have endorsed the transaction."
msgstr ""

#: ../../source/endorsement-policies.rst:179
msgid ""
"You can use collection-level endorsement policies to restrict which "
"organization peers can write to the private data collection key "
"namespace, for example to ensure that non-authorized organizations cannot"
" write to a collection, and to have confidence that any state in a "
"private data collection has been endorsed by the required collection "
"organization(s)."
msgstr ""

#: ../../source/endorsement-policies.rst:185
msgid ""
"The collection-level endorsement policy may be less restrictive or more "
"restrictive than the chaincode-level endorsement policy and the "
"collection's private data distribution policy.  For example a majority of"
" organizations may be required to endorse a chaincode transaction, but a "
"specific organization may be required to endorse a transaction that "
"includes a key in a specific collection."
msgstr ""

#: ../../source/endorsement-policies.rst:191
msgid ""
"The syntax for collection-level endorsement policies exactly matches the "
"syntax for chaincode-level endorsement policies --- in the collection "
"configuration you can specify an ``endorsementPolicy`` with either a "
"``signaturePolicy`` or ``channelConfigPolicy``. For more details see :doc"
":`private-data-arch`."
msgstr ""

#: ../../source/endorsement-policies.rst:199
msgid "Setting key-level endorsement policies"
msgstr ""

#: ../../source/endorsement-policies.rst:201
msgid ""
"Setting regular chaincode-level or collection-level endorsement policies "
"is tied to the lifecycle of the corresponding chaincode. They can only be"
" set or modified when defining the chaincode on a channel."
msgstr ""

#: ../../source/endorsement-policies.rst:205
msgid ""
"In contrast, key-level endorsement policies can be set and modified in a "
"more granular fashion from within a chaincode. The modification is part "
"of the read-write set of a regular transaction."
msgstr ""

#: ../../source/endorsement-policies.rst:209
msgid ""
"The shim API provides the following functions to set and retrieve an "
"endorsement policy for/from a regular key."
msgstr ""

#: ../../source/endorsement-policies.rst:212
msgid ""
"``ep`` below stands for the \"endorsement policy\", which can be "
"expressed either by using the same syntax described above or by using the"
" convenience function described below. Either method will generate a "
"binary version of the endorsement policy that can be consumed by the "
"basic shim API."
msgstr ""

#: ../../source/endorsement-policies.rst:223
msgid ""
"For keys that are part of :doc:`private-data/private-data` in a "
"collection the following functions apply:"
msgstr ""

#: ../../source/endorsement-policies.rst:231
msgid ""
"To help set endorsement policies and marshal them into validation "
"parameter byte arrays, the Go shim provides an extension with convenience"
" functions that allow the chaincode developer to deal with endorsement "
"policies in terms of the MSP identifiers of organizations, see "
"`KeyEndorsementPolicy <https://godoc.org/github.com/hyperledger/fabric-"
"chaincode-go/pkg/statebased#KeyEndorsementPolicy>`_:"
msgstr ""

#: ../../source/endorsement-policies.rst:254
msgid ""
"For example, to set an endorsement policy for a key where two specific "
"orgs are required to endorse the key change, pass both org ``MSPIDs`` to "
"``AddOrgs()``, and then call ``Policy()`` to construct the endorsement "
"policy byte array that can be passed to "
"``SetStateValidationParameter()``."
msgstr ""

#: ../../source/endorsement-policies.rst:259
msgid ""
"To add the shim extension to your chaincode as a dependency, see "
":ref:`vendoring`."
msgstr ""

#: ../../source/endorsement-policies.rst:262
#: ../../source/endorsement-policies.rst:269
msgid "Validation"
msgstr ""

#: ../../source/endorsement-policies.rst:264
msgid ""
"At commit time, setting a value of a key is no different from setting the"
" endorsement policy of a key --- both update the state of the key and are"
" validated based on the same rules."
msgstr ""

#: ../../source/endorsement-policies.rst:269
msgid "no validation parameter set"
msgstr ""

#: ../../source/endorsement-policies.rst:269
msgid "validation parameter set"
msgstr ""

#: ../../source/endorsement-policies.rst:271
msgid "modify value"
msgstr ""

#: ../../source/endorsement-policies.rst:271
#: ../../source/endorsement-policies.rst:273
msgid "check chaincode or collection ep"
msgstr ""

#: ../../source/endorsement-policies.rst:271
#: ../../source/endorsement-policies.rst:273
msgid "check key-level ep"
msgstr ""

#: ../../source/endorsement-policies.rst:273
msgid "modify key-level ep"
msgstr ""

#: ../../source/endorsement-policies.rst:276
msgid ""
"As we discussed above, if a key is modified and no key-level endorsement "
"policy is present, the chaincode-level or collection-level endorsement "
"policy applies by default. This is also true when a key-level endorsement"
" policy is set for a key for the first time --- the new key-level "
"endorsement policy must first be endorsed according to the pre-existing "
"chaincode-level or collection-level endorsement policy."
msgstr ""

#: ../../source/endorsement-policies.rst:282
msgid ""
"If a key is modified and a key-level endorsement policy is present, the "
"key-level endorsement policy overrides the chaincode-level or collection-"
"level endorsement policy. In practice, this means that the key-level "
"endorsement policy can be either less restrictive or more restrictive "
"than the chaincode-level or collection-level endorsement policies. "
"Because the chaincode-level or collection-level endorsement policy must "
"be satisfied in order to set a key-level endorsement policy for the first"
" time, no trust assumptions have been violated."
msgstr ""

#: ../../source/endorsement-policies.rst:289
msgid ""
"If a key's endorsement policy is removed (set to nil), the chaincode-"
"level or collection-level endorsement policy becomes the default again."
msgstr ""

#: ../../source/endorsement-policies.rst:292
msgid ""
"If a transaction modifies multiple keys with different associated key-"
"level endorsement policies, all of these policies need to be satisfied in"
" order for the transaction to be valid."
msgstr ""

