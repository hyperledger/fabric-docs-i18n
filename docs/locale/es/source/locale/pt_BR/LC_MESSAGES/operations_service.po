# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, hyperledger
# This file is distributed under the same license as the
# hyperledger-fabricdocs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: hyperledger-fabricdocs master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-23 15:31-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../source/operations_service.rst:2
msgid "The Operations Service"
msgstr ""

#: ../../source/operations_service.rst:4
msgid ""
"The peer and the orderer host an HTTP server that offers a RESTful "
"\"operations\" API. This API is unrelated to the Fabric network services "
"and is intended to be used by operators, not administrators or \"users\" "
"of the network."
msgstr ""

#: ../../source/operations_service.rst:8
msgid "The API exposes the following capabilities:"
msgstr ""

#: ../../source/operations_service.rst:10
msgid "Log level management"
msgstr ""

#: ../../source/operations_service.rst:11
msgid "Health checks"
msgstr ""

#: ../../source/operations_service.rst:12
msgid "Prometheus target for operational metrics (when configured)"
msgstr ""

#: ../../source/operations_service.rst:15
msgid "Configuring the Operations Service"
msgstr ""

#: ../../source/operations_service.rst:17
msgid "The operations service requires two basic pieces of configuration:"
msgstr ""

#: ../../source/operations_service.rst:19
msgid "The **address** and **port** to listen on."
msgstr ""

#: ../../source/operations_service.rst:20
msgid ""
"The **TLS certificates** and **keys** to use for authentication and "
"encryption. Note, **these certificates should be generated by a separate "
"and dedicated CA**. Do not use a CA that has generated certificates for "
"any organizations in any channels."
msgstr ""

#: ../../source/operations_service.rst:26
#: ../../source/operations_service.rst:232
#: ../../source/operations_service.rst:264
msgid "Peer"
msgstr ""

#: ../../source/operations_service.rst:28
msgid ""
"For each peer, the operations server can be configured in the "
"``operations`` section of ``core.yaml``:"
msgstr ""

#: ../../source/operations_service.rst:59
msgid ""
"The ``listenAddress`` key defines the host and port that the operation "
"server will listen on. If the server should listen on all addresses, the "
"host portion can be omitted."
msgstr ""

#: ../../source/operations_service.rst:63
msgid ""
"The ``tls`` section is used to indicate whether or not TLS is enabled for"
" the operations service, the location of the service's certificate and "
"private key, and the locations of certificate authority root certificates"
" that should be trusted for client authentication. When ``enabled`` is "
"true, most of the operations service endpoints require client "
"authentication, therefore ``clientRootCAs.files`` must be set. When "
"``clientAuthRequired`` is ``true``, the TLS layer will require clients to"
" provide a certificate for authentication on every request. See "
"Operations Security section below for more details."
msgstr ""

#: ../../source/operations_service.rst:73
#: ../../source/operations_service.rst:244
#: ../../source/operations_service.rst:285
msgid "Orderer"
msgstr ""

#: ../../source/operations_service.rst:75
msgid ""
"For each orderer, the operations server can be configured in the "
"`Operations` section of ``orderer.yaml``:"
msgstr ""

#: ../../source/operations_service.rst:103
msgid ""
"The ``ListenAddress`` key defines the host and port that the operations "
"server will listen on. If the server should listen on all addresses, the "
"host portion can be omitted."
msgstr ""

#: ../../source/operations_service.rst:107
msgid ""
"The ``TLS`` section is used to indicate whether or not TLS is enabled for"
" the operations service, the location of the service's certificate and "
"private key, and the locations of certificate authority root certificates"
" that should be trusted for client authentication.   When ``Enabled`` is "
"true, most of the operations service endpoints require client "
"authentication, therefore ``RootCAs`` must be set. When "
"``ClientAuthRequired`` is ``true``, the TLS layer will require clients to"
" provide a certificate for authentication on every request. See "
"Operations Security section below for more details."
msgstr ""

#: ../../source/operations_service.rst:117
msgid "Operations Security"
msgstr ""

#: ../../source/operations_service.rst:119
msgid ""
"As the operations service is focused on operations and intentionally "
"unrelated to the Fabric network, it does not use the Membership Services "
"Provider for access control. Instead, the operations service relies "
"entirely on mutual TLS with client certificate authentication."
msgstr ""

#: ../../source/operations_service.rst:124
msgid ""
"When TLS is disabled, authorization is bypassed and any client that can "
"connect to the operations endpoint will be able to use the API."
msgstr ""

#: ../../source/operations_service.rst:127
msgid ""
"When TLS is enabled, a valid client certificate must be provided in order"
" to access all resources unless explicitly noted otherwise below."
msgstr ""

#: ../../source/operations_service.rst:130
msgid ""
"When clientAuthRequired is also enabled, the TLS layer will require a "
"valid client certificate regardless of the resource being accessed."
msgstr ""

#: ../../source/operations_service.rst:134
msgid "Log Level Management"
msgstr ""

#: ../../source/operations_service.rst:136
msgid ""
"The operations service provides a ``/logspec`` resource that operators "
"can use to manage the active logging spec for a peer or orderer. The "
"resource is a conventional REST resource and supports ``GET`` and ``PUT``"
" requests."
msgstr ""

#: ../../source/operations_service.rst:140
msgid ""
"When a ``GET /logspec`` request is received by the operations service, it"
" will respond with a JSON payload that contains the current logging "
"specification:"
msgstr ""

#: ../../source/operations_service.rst:147
msgid ""
"When a ``PUT /logspec`` request is received by the operations service, it"
" will read the body as a JSON payload. The payload must consist of a "
"single attribute named ``spec``."
msgstr ""

#: ../../source/operations_service.rst:155
msgid ""
"If the spec is activated successfully, the service will respond with a "
"``204 \"No Content\"`` response. If an error occurs, the service will "
"respond with a ``400 \"Bad Request\"`` and an error payload:"
msgstr ""

#: ../../source/operations_service.rst:164
msgid "Health Checks"
msgstr ""

#: ../../source/operations_service.rst:166
msgid ""
"The operations service provides a ``/healthz`` resource that operators "
"can use to help determine the liveness and health of peers and orderers. "
"The resource is a conventional REST resource that supports GET requests. "
"The implementation is intended to be compatible with the liveness probe "
"model used by Kubernetes but can be used in other contexts."
msgstr ""

#: ../../source/operations_service.rst:172
msgid ""
"When a ``GET /healthz`` request is received, the operations service will "
"call all registered health checkers for the process. When all of the "
"health checkers return successfully, the operations service will respond "
"with a ``200 \"OK\"`` and a JSON body:"
msgstr ""

#: ../../source/operations_service.rst:184
msgid ""
"If one or more of the health checkers returns an error, the operations "
"service will respond with a ``503 \"Service Unavailable\"`` and a JSON "
"body that includes information about which health checker failed:"
msgstr ""

#: ../../source/operations_service.rst:201
msgid ""
"In the current version, the only health check that is registered is for "
"Docker. Future versions will be enhanced to add additional health checks."
msgstr ""

#: ../../source/operations_service.rst:204
msgid ""
"When TLS is enabled, a valid client certificate is not required to use "
"this service unless ``clientAuthRequired`` is set to ``true``."
msgstr ""

#: ../../source/operations_service.rst:208
msgid "Metrics"
msgstr ""

#: ../../source/operations_service.rst:210
msgid ""
"Some components of the Fabric peer and orderer expose metrics that can "
"help provide insight into the behavior of the system. Operators and "
"administrators can use this information to better understand how the "
"system is performing over time."
msgstr ""

#: ../../source/operations_service.rst:216
msgid "Configuring Metrics"
msgstr ""

#: ../../source/operations_service.rst:218
msgid ""
"Fabric provides two ways to expose metrics: a **pull** model based on "
"Prometheus and a **push** model based on StatsD."
msgstr ""

#: ../../source/operations_service.rst:222
msgid "Prometheus"
msgstr ""

#: ../../source/operations_service.rst:224
msgid ""
"A typical Prometheus deployment scrapes metrics by requesting them from "
"an HTTP endpoint exposed by instrumented targets. As Prometheus is "
"responsible for requesting the metrics, it is considered a pull system."
msgstr ""

#: ../../source/operations_service.rst:228
msgid ""
"When configured, a Fabric peer or orderer will present a ``/metrics`` "
"resource on the operations service."
msgstr ""

#: ../../source/operations_service.rst:234
msgid ""
"A peer can be configured to expose a ``/metrics`` endpoint for Prometheus"
" to scrape by setting the metrics provider to ``prometheus`` in the "
"``metrics`` section of ``core.yaml``."
msgstr ""

#: ../../source/operations_service.rst:246
msgid ""
"An orderer can be configured to expose a ``/metrics`` endpoint for "
"Prometheus to scrape by setting the metrics provider to ``prometheus`` in"
" the ``Metrics`` section of ``orderer.yaml``."
msgstr ""

#: ../../source/operations_service.rst:256
msgid "StatsD"
msgstr ""

#: ../../source/operations_service.rst:258
msgid ""
"StatsD is a simple statistics aggregation daemon. Metrics are sent to a "
"``statsd`` daemon where they are collected, aggregated, and pushed to a "
"backend for visualization and alerting. As this model requires "
"instrumented processes to send metrics data to StatsD, this is considered"
" a push system."
msgstr ""

#: ../../source/operations_service.rst:266
msgid ""
"A peer can be configured to send metrics to StatsD by setting the metrics"
" provider to ``statsd`` in the ``metrics`` section of ``core.yaml``. The "
"``statsd`` subsection must also be configured with the address of the "
"StatsD daemon, the network type to use (``tcp`` or ``udp``), and how "
"often to send the metrics. An optional ``prefix`` may be specified to "
"help differentiate the source of the metrics --- for example, "
"differentiating metrics coming from separate peers --- that would be "
"prepended to all generated metrics."
msgstr ""

#: ../../source/operations_service.rst:287
msgid ""
"An orderer can be configured to send metrics to StatsD by setting the "
"metrics provider to ``statsd`` in the ``Metrics`` section of "
"``orderer.yaml``. The ``Statsd`` subsection must also be configured with "
"the address of the StatsD daemon, the network type to use (``tcp`` or "
"``udp``), and how often to send the metrics. An optional ``prefix`` may "
"be specified to help differentiate the source of the metrics."
msgstr ""

#: ../../source/operations_service.rst:304
msgid ""
"For a look at the different metrics that are generated, check out "
":doc:`metrics_reference`."
msgstr ""

