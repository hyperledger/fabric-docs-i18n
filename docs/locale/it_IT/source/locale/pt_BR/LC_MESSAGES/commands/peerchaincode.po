# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, hyperledger
# This file is distributed under the same license as the
# hyperledger-fabricdocs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: hyperledger-fabricdocs master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-24 19:11-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../source/commands/peerchaincode.md:1
msgid "peer chaincode"
msgstr ""

#: ../../source/commands/peerchaincode.md:3
msgid ""
"The peer chaincode command allows administrators to perform chaincode "
"related operations on a peer, such as installing, instantiating, "
"invoking, packaging, querying, and upgrading chaincode."
msgstr ""

#: ../../source/commands/peerchaincode.md:7
msgid "Syntax"
msgstr ""

#: ../../source/commands/peerchaincode.md:9
msgid "The peer chaincode command has the following subcommands:"
msgstr ""

#: ../../source/commands/peerchaincode.md:11
msgid "install"
msgstr ""

#: ../../source/commands/peerchaincode.md:12
msgid "instantiate"
msgstr ""

#: ../../source/commands/peerchaincode.md:13
msgid "invoke"
msgstr ""

#: ../../source/commands/peerchaincode.md:14
msgid "list"
msgstr ""

#: ../../source/commands/peerchaincode.md:15
msgid "package"
msgstr ""

#: ../../source/commands/peerchaincode.md:16
msgid "query"
msgstr ""

#: ../../source/commands/peerchaincode.md:17
msgid "signpackage"
msgstr ""

#: ../../source/commands/peerchaincode.md:18
msgid "upgrade"
msgstr ""

#: ../../source/commands/peerchaincode.md:20
msgid ""
"The different subcommand options (install, instantiate...) relate to the "
"different chaincode operations that are relevant to a peer. For example, "
"use the peer chaincode install subcommand option to install a chaincode "
"on a peer, or the peer chaincode query subcommand option to query a "
"chaincode for the current value on a peer's ledger."
msgstr ""

#: ../../source/commands/peerchaincode.md:26
msgid ""
"Each peer chaincode subcommand is described together with its options in "
"its own section in this topic."
msgstr ""

#: ../../source/commands/peerchaincode.md:29
msgid "Flags"
msgstr ""

#: ../../source/commands/peerchaincode.md:31
msgid ""
"Each peer chaincode subcommand has both a set of flags specific to an "
"individual subcommand, as well as a set of global flags that relate to "
"all peer chaincode subcommands. Not all subcommands would use these "
"flags. For instance, the query subcommand does not need the --orderer "
"flag."
msgstr ""

#: ../../source/commands/peerchaincode.md:36
msgid ""
"The individual flags are described with the relevant subcommand. The "
"global flags are"
msgstr ""

#: ../../source/commands/peerchaincode.md:39
msgid "--cafile <string>"
msgstr ""

#: ../../source/commands/peerchaincode.md:41
msgid ""
"Path to file containing PEM-encoded trusted certificate(s) for the "
"ordering endpoint"
msgstr ""

#: ../../source/commands/peerchaincode.md:44
msgid "--certfile <string>"
msgstr ""

#: ../../source/commands/peerchaincode.md:46
msgid ""
"Path to file containing PEM-encoded X509 public key to use for mutual TLS"
" communication with the orderer endpoint"
msgstr ""

#: ../../source/commands/peerchaincode.md:49
msgid "--keyfile <string>"
msgstr ""

#: ../../source/commands/peerchaincode.md:51
msgid ""
"Path to file containing PEM-encoded private key to use for mutual TLS "
"communication with the orderer endpoint"
msgstr ""

#: ../../source/commands/peerchaincode.md:54
msgid "-o or --orderer <string>"
msgstr ""

#: ../../source/commands/peerchaincode.md:56
msgid "Ordering service endpoint specified as <hostname or IP address>:<port>"
msgstr ""

#: ../../source/commands/peerchaincode.md:58
msgid "--ordererTLSHostnameOverride <string>"
msgstr ""

#: ../../source/commands/peerchaincode.md:60
msgid ""
"The hostname override to use when validating the TLS connection to the "
"orderer"
msgstr ""

#: ../../source/commands/peerchaincode.md:62
msgid "--tls"
msgstr ""

#: ../../source/commands/peerchaincode.md:64
msgid "Use TLS when communicating with the orderer endpoint"
msgstr ""

#: ../../source/commands/peerchaincode.md:66
msgid "--transient <string>"
msgstr ""

#: ../../source/commands/peerchaincode.md:68
msgid "Transient map of arguments in JSON encoding"
msgstr ""

#: ../../source/commands/peerchaincode.md:70
msgid "peer chaincode install"
msgstr ""

#: ../../source/commands/peerchaincode.md:101
msgid "peer chaincode instantiate"
msgstr ""

#: ../../source/commands/peerchaincode.md:136
msgid "peer chaincode invoke"
msgstr ""

#: ../../source/commands/peerchaincode.md:168
msgid "peer chaincode list"
msgstr ""

#: ../../source/commands/peerchaincode.md:197
msgid "peer chaincode package"
msgstr ""

#: ../../source/commands/peerchaincode.md:228
msgid "peer chaincode query"
msgstr ""

#: ../../source/commands/peerchaincode.md:259
msgid "peer chaincode signpackage"
msgstr ""

#: ../../source/commands/peerchaincode.md:282
msgid "peer chaincode upgrade"
msgstr ""

#: ../../source/commands/peerchaincode.md:317
msgid "Example Usage"
msgstr ""

#: ../../source/commands/peerchaincode.md:319
msgid "peer chaincode instantiate examples"
msgstr ""

#: ../../source/commands/peerchaincode.md:321
msgid ""
"Here are some examples of the peer chaincode instantiate command, which "
"instantiates the chaincode named mycc at version 1.0 on channel "
"mychannel:"
msgstr ""

#: ../../source/commands/peerchaincode.md:325
msgid ""
"Using the --tls and --cafile global flags to instantiate the chaincode in"
" a network with TLS enabled:"
msgstr ""

#: ../../source/commands/peerchaincode.md:338
msgid ""
"Using only the command-specific options to instantiate the chaincode in a"
" network with TLS disabled:"
msgstr ""

#: ../../source/commands/peerchaincode.md:350
msgid "peer chaincode invoke example"
msgstr ""

#: ../../source/commands/peerchaincode.md:352
msgid "Here is an example of the peer chaincode invoke command:"
msgstr ""

#: ../../source/commands/peerchaincode.md:354
msgid ""
"Invoke the chaincode named mycc at version 1.0 on channel mychannel on "
"peer0.org1.example.com:7051 and peer0.org2.example.com:9051 (the peers "
"defined by --peerAddresses), requesting to move 10 units from variable a "
"to variable b:"
msgstr ""

#: ../../source/commands/peerchaincode.md:373
msgid ""
"Here you can see that the invoke was submitted successfully based on the "
"log message:"
msgstr ""

#: ../../source/commands/peerchaincode.md:381
msgid ""
"A successful response indicates that the transaction was submitted for "
"ordering successfully. The transaction will then be added to a block and,"
" finally, validated or invalidated by each peer on the channel."
msgstr ""

#: ../../source/commands/peerchaincode.md:385
msgid "peer chaincode list example"
msgstr ""

#: ../../source/commands/peerchaincode.md:387
msgid "Here are some examples of the peer chaincode list  command:"
msgstr ""

#: ../../source/commands/peerchaincode.md:389
msgid "Using the --installed flag to list the chaincodes installed on a peer."
msgstr ""

#: ../../source/commands/peerchaincode.md:399
msgid ""
"You can see that the peer has installed a chaincode called mycc which is "
"at version 1.0."
msgstr ""

#: ../../source/commands/peerchaincode.md:402
msgid ""
"Using the --instantiated in combination with the -C (channel ID) flag to "
"list the chaincodes instantiated on a channel."
msgstr ""

#: ../../source/commands/peerchaincode.md:414
msgid ""
"You can see that chaincode mycc at version 1.0 is instantiated on channel"
" mychannel."
msgstr ""

#: ../../source/commands/peerchaincode.md:417
msgid "peer chaincode package example"
msgstr ""

#: ../../source/commands/peerchaincode.md:419
msgid ""
"Here is an example of the peer chaincode package command, which packages "
"the chaincode named mycc at version 1.1, creates the chaincode deployment"
" spec, signs the package using the local MSP, and outputs it as "
"ccpack.out:"
msgstr ""

#: ../../source/commands/peerchaincode.md:464
msgid ""
"peer chaincode signpackage ccwith1sig.pak ccwith2sig.pak Wrote signed "
"package to ccwith2sig.pak successfully 2018-02-24 19:32:47.189 EST [main]"
" main -> INFO 002 Exiting....."
msgstr ""

#~ msgid "peer chaincode"
#~ msgstr ""

#~ msgid ""
#~ "The peer chaincode command allows "
#~ "administrators to perform chaincode related"
#~ " operations on a peer, such as "
#~ "installing, instantiating, invoking, packaging, "
#~ "querying, and upgrading chaincode."
#~ msgstr ""

#~ msgid "Syntax"
#~ msgstr ""

#~ msgid "The peer chaincode command has the following subcommands:"
#~ msgstr ""

#~ msgid ""
#~ "The different subcommand options (install, "
#~ "instantiate...) relate to the different "
#~ "chaincode operations that are relevant "
#~ "to a peer. For example, use the"
#~ " peer chaincode install subcommand option"
#~ " to install a chaincode on a "
#~ "peer, or the peer chaincode query "
#~ "subcommand option to query a chaincode"
#~ " for the current value on a "
#~ "peer's ledger."
#~ msgstr ""

#~ msgid "Flags"
#~ msgstr ""

#~ msgid ""
#~ "Each peer chaincode subcommand has both"
#~ " a set of flags specific to an"
#~ " individual subcommand, as well as a"
#~ " set of global flags that relate "
#~ "to all peer chaincode subcommands. Not"
#~ " all subcommands would use these "
#~ "flags. For instance, the query "
#~ "subcommand does not need the --orderer"
#~ " flag."
#~ msgstr ""

#~ msgid "--cafile <string>"
#~ msgstr ""

#~ msgid "--certfile <string>"
#~ msgstr ""

#~ msgid "--keyfile <string>"
#~ msgstr ""

#~ msgid "-o or --orderer <string>"
#~ msgstr ""

#~ msgid "Ordering service endpoint specified as <hostname or IP address>:<port>"
#~ msgstr ""

#~ msgid "--ordererTLSHostnameOverride <string>"
#~ msgstr ""

#~ msgid "--tls"
#~ msgstr ""

#~ msgid "--transient <string>"
#~ msgstr ""

#~ msgid "peer chaincode install"
#~ msgstr ""

#~ msgid "peer chaincode instantiate"
#~ msgstr ""

#~ msgid "peer chaincode invoke"
#~ msgstr ""

#~ msgid "peer chaincode list"
#~ msgstr ""

#~ msgid "peer chaincode package"
#~ msgstr ""

#~ msgid "peer chaincode query"
#~ msgstr ""

#~ msgid "peer chaincode signpackage"
#~ msgstr ""

#~ msgid "peer chaincode upgrade"
#~ msgstr ""

#~ msgid "Example Usage"
#~ msgstr ""

#~ msgid "peer chaincode instantiate examples"
#~ msgstr ""

#~ msgid ""
#~ "Here are some examples of the peer"
#~ " chaincode instantiate command, which "
#~ "instantiates the chaincode named mycc at"
#~ " version 1.0 on channel mychannel:"
#~ msgstr ""

#~ msgid ""
#~ "Using the --tls and --cafile global "
#~ "flags to instantiate the chaincode in"
#~ " a network with TLS enabled:"
#~ msgstr ""

#~ msgid "peer chaincode invoke example"
#~ msgstr ""

#~ msgid "Here is an example of the peer chaincode invoke command:"
#~ msgstr ""

#~ msgid ""
#~ "Invoke the chaincode named mycc at "
#~ "version 1.0 on channel mychannel on "
#~ "peer0.org1.example.com:7051 and "
#~ "peer0.org2.example.com:9051 (the peers defined "
#~ "by --peerAddresses), requesting to move "
#~ "10 units from variable a to "
#~ "variable b:"
#~ msgstr ""

#~ msgid "peer chaincode list example"
#~ msgstr ""

#~ msgid "Here are some examples of the peer chaincode list  command:"
#~ msgstr ""

#~ msgid "Using the --installed flag to list the chaincodes installed on a peer."
#~ msgstr ""

#~ msgid ""
#~ "You can see that the peer has "
#~ "installed a chaincode called mycc which"
#~ " is at version 1.0."
#~ msgstr ""

#~ msgid ""
#~ "Using the --instantiated in combination "
#~ "with the -C (channel ID) flag to"
#~ " list the chaincodes instantiated on "
#~ "a channel."
#~ msgstr ""

#~ msgid ""
#~ "You can see that chaincode mycc at"
#~ " version 1.0 is instantiated on "
#~ "channel mychannel."
#~ msgstr ""

#~ msgid "peer chaincode package example"
#~ msgstr ""

#~ msgid ""
#~ "Here is an example of the peer "
#~ "chaincode package command, which packages "
#~ "the chaincode named mycc at version "
#~ "1.1, creates the chaincode deployment "
#~ "spec, signs the package using the "
#~ "local MSP, and outputs it as "
#~ "ccpack.out:"
#~ msgstr ""

#~ msgid ""
#~ "peer chaincode signpackage ccwith1sig.pak "
#~ "ccwith2sig.pak Wrote signed package to "
#~ "ccwith2sig.pak successfully 2018-02-24 19:32:47.189"
#~ " EST [main] main -> INFO 002 "
#~ "Exiting....."
#~ msgstr ""

#~ msgid "# peer chaincode"
#~ msgstr ""

#~ msgid ""
#~ "The `peer chaincode` command allows "
#~ "administrators to perform chaincode related"
#~ " operations on a peer, such as "
#~ "installing, instantiating, invoking, packaging, "
#~ "querying, and upgrading chaincode."
#~ msgstr ""

#~ msgid "## Syntax"
#~ msgstr ""

#~ msgid "The `peer chaincode` command has the following subcommands:"
#~ msgstr ""

#~ msgid ""
#~ "The different subcommand options (install, "
#~ "instantiate...) relate to the different "
#~ "chaincode operations that are relevant "
#~ "to a peer. For example, use the"
#~ " `peer chaincode install` subcommand option"
#~ " to install a chaincode on a "
#~ "peer, or the `peer chaincode query` "
#~ "subcommand option to query a chaincode"
#~ " for the current value on a "
#~ "peer's ledger."
#~ msgstr ""

#~ msgid "## Flags"
#~ msgstr ""

#~ msgid ""
#~ "Each `peer chaincode` subcommand has "
#~ "both a set of flags specific to"
#~ " an individual subcommand, as well as"
#~ " a set of global flags that "
#~ "relate to all `peer chaincode` "
#~ "subcommands. Not all subcommands would "
#~ "use these flags. For instance, the "
#~ "`query` subcommand does not need the "
#~ "`--orderer` flag."
#~ msgstr ""

#~ msgid "`--cafile <string>`"
#~ msgstr ""

#~ msgid "`--certfile <string>`"
#~ msgstr ""

#~ msgid "`--keyfile <string>`"
#~ msgstr ""

#~ msgid "`-o` or `--orderer <string>`"
#~ msgstr ""

#~ msgid ""
#~ "Ordering service endpoint specified as "
#~ "`<hostname or IP address>:<port>`"
#~ msgstr ""

#~ msgid "`--ordererTLSHostnameOverride <string>`"
#~ msgstr ""

#~ msgid "`--tls`"
#~ msgstr ""

#~ msgid "`--transient <string>`"
#~ msgstr ""

#~ msgid ""
#~ "## peer chaincode install ``` Install"
#~ " a chaincode on a peer. This "
#~ "installs a chaincode deployment spec "
#~ "package (if provided) or packages the"
#~ " specified chaincode before subsequently "
#~ "installing it."
#~ msgstr ""

#~ msgid "Usage:"
#~ msgstr ""

#~ msgid "peer chaincode install [flags]"
#~ msgstr ""

#~ msgid "Flags:"
#~ msgstr ""

#~ msgid ""
#~ "Connection profile that provides the "
#~ "necessary connection information for the "
#~ "network. Note: currently only supported "
#~ "for providing peer connection information"
#~ msgstr ""

#~ msgid "Constructor message for the chaincode in JSON format (default \"{}\")"
#~ msgstr ""

#~ msgid "help for install"
#~ msgstr ""

#~ msgid "Language the chaincode is written in (default \"golang\")"
#~ msgstr ""

#~ msgid "Name of the chaincode"
#~ msgstr ""

#~ msgid ""
#~ "Path to chaincode --peerAddresses stringArray"
#~ "      The addresses of the peers to"
#~ " connect to --tlsRootCertFiles stringArray   "
#~ "If TLS is enabled, the paths to"
#~ " the TLS root cert files of the"
#~ " peers to connect to. The order "
#~ "and number of certs specified should "
#~ "match the --peerAddresses flag"
#~ msgstr ""

#~ msgid ""
#~ "Version of the chaincode specified in"
#~ " install/instantiate/upgrade commands"
#~ msgstr ""

#~ msgid "Global Flags:"
#~ msgstr ""

#~ msgid "Use mutual TLS when communicating with the orderer endpoint"
#~ msgstr ""

#~ msgid "Timeout for client to connect (default 3s)"
#~ msgstr ""

#~ msgid ""
#~ "Ordering service endpoint "
#~ "--ordererTLSHostnameOverride string   The hostname"
#~ " override to use when validating the"
#~ " TLS connection to the orderer. --tls"
#~ "                                 Use TLS when "
#~ "communicating with the orderer endpoint "
#~ "--transient string                    Transient map"
#~ " of arguments in JSON encoding"
#~ msgstr ""

#~ msgid "```"
#~ msgstr ""

#~ msgid ""
#~ "## peer chaincode instantiate ``` Deploy"
#~ " the specified chaincode to the "
#~ "network."
#~ msgstr ""

#~ msgid "peer chaincode instantiate [flags]"
#~ msgstr ""

#~ msgid ""
#~ "The channel on which this command "
#~ "should be executed --collections-config "
#~ "string      The fully qualified path to"
#~ " the collection JSON file including "
#~ "the file name --connectionProfile string"
#~ "       Connection profile that provides the"
#~ " necessary connection information for the"
#~ " network. Note: currently only supported"
#~ " for providing peer connection information"
#~ msgstr ""

#~ msgid ""
#~ "The name of the endorsement system "
#~ "chaincode to be used for this "
#~ "chaincode"
#~ msgstr ""

#~ msgid "help for instantiate"
#~ msgstr ""

#~ msgid ""
#~ "Name of the chaincode --peerAddresses "
#~ "stringArray      The addresses of the "
#~ "peers to connect to"
#~ msgstr ""

#~ msgid ""
#~ "The endorsement policy associated to "
#~ "this chaincode --tlsRootCertFiles stringArray   "
#~ "If TLS is enabled, the paths to"
#~ " the TLS root cert files of the"
#~ " peers to connect to. The order "
#~ "and number of certs specified should "
#~ "match the --peerAddresses flag"
#~ msgstr ""

#~ msgid ""
#~ "The name of the verification system "
#~ "chaincode to be used for this "
#~ "chaincode"
#~ msgstr ""

#~ msgid ""
#~ "## peer chaincode invoke ``` Invoke "
#~ "the specified chaincode. It will try "
#~ "to commit the endorsed transaction to"
#~ " the network."
#~ msgstr ""

#~ msgid "peer chaincode invoke [flags]"
#~ msgstr ""

#~ msgid ""
#~ "The channel on which this command "
#~ "should be executed --connectionProfile string"
#~ "       Connection profile that provides the"
#~ " necessary connection information for the"
#~ " network. Note: currently only supported"
#~ " for providing peer connection information"
#~ msgstr ""

#~ msgid "help for invoke"
#~ msgstr ""

#~ msgid ""
#~ "Is this invocation for init (useful "
#~ "for supporting legacy chaincodes in the"
#~ " new lifecycle)"
#~ msgstr ""

#~ msgid ""
#~ "Name of the chaincode --peerAddresses "
#~ "stringArray      The addresses of the "
#~ "peers to connect to --tlsRootCertFiles "
#~ "stringArray   If TLS is enabled, the "
#~ "paths to the TLS root cert files"
#~ " of the peers to connect to. "
#~ "The order and number of certs "
#~ "specified should match the --peerAddresses "
#~ "flag --waitForEvent                   Whether to "
#~ "wait for the event from each "
#~ "peer's deliver filtered service signifying "
#~ "that the 'invoke' transaction has been"
#~ " committed successfully --waitForEventTimeout "
#~ "duration   Time to wait for the "
#~ "event from each peer's deliver filtered"
#~ " service signifying that the 'invoke' "
#~ "transaction has been committed successfully"
#~ " (default 30s)"
#~ msgstr ""

#~ msgid ""
#~ "## peer chaincode list ``` Get the"
#~ " instantiated chaincodes in the channel "
#~ "if specify channel, or get installed "
#~ "chaincodes on the peer"
#~ msgstr ""

#~ msgid "peer chaincode list [flags]"
#~ msgstr ""

#~ msgid ""
#~ "help for list --installed                      "
#~ "Get the installed chaincodes on a "
#~ "peer --instantiated                   Get the "
#~ "instantiated chaincodes on a channel "
#~ "--peerAddresses stringArray      The addresses "
#~ "of the peers to connect to "
#~ "--tlsRootCertFiles stringArray   If TLS is "
#~ "enabled, the paths to the TLS root"
#~ " cert files of the peers to "
#~ "connect to. The order and number "
#~ "of certs specified should match the "
#~ "--peerAddresses flag"
#~ msgstr ""

#~ msgid ""
#~ "## peer chaincode package ``` Package"
#~ " a chaincode and write the package"
#~ " to a file."
#~ msgstr ""

#~ msgid "peer chaincode package [outputfile] [flags]"
#~ msgstr ""

#~ msgid ""
#~ "create CC deployment spec for owner "
#~ "endorsements instead of raw CC "
#~ "deployment spec"
#~ msgstr ""

#~ msgid "help for package"
#~ msgstr ""

#~ msgid "instantiation policy for the chaincode"
#~ msgstr ""

#~ msgid "Path to chaincode"
#~ msgstr ""

#~ msgid ""
#~ "if creating CC deployment spec package"
#~ " for owner endorsements, also sign it"
#~ " with local MSP"
#~ msgstr ""

#~ msgid ""
#~ "## peer chaincode query ``` Get "
#~ "endorsed result of chaincode function "
#~ "call and print it. It won't "
#~ "generate transaction."
#~ msgstr ""

#~ msgid "peer chaincode query [flags]"
#~ msgstr ""

#~ msgid "help for query"
#~ msgstr ""

#~ msgid ""
#~ "If true, output the query value "
#~ "byte array in hexadecimal. Incompatible "
#~ "with --raw"
#~ msgstr ""

#~ msgid ""
#~ "If true, output the query value as"
#~ " raw bytes, otherwise format as a "
#~ "printable string --tlsRootCertFiles stringArray"
#~ "   If TLS is enabled, the paths "
#~ "to the TLS root cert files of "
#~ "the peers to connect to. The order"
#~ " and number of certs specified should"
#~ " match the --peerAddresses flag"
#~ msgstr ""

#~ msgid "## peer chaincode signpackage ``` Sign the specified chaincode package"
#~ msgstr ""

#~ msgid "peer chaincode signpackage [flags]"
#~ msgstr ""

#~ msgid "help for signpackage"
#~ msgstr ""

#~ msgid ""
#~ "## peer chaincode upgrade ``` Upgrade"
#~ " an existing chaincode with the "
#~ "specified one. The new chaincode will"
#~ " immediately replace the existing chaincode"
#~ " upon the transaction committed."
#~ msgstr ""

#~ msgid "peer chaincode upgrade [flags]"
#~ msgstr ""

#~ msgid "help for upgrade"
#~ msgstr ""

#~ msgid ""
#~ "Path to chaincode --peerAddresses stringArray"
#~ "      The addresses of the peers to"
#~ " connect to"
#~ msgstr ""

#~ msgid "## Example Usage"
#~ msgstr ""

#~ msgid "### peer chaincode instantiate examples"
#~ msgstr ""

#~ msgid ""
#~ "Here are some examples of the "
#~ "`peer chaincode instantiate` command, which"
#~ " instantiates the chaincode named `mycc`"
#~ " at version `1.0` on channel "
#~ "`mychannel`:"
#~ msgstr ""

#~ msgid ""
#~ "Using the `--tls` and `--cafile` global"
#~ " flags to instantiate the chaincode "
#~ "in a network with TLS enabled:"
#~ msgstr ""

#~ msgid ""
#~ "``` export "
#~ "ORDERER_CA=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example"
#~ ".com-cert.pem peer chaincode instantiate -o"
#~ " orderer.example.com:7050 --tls --cafile "
#~ "$ORDERER_CA -C mychannel -n mycc -v "
#~ "1.0 -c '{\"Args\":[\"init\",\"a\",\"100\",\"b\",\"200\"]}'"
#~ " -P \"AND ('Org1MSP.peer','Org2MSP.peer')\""
#~ msgstr ""

#~ msgid ""
#~ "2018-02-22 16:33:53.324 UTC [chaincodeCmd] "
#~ "checkChaincodeCmdParams -> INFO 001 Using "
#~ "default escc 2018-02-22 16:33:53.324 UTC "
#~ "[chaincodeCmd] checkChaincodeCmdParams -> INFO "
#~ "002 Using default vscc 2018-02-22 "
#~ "16:34:08.698 UTC [main] main -> INFO "
#~ "003 Exiting....."
#~ msgstr ""

#~ msgid ""
#~ "``` peer chaincode instantiate -o "
#~ "orderer.example.com:7050 -C mychannel -n mycc"
#~ " -v 1.0 -c "
#~ "'{\"Args\":[\"init\",\"a\",\"100\",\"b\",\"200\"]}' -P "
#~ "\"AND ('Org1MSP.peer','Org2MSP.peer')\""
#~ msgstr ""

#~ msgid ""
#~ "2018-02-22 16:34:09.324 UTC [chaincodeCmd] "
#~ "checkChaincodeCmdParams -> INFO 001 Using "
#~ "default escc 2018-02-22 16:34:09.324 UTC "
#~ "[chaincodeCmd] checkChaincodeCmdParams -> INFO "
#~ "002 Using default vscc 2018-02-22 "
#~ "16:34:24.698 UTC [main] main -> INFO "
#~ "003 Exiting..... ```"
#~ msgstr ""

#~ msgid "### peer chaincode invoke example"
#~ msgstr ""

#~ msgid "Here is an example of the `peer chaincode invoke` command:"
#~ msgstr ""

#~ msgid ""
#~ "Invoke the chaincode named `mycc` at "
#~ "version `1.0` on channel `mychannel` on"
#~ " `peer0.org1.example.com:7051` and "
#~ "`peer0.org2.example.com:9051` (the peers defined "
#~ "by `--peerAddresses`), requesting to move "
#~ "10 units from variable `a` to "
#~ "variable `b`:"
#~ msgstr ""

#~ msgid ""
#~ "``` peer chaincode invoke -o "
#~ "orderer.example.com:7050 -C mychannel -n mycc"
#~ " --peerAddresses peer0.org1.example.com:7051 "
#~ "--peerAddresses peer0.org2.example.com:9051 -c "
#~ "'{\"Args\":[\"invoke\",\"a\",\"b\",\"10\"]}'"
#~ msgstr ""

#~ msgid ""
#~ "2018-02-22 16:34:27.069 UTC [chaincodeCmd] "
#~ "checkChaincodeCmdParams -> INFO 001 Using "
#~ "default escc 2018-02-22 16:34:27.069 UTC "
#~ "[chaincodeCmd] checkChaincodeCmdParams -> INFO "
#~ "002 Using default vscc . . . "
#~ "2018-02-22 16:34:27.106 UTC [chaincodeCmd] "
#~ "chaincodeInvokeOrQuery -> DEBU 00a ESCC "
#~ "invoke result: version:1 response:<status:200 "
#~ "message:\"OK\" > payload:\"\\n \\237mM\\376? "
#~ "[\\214\\002 "
#~ "\\332\\204\\035\\275q\\227\\2132A\\n\\204&\\2106\\037W|\\346#\\3413\\274\\022Y\\nE\\022\\024\\n\\004lscc\\022\\014\\n\\n\\n\\004mycc\\022\\002\\010\\003\\022-\\n\\004mycc\\022%\\n\\007\\n\\001a\\022\\002\\010\\003\\n\\007\\n\\001b\\022\\002\\010\\003\\032\\007\\n\\001a\\032\\00290\\032\\010\\n\\001b\\032\\003210\\032\\003\\010\\310\\001\\\"\\013\\022\\004mycc\\032\\0031.0\""
#~ " endorsement:<endorser:\"\\n\\007Org1MSP\\022\\262\\006-----"
#~ "BEGIN "
#~ "CERTIFICATE-----\\nMIICLjCCAdWgAwIBAgIRAJYomxY2cqHA/fbRnH5a/bwwCgYIKoZIzj0EAwIwczEL\\nMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG\\ncmFuY2lzY28xGTAXBgNVBAoTEG9yZzEuZXhhbXBsZS5jb20xHDAaBgNVBAMTE2Nh\\nLm9yZzEuZXhhbXBsZS5jb20wHhcNMTgwMjIyMTYyODE0WhcNMjgwMjIwMTYyODE0\\nWjBwMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMN\\nU2FuIEZyYW5jaXNjbzETMBEGA1UECxMKRmFicmljUGVlcjEfMB0GA1UEAxMWcGVl\\ncjAub3JnMS5leGFtcGxlLmNvbTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABDEa\\nWNNniN3qOCQL89BGWfY39f5V3o1pi//7JFDHATJXtLgJhkK5KosDdHuKLYbCqvge\\n46u3AC16MZyJRvKBiw6jTTBLMA4GA1UdDwEB/wQEAwIHgDAMBgNVHRMBAf8EAjAA\\nMCsGA1UdIwQkMCKAIN7dJR9dimkFtkus0R5pAOlRz5SA3FB5t8Eaxl9A7lkgMAoG\\nCCqGSM49BAMCA0cAMEQCIC2DAsO9QZzQmKi8OOKwcCh9Gd01YmWIN3oVmaCRr8C7\\nAiAlQffq2JFlbh6OWURGOko6RckizG8oVOldZG/Xj3C8lA==\\n"
#~ "-----END CERTIFICATE-----\\n\" signature:\"0D\\002 "
#~ "\\022_\\342\\350\\344\\231G&\\237\\n\\244\\375\\302J\\220l\\302\\345\\210\\335D\\250y\\253P\\0214:\\221e\\332@\\002"
#~ " "
#~ "\\000\\254\\361\\224\\247\\210\\214L\\277\\370\\222\\213\\217\\301\\r\\341v\\227\\265\\277\\336\\256^\\217\\336\\005y*\\321\\023\\025\\367\""
#~ " > 2018-02-22 16:34:27.107 UTC "
#~ "[chaincodeCmd] chaincodeInvokeOrQuery -> INFO "
#~ "00b Chaincode invoke successful. result: "
#~ "status:200 2018-02-22 16:34:27.107 UTC [main]"
#~ " main -> INFO 00c Exiting....."
#~ msgstr ""

#~ msgid ""
#~ "``` 2018-02-22 16:34:27.107 UTC [chaincodeCmd]"
#~ " chaincodeInvokeOrQuery -> INFO 00b "
#~ "Chaincode invoke successful. result: "
#~ "status:200"
#~ msgstr ""

#~ msgid "### peer chaincode list example"
#~ msgstr ""

#~ msgid "Here are some examples of the `peer chaincode list ` command:"
#~ msgstr ""

#~ msgid ""
#~ "Using the `--installed` flag to list "
#~ "the chaincodes installed on a peer."
#~ msgstr ""

#~ msgid "``` peer chaincode list --installed"
#~ msgstr ""

#~ msgid ""
#~ "Get installed chaincodes on peer: Name:"
#~ " mycc, Version: 1.0, Path: "
#~ "github.com/hyperledger/fabric-samples/chaincode/abstore/go, "
#~ "Id: "
#~ "8cc2730fdafd0b28ef734eac12b29df5fc98ad98bdb1b7e0ef96265c3d893d61 "
#~ "2018-02-22 17:07:13.476 UTC [main] main "
#~ "-> INFO 001 Exiting..... ```"
#~ msgstr ""

#~ msgid ""
#~ "You can see that the peer has "
#~ "installed a chaincode called `mycc` "
#~ "which is at version `1.0`."
#~ msgstr ""

#~ msgid ""
#~ "Using the `--instantiated` in combination "
#~ "with the `-C` (channel ID) flag to"
#~ " list the chaincodes instantiated on "
#~ "a channel."
#~ msgstr ""

#~ msgid "``` peer chaincode list --instantiated -C mychannel"
#~ msgstr ""

#~ msgid ""
#~ "Get instantiated chaincodes on channel "
#~ "mychannel: Name: mycc, Version: 1.0, "
#~ "Path: github.com/hyperledger/fabric-"
#~ "samples/chaincode/abstore/go, Escc: escc, Vscc: "
#~ "vscc 2018-02-22 17:07:42.969 UTC [main] "
#~ "main -> INFO 001 Exiting....."
#~ msgstr ""

#~ msgid ""
#~ "You can see that chaincode `mycc` "
#~ "at version `1.0` is instantiated on "
#~ "channel `mychannel`."
#~ msgstr ""

#~ msgid "### peer chaincode package example"
#~ msgstr ""

#~ msgid ""
#~ "Here is an example of the `peer"
#~ " chaincode package` command, which packages"
#~ " the chaincode named `mycc` at "
#~ "version `1.1`, creates the chaincode "
#~ "deployment spec, signs the package using"
#~ " the local MSP, and outputs it "
#~ "as `ccpack.out`:"
#~ msgstr ""

#~ msgid ""
#~ "peer chaincode package ccpack.out -n "
#~ "mycc -p github.com/hyperledger/fabric-"
#~ "samples/chaincode/abstore/go -v 1.1 -s -S "
#~ ". . . 2018-02-22 17:27:01.404 UTC "
#~ "[chaincodeCmd] checkChaincodeCmdParams -> INFO "
#~ "003 Using default escc 2018-02-22 "
#~ "17:27:01.405 UTC [chaincodeCmd] "
#~ "checkChaincodeCmdParams -> INFO 004 Using "
#~ "default vscc . . . 2018-02-22 "
#~ "17:27:01.879 UTC [chaincodeCmd] chaincodePackage "
#~ "-> DEBU 011 Packaged chaincode into "
#~ "deployment spec of size <3426>, with "
#~ "args = [ccpack.out] 2018-02-22 17:27:01.879"
#~ " UTC [main] main -> INFO 012 "
#~ "Exiting....."
#~ msgstr ""

#~ msgid "### peer chaincode query example"
#~ msgstr ""

#~ msgid ""
#~ "Here is an example of the `peer"
#~ " chaincode query` command, which queries"
#~ " the peer ledger for the chaincode"
#~ " named `mycc` at version `1.0` for"
#~ " the value of variable `a`:"
#~ msgstr ""

#~ msgid ""
#~ "You can see from the output that"
#~ " variable `a` had a value of 90"
#~ " at the time of the query."
#~ msgstr ""

#~ msgid ""
#~ "``` peer chaincode query -C mychannel"
#~ " -n mycc -c '{\"Args\":[\"query\",\"a\"]}'"
#~ msgstr ""

#~ msgid ""
#~ "2018-02-22 16:34:30.816 UTC [chaincodeCmd] "
#~ "checkChaincodeCmdParams -> INFO 001 Using "
#~ "default escc 2018-02-22 16:34:30.816 UTC "
#~ "[chaincodeCmd] checkChaincodeCmdParams -> INFO "
#~ "002 Using default vscc Query Result: "
#~ "90"
#~ msgstr ""

#~ msgid "### peer chaincode signpackage example"
#~ msgstr ""

#~ msgid ""
#~ "Here is an example of the `peer"
#~ " chaincode signpackage` command, which "
#~ "accepts an existing signed  package and"
#~ " creates a new one with signature "
#~ "of the local MSP appended to it."
#~ msgstr ""

#~ msgid ""
#~ "``` peer chaincode signpackage ccwith1sig.pak"
#~ " ccwith2sig.pak Wrote signed package to "
#~ "ccwith2sig.pak successfully 2018-02-24 19:32:47.189"
#~ " EST [main] main -> INFO 002 "
#~ "Exiting..... ```"
#~ msgstr ""

#~ msgid "### peer chaincode upgrade example"
#~ msgstr ""

#~ msgid ""
#~ "Here is an example of the `peer"
#~ " chaincode upgrade` command, which upgrades"
#~ " the chaincode named `mycc` at "
#~ "version `1.1` on channel `mychannel` to"
#~ " version `1.2`, which contains a new"
#~ " variable `c`:"
#~ msgstr ""

#~ msgid ""
#~ "Using the `--tls` and `--cafile` global"
#~ " flags to upgrade the chaincode in"
#~ " a network with TLS enabled:"
#~ msgstr ""

#~ msgid ""
#~ "``` export "
#~ "ORDERER_CA=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example"
#~ ".com-cert.pem peer chaincode upgrade -o "
#~ "orderer.example.com:7050 --tls --cafile $ORDERER_CA"
#~ " -C mychannel -n mycc -v 1.2 -c"
#~ " '{\"Args\":[\"init\",\"a\",\"100\",\"b\",\"200\",\"c\",\"300\"]}'"
#~ " -P \"AND ('Org1MSP.peer','Org2MSP.peer')\" . "
#~ ". . 2018-02-22 18:26:31.433 UTC "
#~ "[chaincodeCmd] checkChaincodeCmdParams -> INFO "
#~ "003 Using default escc 2018-02-22 "
#~ "18:26:31.434 UTC [chaincodeCmd] "
#~ "checkChaincodeCmdParams -> INFO 004 Using "
#~ "default vscc 2018-02-22 18:26:31.435 UTC "
#~ "[chaincodeCmd] getChaincodeSpec -> DEBU 005"
#~ " java chaincode enabled 2018-02-22 "
#~ "18:26:31.435 UTC [chaincodeCmd] upgrade -> "
#~ "DEBU 006 Get upgrade proposal for "
#~ "chaincode <name:\"mycc\" version:\"1.1\" > ."
#~ " . . 2018-02-22 18:26:46.687 UTC "
#~ "[chaincodeCmd] upgrade -> DEBU 009 "
#~ "endorse upgrade proposal, get response "
#~ "<status:200 message:\"OK\" "
#~ "payload:\"\\n\\004mycc\\022\\0031.1\\032\\004escc\\\"\\004vscc*,\\022\\014\\022\\n\\010\\001\\022\\002\\010\\000\\022\\002\\010\\001\\032\\r\\022\\013\\n\\007Org1MSP\\020\\003\\032\\r\\022\\013\\n\\007Org2MSP\\020\\0032f\\n"
#~ " "
#~ "\\261g(^v\\021\\220\\240\\332\\251\\014\\204V\\210P\\310o\\231\\271\\036\\301\\022\\032\\205fC[|=\\215\\372\\223\\022"
#~ " "
#~ "\\311b\\025?\\323N\\343\\325\\032\\005\\365\\236\\001XKj\\004E\\351\\007\\247\\265fu\\305j\\367\\331\\275\\253\\307R\\032"
#~ " "
#~ "\\014H#\\014\\272!#\\345\\306s\\323\\371\\350\\364\\006.\\000\\356\\230\\353\\270\\263\\215\\217\\303\\256\\220i^\\277\\305\\214:"
#~ " "
#~ "\\375\\200zY\\275\\203}\\375\\244\\205\\035\\340\\226]l!uE\\334\\273\\214\\214\\020\\303\\3474\\360\\014\\234-\\006\\315B\\031\\022\\010\\022\\006\\010\\001\\022\\002\\010\\000\\032\\r\\022\\013\\n\\007Org1MSP\\020\\001\""
#~ " > . . . 2018-02-22 18:26:46.693 "
#~ "UTC [chaincodeCmd] upgrade -> DEBU 00c"
#~ " Get Signed envelope 2018-02-22 "
#~ "18:26:46.693 UTC [chaincodeCmd] chaincodeUpgrade "
#~ "-> DEBU 00d Send signed envelope "
#~ "to orderer 2018-02-22 18:26:46.908 UTC "
#~ "[main] main -> INFO 00e Exiting..... "
#~ "```"
#~ msgstr ""

#~ msgid ""
#~ "Using only the command-specific options"
#~ " to upgrade the chaincode in a "
#~ "network with TLS disabled:"
#~ msgstr ""

#~ msgid ""
#~ "``` peer chaincode upgrade -o "
#~ "orderer.example.com:7050 -C mychannel -n mycc"
#~ " -v 1.2 -c "
#~ "'{\"Args\":[\"init\",\"a\",\"100\",\"b\",\"200\",\"c\",\"300\"]}' "
#~ "-P \"AND ('Org1MSP.peer','Org2MSP.peer')\" . ."
#~ " . 2018-02-22 18:28:31.433 UTC "
#~ "[chaincodeCmd] checkChaincodeCmdParams -> INFO "
#~ "003 Using default escc 2018-02-22 "
#~ "18:28:31.434 UTC [chaincodeCmd] "
#~ "checkChaincodeCmdParams -> INFO 004 Using "
#~ "default vscc 2018-02-22 18:28:31.435 UTC "
#~ "[chaincodeCmd] getChaincodeSpec -> DEBU 005"
#~ " java chaincode enabled 2018-02-22 "
#~ "18:28:31.435 UTC [chaincodeCmd] upgrade -> "
#~ "DEBU 006 Get upgrade proposal for "
#~ "chaincode <name:\"mycc\" version:\"1.1\" > ."
#~ " . . 2018-02-22 18:28:46.687 UTC "
#~ "[chaincodeCmd] upgrade -> DEBU 009 "
#~ "endorse upgrade proposal, get response "
#~ "<status:200 message:\"OK\" "
#~ "payload:\"\\n\\004mycc\\022\\0031.1\\032\\004escc\\\"\\004vscc*,\\022\\014\\022\\n\\010\\001\\022\\002\\010\\000\\022\\002\\010\\001\\032\\r\\022\\013\\n\\007Org1MSP\\020\\003\\032\\r\\022\\013\\n\\007Org2MSP\\020\\0032f\\n"
#~ " "
#~ "\\261g(^v\\021\\220\\240\\332\\251\\014\\204V\\210P\\310o\\231\\271\\036\\301\\022\\032\\205fC[|=\\215\\372\\223\\022"
#~ " "
#~ "\\311b\\025?\\323N\\343\\325\\032\\005\\365\\236\\001XKj\\004E\\351\\007\\247\\265fu\\305j\\367\\331\\275\\253\\307R\\032"
#~ " "
#~ "\\014H#\\014\\272!#\\345\\306s\\323\\371\\350\\364\\006.\\000\\356\\230\\353\\270\\263\\215\\217\\303\\256\\220i^\\277\\305\\214:"
#~ " "
#~ "\\375\\200zY\\275\\203}\\375\\244\\205\\035\\340\\226]l!uE\\334\\273\\214\\214\\020\\303\\3474\\360\\014\\234-\\006\\315B\\031\\022\\010\\022\\006\\010\\001\\022\\002\\010\\000\\032\\r\\022\\013\\n\\007Org1MSP\\020\\001\""
#~ " > . . . 2018-02-22 18:28:46.693 "
#~ "UTC [chaincodeCmd] upgrade -> DEBU 00c"
#~ " Get Signed envelope 2018-02-22 "
#~ "18:28:46.693 UTC [chaincodeCmd] chaincodeUpgrade "
#~ "-> DEBU 00d Send signed envelope "
#~ "to orderer 2018-02-22 18:28:46.908 UTC "
#~ "[main] main -> INFO 00e Exiting..... "
#~ "```"
#~ msgstr ""

#~ msgid ""
#~ "<a rel=\"license\" "
#~ "href=\"http://creativecommons.org/licenses/by/4.0/\"><img "
#~ "alt=\"Creative Commons License\" style=\"border-"
#~ "width:0\" "
#~ "src=\"https://i.creativecommons.org/l/by/4.0/88x31.png\" "
#~ "/></a><br />This work is licensed under"
#~ " a <a rel=\"license\" "
#~ "href=\"http://creativecommons.org/licenses/by/4.0/\">Creative "
#~ "Commons Attribution 4.0 International "
#~ "License</a>."
#~ msgstr ""

