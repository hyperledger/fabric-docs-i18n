# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, hyperledger
# This file is distributed under the same license as the
# hyperledger-fabricdocs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: hyperledger-fabricdocs master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-05-24 19:11-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../source/commands/peerlifecycle.md:1
#: ../../source/commands/peerlifecycle.md:48
msgid "peer lifecycle chaincode"
msgstr ""

#: ../../source/commands/peerlifecycle.md:3
msgid ""
"The peer lifecycle chaincode subcommand allows administrators to use the "
"Fabric chaincode lifecycle to package a chaincode, install it on your "
"peers, approve a chaincode definition for your organization, and then "
"commit the definition to a channel. The chaincode is ready to be used "
"after the definition has been successfully committed to the channel. For "
"more information, visit Fabric chaincode lifecycle."
msgstr ""

#: ../../source/commands/peerlifecycle.md:10
msgid ""
"Note: These instructions use the Fabric chaincode lifecycle introduced in"
" the v2.0 release. If you would like to use the old lifecycle to install "
"and instantiate a chaincode, visit the peer chaincode command reference."
msgstr ""

#: ../../source/commands/peerlifecycle.md:15
msgid "Syntax"
msgstr ""

#: ../../source/commands/peerlifecycle.md:17
msgid "The peer lifecycle chaincode command has the following subcommands:"
msgstr ""

#: ../../source/commands/peerlifecycle.md:19
msgid "package"
msgstr ""

#: ../../source/commands/peerlifecycle.md:20
msgid "install"
msgstr ""

#: ../../source/commands/peerlifecycle.md:21
msgid "queryinstalled"
msgstr ""

#: ../../source/commands/peerlifecycle.md:22
msgid "getinstalledpackage"
msgstr ""

#: ../../source/commands/peerlifecycle.md:23
msgid "approveformyorg"
msgstr ""

#: ../../source/commands/peerlifecycle.md:24
msgid "checkcommitreadiness"
msgstr ""

#: ../../source/commands/peerlifecycle.md:25
msgid "commit"
msgstr ""

#: ../../source/commands/peerlifecycle.md:26
msgid "querycommitted"
msgstr ""

#: ../../source/commands/peerlifecycle.md:28
msgid ""
"Each peer lifecycle chaincode subcommand is described together with its "
"options in its own section in this topic."
msgstr ""

#: ../../source/commands/peerlifecycle.md:31
msgid "peer lifecycle"
msgstr ""

#: ../../source/commands/peerlifecycle.md:80
msgid "peer lifecycle chaincode package"
msgstr ""

#: ../../source/commands/peerlifecycle.md:108
msgid "peer lifecycle chaincode install"
msgstr ""

#: ../../source/commands/peerlifecycle.md:133
msgid "peer lifecycle chaincode queryinstalled"
msgstr ""

#: ../../source/commands/peerlifecycle.md:159
msgid "peer lifecycle chaincode getinstalledpackage"
msgstr ""

#: ../../source/commands/peerlifecycle.md:186
msgid "peer lifecycle chaincode approveformyorg"
msgstr ""

#: ../../source/commands/peerlifecycle.md:224
msgid "peer lifecycle chaincode checkcommitreadiness"
msgstr ""

#: ../../source/commands/peerlifecycle.md:260
msgid "peer lifecycle chaincode commit"
msgstr ""

#: ../../source/commands/peerlifecycle.md:297
msgid "peer lifecycle chaincode querycommitted"
msgstr ""

#: ../../source/commands/peerlifecycle.md:325
msgid "Example Usage"
msgstr ""

#: ../../source/commands/peerlifecycle.md:327
msgid "peer lifecycle chaincode package example"
msgstr ""

#: ../../source/commands/peerlifecycle.md:329
msgid ""
"A chaincode needs to be packaged before it can be installed on your "
"peers. This example uses the peer lifecycle chaincode package command to "
"package a Go chaincode."
msgstr ""

#: ../../source/commands/peerlifecycle.md:333
msgid ""
"Use the --label flag to provide a chaincode package label of myccv1 that "
"your organization will use to identify the package."
msgstr ""

#: ../../source/commands/peerlifecycle.md:340
msgid "peer lifecycle chaincode install example"
msgstr ""

#: ../../source/commands/peerlifecycle.md:342
msgid ""
"After the chaincode is packaged, you can use the peer chaincode install "
"command to install the chaincode on your peers."
msgstr ""

#: ../../source/commands/peerlifecycle.md:345
msgid ""
"Install the mycc.tar.gz  package on peer0.org1.example.com:7051 (the peer"
" defined by --peerAddresses)."
msgstr ""

#: ../../source/commands/peerlifecycle.md:351
msgid ""
"If successful, the command will return the package identifier. The "
"package ID is the package label combined with a hash of the chaincode "
"package taken by the peer."
msgstr ""

#: ../../source/commands/peerlifecycle.md:359
msgid "peer lifecycle chaincode queryinstalled example"
msgstr ""

#: ../../source/commands/peerlifecycle.md:361
msgid ""
"You need to use the chaincode package identifier to approve a chaincode "
"definition for your organization. You can find the package ID for the "
"chaincodes you have installed by using the peer lifecycle chaincode "
"queryinstalled command:"
msgstr ""

#: ../../source/commands/peerlifecycle.md:370
msgid ""
"A successful command will return the package ID associated with the "
"package label."
msgstr ""

#: ../../source/commands/peerlifecycle.md:378
#: ../../source/commands/peerlifecycle.md:493
#: ../../source/commands/peerlifecycle.md:565
msgid ""
"You can also use the --output flag to have the CLI format the output as "
"JSON."
msgstr ""

#: ../../source/commands/peerlifecycle.md:385
msgid ""
"If successful, the command will return the chaincodes you have installed "
"as JSON."
msgstr ""

#: ../../source/commands/peerlifecycle.md:408
msgid "peer lifecycle chaincode getinstalledpackage example"
msgstr ""

#: ../../source/commands/peerlifecycle.md:410
msgid ""
"You can retrieve an installed chaincode package from a peer using the "
"peer lifecycle chaincode getinstalledpackage command. Use the package "
"identifier returned by queryinstalled."
msgstr ""

#: ../../source/commands/peerlifecycle.md:414
msgid ""
"Use the --package-id flag to pass in the chaincode package identifier. "
"Use the --output-directory flag to specify where to write the chaincode "
"package. If the output directory is not specified, the chaincode package "
"will be written in the current directory."
msgstr ""

#: ../../source/commands/peerlifecycle.md:424
msgid "peer lifecycle chaincode approveformyorg example"
msgstr ""

#: ../../source/commands/peerlifecycle.md:426
msgid ""
"Once the chaincode package has been installed on your peers, you can "
"approve a chaincode definition for your organization. The chaincode "
"definition includes the important parameters of chaincode governance, "
"including the chaincode name, version and the endorsement policy."
msgstr ""

#: ../../source/commands/peerlifecycle.md:431
msgid ""
"Here is an example of the peer lifecycle chaincode approveformyorg "
"command, which approves the definition of a chaincode  named mycc at "
"version 1.0 on channel mychannel."
msgstr ""

#: ../../source/commands/peerlifecycle.md:435
msgid ""
"Use the --package-id flag to pass in the chaincode package identifier. "
"Use the --signature-policy flag to define an endorsement policy for the "
"chaincode. Use the init-required flag to request the execution of the "
"Init function to initialize the chaincode."
msgstr ""

#: ../../source/commands/peerlifecycle.md:449
msgid ""
"You can also use the --channel-config-policy flag use a policy inside the"
" channel configuration as the chaincode endorsement policy. The default "
"endorsement policy is Channel/Application/Endorsement"
msgstr ""

#: ../../source/commands/peerlifecycle.md:462
msgid "peer lifecycle chaincode checkcommitreadiness example"
msgstr ""

#: ../../source/commands/peerlifecycle.md:464
msgid ""
"You can check whether a chaincode definition is ready to be committed "
"using the peer lifecycle chaincode checkcommitreadiness command, which "
"will return successfully if a subsequent commit of the definition is "
"expected to succeed. It also outputs which organizations have approved "
"the chaincode definition. If an organization has approved the chaincode "
"definition specified in the command, the command will return a value of "
"true. You can use this command to learn whether enough channel members "
"have approved a chaincode definition to meet the "
"Application/Channel/Endorsement policy (a majority by default) before the"
" definition can be committed to a channel."
msgstr ""

#: ../../source/commands/peerlifecycle.md:474
msgid ""
"Here is an example of the peer lifecycle chaincode checkcommitreadiness "
"command, which checks a chaincode named mycc at version 1.0 on channel "
"mychannel."
msgstr ""

#: ../../source/commands/peerlifecycle.md:483
msgid ""
"If successful, the command will return the organizations that have "
"approved the chaincode definition."
msgstr ""

#: ../../source/commands/peerlifecycle.md:502
msgid ""
"If successful, the command will return a JSON map that shows if an "
"organization has approved the chaincode definition."
msgstr ""

#: ../../source/commands/peerlifecycle.md:514
msgid "peer lifecycle chaincode commit example"
msgstr ""

#: ../../source/commands/peerlifecycle.md:516
msgid ""
"Once a sufficient number of organizations approve a chaincode definition "
"for their organizations (a majority by default), one organization can "
"commit the definition the channel using the peer lifecycle chaincode "
"commit command:"
msgstr ""

#: ../../source/commands/peerlifecycle.md:520
msgid ""
"This command needs to target the peers of other organizations on the "
"channel to collect their organization endorsement for the definition."
msgstr ""

#: ../../source/commands/peerlifecycle.md:532
msgid "peer lifecycle chaincode querycommitted example"
msgstr ""

#: ../../source/commands/peerlifecycle.md:534
msgid ""
"You can query the chaincode definitions that have been committed to a "
"channel by using the peer lifecycle chaincode querycommitted command. You"
" can use this command to query the current definition sequence number "
"before upgrading a chaincode."
msgstr ""

#: ../../source/commands/peerlifecycle.md:539
msgid ""
"You need to supply the chaincode name and channel name in order to query "
"a specific chaincode definition and the organizations that have approved "
"it."
msgstr ""

#: ../../source/commands/peerlifecycle.md:552
msgid ""
"You can also specify just the channel name in order to query all "
"chaincode definitions on that channel."
msgstr ""

#: ../../source/commands/peerlifecycle.md:568
msgid "For querying a specific chaincode definition"
msgstr ""

#: ../../source/commands/peerlifecycle.md:576
msgid ""
"If successful, the command will return a JSON that has committed "
"chaincode definition for chaincode 'mycc' on channel 'mychannel'."
msgstr ""

#: ../../source/commands/peerlifecycle.md:594
msgid ""
"The validation_parameter is base64 encoded. An example of the command to "
"decode it is as follows."
msgstr ""

#: ../../source/commands/peerlifecycle.md:602
msgid "For querying all chaincode definitions on that channel"
msgstr ""

#: ../../source/commands/peerlifecycle.md:610
msgid ""
"If successful, the command will return a JSON that has committed "
"chaincode definitions on channel 'mychannel'."
msgstr ""

#: ../../source/commands/peerlifecycle.md:639
msgid ""
"<a rel=\"license\" "
"href=\"http://creativecommons.org/licenses/by/4.0/\"><img alt=\"Creative "
"Commons License\" style=\"border-width:0\" "
"src=\"https://i.creativecommons.org/l/by/4.0/88x31.png\" /></a><br />This"
" work is licensed under a <a rel=\"license\" "
"href=\"http://creativecommons.org/licenses/by/4.0/\">Creative Commons "
"Attribution 4.0 International License</a>."
msgstr ""

#~ msgid "peer lifecycle chaincode"
#~ msgstr ""

#~ msgid ""
#~ "The peer lifecycle chaincode subcommand "
#~ "allows administrators to use the Fabric"
#~ " chaincode lifecycle to package a "
#~ "chaincode, install it on your peers, "
#~ "approve a chaincode definition for your"
#~ " organization, and then commit the "
#~ "definition to a channel. The chaincode"
#~ " is ready to be used after the"
#~ " definition has been successfully committed"
#~ " to the channel. For more "
#~ "information, visit Fabric chaincode lifecycle."
#~ msgstr ""

#~ msgid ""
#~ "Note: These instructions use the Fabric"
#~ " chaincode lifecycle introduced in the "
#~ "v2.0 release. If you would like to"
#~ " use the old lifecycle to install "
#~ "and instantiate a chaincode, visit the"
#~ " peer chaincode command reference."
#~ msgstr ""

#~ msgid "Syntax"
#~ msgstr ""

#~ msgid "The peer lifecycle chaincode command has the following subcommands:"
#~ msgstr ""

#~ msgid "peer lifecycle"
#~ msgstr ""

#~ msgid "peer lifecycle chaincode package"
#~ msgstr ""

#~ msgid "peer lifecycle chaincode install"
#~ msgstr ""

#~ msgid "peer lifecycle chaincode queryinstalled"
#~ msgstr ""

#~ msgid "peer lifecycle chaincode getinstalledpackage"
#~ msgstr ""

#~ msgid "peer lifecycle chaincode approveformyorg"
#~ msgstr ""

#~ msgid "peer lifecycle chaincode checkcommitreadiness"
#~ msgstr ""

#~ msgid "peer lifecycle chaincode commit"
#~ msgstr ""

#~ msgid "peer lifecycle chaincode querycommitted"
#~ msgstr ""

#~ msgid "Example Usage"
#~ msgstr ""

#~ msgid "peer lifecycle chaincode package example"
#~ msgstr ""

#~ msgid ""
#~ "A chaincode needs to be packaged "
#~ "before it can be installed on your"
#~ " peers. This example uses the peer"
#~ " lifecycle chaincode package command to "
#~ "package a Go chaincode."
#~ msgstr ""

#~ msgid ""
#~ "Use the --label flag to provide a"
#~ " chaincode package label of myccv1 "
#~ "that your organization will use to "
#~ "identify the package."
#~ msgstr ""

#~ msgid "peer lifecycle chaincode install example"
#~ msgstr ""

#~ msgid ""
#~ "After the chaincode is packaged, you "
#~ "can use the peer chaincode install "
#~ "command to install the chaincode on "
#~ "your peers."
#~ msgstr ""

#~ msgid ""
#~ "Install the mycc.tar.gz  package on "
#~ "peer0.org1.example.com:7051 (the peer defined "
#~ "by --peerAddresses)."
#~ msgstr ""

#~ msgid ""
#~ "If successful, the command will return"
#~ " the package identifier. The package "
#~ "ID is the package label combined "
#~ "with a hash of the chaincode "
#~ "package taken by the peer."
#~ msgstr ""

#~ msgid "peer lifecycle chaincode queryinstalled example"
#~ msgstr ""

#~ msgid ""
#~ "You need to use the chaincode "
#~ "package identifier to approve a "
#~ "chaincode definition for your organization."
#~ " You can find the package ID "
#~ "for the chaincodes you have installed"
#~ " by using the peer lifecycle "
#~ "chaincode queryinstalled command:"
#~ msgstr ""

#~ msgid ""
#~ "You can also use the --output flag"
#~ " to have the CLI format the "
#~ "output as JSON."
#~ msgstr ""

#~ msgid "peer lifecycle chaincode getinstalledpackage example"
#~ msgstr ""

#~ msgid ""
#~ "You can retrieve an installed chaincode"
#~ " package from a peer using the "
#~ "peer lifecycle chaincode getinstalledpackage "
#~ "command. Use the package identifier "
#~ "returned by queryinstalled."
#~ msgstr ""

#~ msgid ""
#~ "Use the --package-id flag to pass"
#~ " in the chaincode package identifier. "
#~ "Use the --output-directory flag to "
#~ "specify where to write the chaincode "
#~ "package. If the output directory is "
#~ "not specified, the chaincode package "
#~ "will be written in the current "
#~ "directory."
#~ msgstr ""

#~ msgid "peer lifecycle chaincode approveformyorg example"
#~ msgstr ""

#~ msgid ""
#~ "Here is an example of the peer "
#~ "lifecycle chaincode approveformyorg command, "
#~ "which approves the definition of a "
#~ "chaincode  named mycc at version 1.0 "
#~ "on channel mychannel."
#~ msgstr ""

#~ msgid ""
#~ "Use the --package-id flag to pass"
#~ " in the chaincode package identifier. "
#~ "Use the --signature-policy flag to "
#~ "define an endorsement policy for the "
#~ "chaincode. Use the init-required flag"
#~ " to request the execution of the "
#~ "Init function to initialize the "
#~ "chaincode."
#~ msgstr ""

#~ msgid ""
#~ "You can also use the --channel-"
#~ "config-policy flag use a policy "
#~ "inside the channel configuration as the"
#~ " chaincode endorsement policy. The default"
#~ " endorsement policy is "
#~ "Channel/Application/Endorsement"
#~ msgstr ""

#~ msgid "peer lifecycle chaincode checkcommitreadiness example"
#~ msgstr ""

#~ msgid ""
#~ "You can check whether a chaincode "
#~ "definition is ready to be committed "
#~ "using the peer lifecycle chaincode "
#~ "checkcommitreadiness command, which will "
#~ "return successfully if a subsequent "
#~ "commit of the definition is expected "
#~ "to succeed. It also outputs which "
#~ "organizations have approved the chaincode "
#~ "definition. If an organization has "
#~ "approved the chaincode definition specified"
#~ " in the command, the command will "
#~ "return a value of true. You can"
#~ " use this command to learn whether"
#~ " enough channel members have approved "
#~ "a chaincode definition to meet the "
#~ "Application/Channel/Endorsement policy (a majority"
#~ " by default) before the definition "
#~ "can be committed to a channel."
#~ msgstr ""

#~ msgid ""
#~ "Here is an example of the peer "
#~ "lifecycle chaincode checkcommitreadiness command,"
#~ " which checks a chaincode named mycc"
#~ " at version 1.0 on channel mychannel."
#~ msgstr ""

#~ msgid "peer lifecycle chaincode commit example"
#~ msgstr ""

#~ msgid ""
#~ "Once a sufficient number of "
#~ "organizations approve a chaincode definition"
#~ " for their organizations (a majority "
#~ "by default), one organization can commit"
#~ " the definition the channel using the"
#~ " peer lifecycle chaincode commit command:"
#~ msgstr ""

#~ msgid "peer lifecycle chaincode querycommitted example"
#~ msgstr ""

#~ msgid ""
#~ "You can query the chaincode definitions"
#~ " that have been committed to a "
#~ "channel by using the peer lifecycle "
#~ "chaincode querycommitted command. You can "
#~ "use this command to query the "
#~ "current definition sequence number before "
#~ "upgrading a chaincode."
#~ msgstr ""

#~ msgid ""
#~ "You can also specify just the "
#~ "channel name in order to query all"
#~ " chaincode definitions on that channel."
#~ msgstr ""

#~ msgid ""
#~ "The validation_parameter is base64 encoded."
#~ " An example of the command to "
#~ "decode it is as follows."
#~ msgstr ""

#~ msgid "# peer lifecycle chaincode"
#~ msgstr ""

#~ msgid ""
#~ "The `peer lifecycle chaincode` subcommand "
#~ "allows administrators to use the Fabric"
#~ " chaincode lifecycle to package a "
#~ "chaincode, install it on your peers, "
#~ "approve a chaincode definition for your"
#~ " organization, and then commit the "
#~ "definition to a channel. The chaincode"
#~ " is ready to be used after the"
#~ " definition has been successfully committed"
#~ " to the channel. For more "
#~ "information, visit [Fabric chaincode "
#~ "lifecycle](../chaincode_lifecycle.html)."
#~ msgstr ""

#~ msgid ""
#~ "*Note: These instructions use the Fabric"
#~ " chaincode lifecycle introduced in the "
#~ "v2.0 release. If you would like to"
#~ " use the old lifecycle to install "
#~ "and instantiate a chaincode, visit the"
#~ " [peer chaincode](peerchaincode.html) command "
#~ "reference.*"
#~ msgstr ""

#~ msgid "## Syntax"
#~ msgstr ""

#~ msgid "The `peer lifecycle chaincode` command has the following subcommands:"
#~ msgstr ""

#~ msgid "## peer lifecycle ``` Perform _lifecycle operations"
#~ msgstr ""

#~ msgid "Usage:"
#~ msgstr ""

#~ msgid "peer lifecycle [command]"
#~ msgstr ""

#~ msgid "Available Commands:"
#~ msgstr ""

#~ msgid ""
#~ "chaincode   Perform chaincode operations: "
#~ "package|install|queryinstalled|getinstalledpackage|approveformyorg|checkcommitreadiness|commit|querycommitted"
#~ msgstr ""

#~ msgid "Flags:"
#~ msgstr ""

#~ msgid "help for lifecycle"
#~ msgstr ""

#~ msgid ""
#~ "Use \"peer lifecycle [command] --help\" "
#~ "for more information about a command."
#~ " ```"
#~ msgstr ""

#~ msgid ""
#~ "## peer lifecycle chaincode ``` Perform"
#~ " chaincode operations: "
#~ "package|install|queryinstalled|getinstalledpackage|approveformyorg|checkcommitreadiness|commit|querycommitted"
#~ msgstr ""

#~ msgid "peer lifecycle chaincode [command]"
#~ msgstr ""

#~ msgid ""
#~ "approveformyorg      Approve the chaincode "
#~ "definition for my org. checkcommitreadiness"
#~ " Check whether a chaincode definition "
#~ "is ready to be committed on a "
#~ "channel. commit               Commit the "
#~ "chaincode definition on the channel. "
#~ "getinstalledpackage  Get an installed "
#~ "chaincode package from a peer. install"
#~ "              Install a chaincode. package"
#~ "              Package a chaincode querycommitted"
#~ "       Query the committed chaincode "
#~ "definitions by channel on a peer. "
#~ "queryinstalled       Query the installed "
#~ "chaincodes on a peer."
#~ msgstr ""

#~ msgid ""
#~ "Path to file containing PEM-encoded "
#~ "trusted certificate(s) for the ordering "
#~ "endpoint"
#~ msgstr ""

#~ msgid ""
#~ "Path to file containing PEM-encoded "
#~ "X509 public key to use for mutual"
#~ " TLS communication with the orderer "
#~ "endpoint"
#~ msgstr ""

#~ msgid "Use mutual TLS when communicating with the orderer endpoint"
#~ msgstr ""

#~ msgid "Timeout for client to connect (default 3s)"
#~ msgstr ""

#~ msgid ""
#~ "help for chaincode --keyfile string"
#~ "                      Path to file containing "
#~ "PEM-encoded private key to use for"
#~ " mutual TLS communication with the "
#~ "orderer endpoint"
#~ msgstr ""

#~ msgid ""
#~ "Ordering service endpoint "
#~ "--ordererTLSHostnameOverride string   The hostname"
#~ " override to use when validating the"
#~ " TLS connection to the orderer. --tls"
#~ "                                 Use TLS when "
#~ "communicating with the orderer endpoint"
#~ msgstr ""

#~ msgid ""
#~ "Use \"peer lifecycle chaincode [command] "
#~ "--help\" for more information about a"
#~ " command. ```"
#~ msgstr ""

#~ msgid ""
#~ "## peer lifecycle chaincode package ```"
#~ " Package a chaincode and write the"
#~ " package to a file."
#~ msgstr ""

#~ msgid "peer lifecycle chaincode package [outputfile] [flags]"
#~ msgstr ""

#~ msgid ""
#~ "The fully qualified path to the "
#~ "connection profile that provides the "
#~ "necessary connection information for the "
#~ "network. Note: currently only supported "
#~ "for providing peer connection information"
#~ msgstr ""

#~ msgid ""
#~ "help for package --label string"
#~ "                   The package label contains "
#~ "a human-readable description of the "
#~ "package"
#~ msgstr ""

#~ msgid "Language the chaincode is written in (default \"golang\")"
#~ msgstr ""

#~ msgid ""
#~ "Path to the chaincode --peerAddresses "
#~ "stringArray      The addresses of the "
#~ "peers to connect to --tlsRootCertFiles "
#~ "stringArray   If TLS is enabled, the "
#~ "paths to the TLS root cert files"
#~ " of the peers to connect to. "
#~ "The order and number of certs "
#~ "specified should match the --peerAddresses "
#~ "flag"
#~ msgstr ""

#~ msgid "Global Flags:"
#~ msgstr ""

#~ msgid ""
#~ "Path to file containing PEM-encoded "
#~ "private key to use for mutual TLS"
#~ " communication with the orderer endpoint"
#~ msgstr ""

#~ msgid "```"
#~ msgstr ""

#~ msgid "## peer lifecycle chaincode install ``` Install a chaincode on a peer."
#~ msgstr ""

#~ msgid "peer lifecycle chaincode install [flags]"
#~ msgstr ""

#~ msgid ""
#~ "help for install --peerAddresses stringArray"
#~ "      The addresses of the peers to"
#~ " connect to --tlsRootCertFiles stringArray   "
#~ "If TLS is enabled, the paths to"
#~ " the TLS root cert files of the"
#~ " peers to connect to. The order "
#~ "and number of certs specified should "
#~ "match the --peerAddresses flag"
#~ msgstr ""

#~ msgid ""
#~ "## peer lifecycle chaincode queryinstalled "
#~ "``` Query the installed chaincodes on"
#~ " a peer."
#~ msgstr ""

#~ msgid "peer lifecycle chaincode queryinstalled [flags]"
#~ msgstr ""

#~ msgid "help for queryinstalled"
#~ msgstr ""

#~ msgid ""
#~ "The output format for query results. "
#~ "Default is human-readable plain-text."
#~ " json is currently the only supported"
#~ " format. --peerAddresses stringArray      The "
#~ "addresses of the peers to connect "
#~ "to --tlsRootCertFiles stringArray   If TLS "
#~ "is enabled, the paths to the TLS"
#~ " root cert files of the peers "
#~ "to connect to. The order and "
#~ "number of certs specified should match"
#~ " the --peerAddresses flag"
#~ msgstr ""

#~ msgid ""
#~ "## peer lifecycle chaincode "
#~ "getinstalledpackage ``` Get an installed "
#~ "chaincode package from a peer."
#~ msgstr ""

#~ msgid "peer lifecycle chaincode getinstalledpackage [outputfile] [flags]"
#~ msgstr ""

#~ msgid ""
#~ "help for getinstalledpackage --output-"
#~ "directory string        The output directory"
#~ " to use when writing a chaincode "
#~ "install package to disk. Default is "
#~ "the current working directory. --package-"
#~ "id string              The identifier of "
#~ "the chaincode install package --peerAddresses"
#~ " stringArray      The addresses of the "
#~ "peers to connect to --tlsRootCertFiles "
#~ "stringArray   If TLS is enabled, the "
#~ "paths to the TLS root cert files"
#~ " of the peers to connect to. "
#~ "The order and number of certs "
#~ "specified should match the --peerAddresses "
#~ "flag"
#~ msgstr ""

#~ msgid ""
#~ "## peer lifecycle chaincode approveformyorg"
#~ " ``` Approve the chaincode definition "
#~ "for my organization."
#~ msgstr ""

#~ msgid "peer lifecycle chaincode approveformyorg [flags]"
#~ msgstr ""

#~ msgid ""
#~ "The endorsement policy associated to "
#~ "this chaincode specified as a channel"
#~ " config policy reference"
#~ msgstr ""

#~ msgid ""
#~ "The channel on which this command "
#~ "should be executed --collections-config "
#~ "string      The fully qualified path to"
#~ " the collection JSON file including "
#~ "the file name --connectionProfile string"
#~ "       The fully qualified path to "
#~ "the connection profile that provides the"
#~ " necessary connection information for the"
#~ " network. Note: currently only supported"
#~ " for providing peer connection information"
#~ msgstr ""

#~ msgid "The name of the endorsement plugin to be used for this chaincode"
#~ msgstr ""

#~ msgid ""
#~ "help for approveformyorg --init-required"
#~ "                  Whether the chaincode requires"
#~ " invoking 'init'"
#~ msgstr ""

#~ msgid ""
#~ "Name of the chaincode --package-id "
#~ "string              The identifier of the "
#~ "chaincode install package --peerAddresses "
#~ "stringArray      The addresses of the "
#~ "peers to connect to --sequence int"
#~ "                   The sequence number of "
#~ "the chaincode definition for the channel"
#~ " (default 1) --signature-policy string"
#~ "        The endorsement policy associated "
#~ "to this chaincode specified as a "
#~ "signature policy --tlsRootCertFiles stringArray"
#~ "   If TLS is enabled, the paths "
#~ "to the TLS root cert files of "
#~ "the peers to connect to. The order"
#~ " and number of certs specified should"
#~ " match the --peerAddresses flag"
#~ msgstr ""

#~ msgid "The name of the validation plugin to be used for this chaincode"
#~ msgstr ""

#~ msgid ""
#~ "Version of the chaincode --waitForEvent"
#~ "                   Whether to wait for the"
#~ " event from each peer's deliver "
#~ "filtered service signifying that the "
#~ "transaction has been committed successfully"
#~ " (default true) --waitForEventTimeout duration"
#~ "   Time to wait for the event "
#~ "from each peer's deliver filtered "
#~ "service signifying that the 'invoke' "
#~ "transaction has been committed successfully"
#~ " (default 30s)"
#~ msgstr ""

#~ msgid ""
#~ "## peer lifecycle chaincode "
#~ "checkcommitreadiness ``` Check whether a "
#~ "chaincode definition is ready to be "
#~ "committed on a channel."
#~ msgstr ""

#~ msgid "peer lifecycle chaincode checkcommitreadiness [flags]"
#~ msgstr ""

#~ msgid ""
#~ "help for checkcommitreadiness --init-required"
#~ "                  Whether the chaincode requires"
#~ " invoking 'init'"
#~ msgstr ""

#~ msgid "Name of the chaincode"
#~ msgstr ""

#~ msgid ""
#~ "The output format for query results. "
#~ "Default is human-readable plain-text."
#~ " json is currently the only supported"
#~ " format. --peerAddresses stringArray      The "
#~ "addresses of the peers to connect "
#~ "to --sequence int                   The "
#~ "sequence number of the chaincode "
#~ "definition for the channel (default 1)"
#~ " --signature-policy string        The "
#~ "endorsement policy associated to this "
#~ "chaincode specified as a signature "
#~ "policy --tlsRootCertFiles stringArray   If TLS"
#~ " is enabled, the paths to the "
#~ "TLS root cert files of the peers"
#~ " to connect to. The order and "
#~ "number of certs specified should match"
#~ " the --peerAddresses flag"
#~ msgstr ""

#~ msgid "Version of the chaincode"
#~ msgstr ""

#~ msgid ""
#~ "## peer lifecycle chaincode commit ```"
#~ " Commit the chaincode definition on "
#~ "the channel."
#~ msgstr ""

#~ msgid "peer lifecycle chaincode commit [flags]"
#~ msgstr ""

#~ msgid ""
#~ "help for commit --init-required"
#~ "                  Whether the chaincode requires"
#~ " invoking 'init'"
#~ msgstr ""

#~ msgid ""
#~ "Name of the chaincode --peerAddresses "
#~ "stringArray      The addresses of the "
#~ "peers to connect to --sequence int"
#~ "                   The sequence number of "
#~ "the chaincode definition for the channel"
#~ " (default 1) --signature-policy string"
#~ "        The endorsement policy associated "
#~ "to this chaincode specified as a "
#~ "signature policy --tlsRootCertFiles stringArray"
#~ "   If TLS is enabled, the paths "
#~ "to the TLS root cert files of "
#~ "the peers to connect to. The order"
#~ " and number of certs specified should"
#~ " match the --peerAddresses flag"
#~ msgstr ""

#~ msgid ""
#~ "## peer lifecycle chaincode querycommitted "
#~ "``` Query the committed chaincode "
#~ "definitions by channel on a peer. "
#~ "Optional: provide a chaincode name to"
#~ " query a specific definition."
#~ msgstr ""

#~ msgid "peer lifecycle chaincode querycommitted [flags]"
#~ msgstr ""

#~ msgid ""
#~ "The channel on which this command "
#~ "should be executed --connectionProfile string"
#~ "       The fully qualified path to "
#~ "the connection profile that provides the"
#~ " necessary connection information for the"
#~ " network. Note: currently only supported"
#~ " for providing peer connection information"
#~ msgstr ""

#~ msgid "help for querycommitted"
#~ msgstr ""

#~ msgid "## Example Usage"
#~ msgstr ""

#~ msgid "### peer lifecycle chaincode package example"
#~ msgstr ""

#~ msgid ""
#~ "A chaincode needs to be packaged "
#~ "before it can be installed on your"
#~ " peers. This example uses the `peer"
#~ " lifecycle chaincode package` command to"
#~ " package a Go chaincode."
#~ msgstr ""

#~ msgid ""
#~ "Use the `--label` flag to provide "
#~ "a chaincode package label of `myccv1`"
#~ " that your organization will use to"
#~ " identify the package."
#~ msgstr ""

#~ msgid ""
#~ "``` peer lifecycle chaincode package "
#~ "mycc.tar.gz --path github.com/hyperledger/fabric-"
#~ "samples/chaincode/abstore/go/ --lang golang --label"
#~ " myccv1 ```"
#~ msgstr ""

#~ msgid "### peer lifecycle chaincode install example"
#~ msgstr ""

#~ msgid ""
#~ "After the chaincode is packaged, you "
#~ "can use the `peer chaincode install` "
#~ "command to install the chaincode on "
#~ "your peers."
#~ msgstr ""

#~ msgid ""
#~ "Install the `mycc.tar.gz ` package on"
#~ " `peer0.org1.example.com:7051` (the peer defined"
#~ " by `--peerAddresses`)."
#~ msgstr ""

#~ msgid ""
#~ "``` peer lifecycle chaincode install "
#~ "mycc.tar.gz --peerAddresses peer0.org1.example.com:7051"
#~ " ``` If successful, the command will"
#~ " return the package identifier. The "
#~ "package ID is the package label "
#~ "combined with a hash of the "
#~ "chaincode package taken by the peer. "
#~ "``` 2019-03-13 13:48:53.691 UTC "
#~ "[cli.lifecycle.chaincode] submitInstallProposal -> "
#~ "INFO 001 Installed remotely: "
#~ "response:<status:200 "
#~ "payload:\"\\nEmycc:ebd89878c2bbccf62f68c36072626359376aa83c36435a058d453e8dbfd894cc\""
#~ " > 2019-03-13 13:48:53.691 UTC "
#~ "[cli.lifecycle.chaincode] submitInstallProposal -> "
#~ "INFO 002 Chaincode code package "
#~ "identifier: "
#~ "mycc:a7ca45a7cc85f1d89c905b775920361ed089a364e12a9b6d55ba75c965ddd6a9"
#~ " ```"
#~ msgstr ""

#~ msgid "### peer lifecycle chaincode queryinstalled example"
#~ msgstr ""

#~ msgid ""
#~ "You need to use the chaincode "
#~ "package identifier to approve a "
#~ "chaincode definition for your organization."
#~ " You can find the package ID "
#~ "for the chaincodes you have installed"
#~ " by using the `peer lifecycle "
#~ "chaincode queryinstalled` command:"
#~ msgstr ""

#~ msgid ""
#~ "``` peer lifecycle chaincode queryinstalled"
#~ " --peerAddresses peer0.org1.example.com:7051 ```"
#~ msgstr ""

#~ msgid ""
#~ "``` Get installed chaincodes on peer:"
#~ " Package ID: "
#~ "myccv1:a7ca45a7cc85f1d89c905b775920361ed089a364e12a9b6d55ba75c965ddd6a9,"
#~ " Label: myccv1 ```"
#~ msgstr ""

#~ msgid ""
#~ "You can also use the `--output` "
#~ "flag to have the CLI format the"
#~ " output as JSON."
#~ msgstr ""

#~ msgid ""
#~ "``` peer lifecycle chaincode queryinstalled"
#~ " --peerAddresses peer0.org1.example.com:7051 --output"
#~ " json ```"
#~ msgstr ""

#~ msgid "``` {"
#~ msgstr ""

#~ msgid "\"installed_chaincodes\": ["
#~ msgstr ""

#~ msgid "{"
#~ msgstr ""

#~ msgid ""
#~ "\"package_id\": "
#~ "\"mycc_1:aab9981fa5649cfe25369fce7bb5086a69672a631e4f95c4af1b5198fe9f845b\","
#~ " \"label\": \"mycc_1\", \"references\": {"
#~ msgstr ""

#~ msgid "\"mychannel\": {"
#~ msgstr ""

#~ msgid "\"chaincodes\": ["
#~ msgstr ""

#~ msgid "\"name\": \"mycc\", \"version\": \"1\""
#~ msgstr ""

#~ msgid "}"
#~ msgstr ""

#~ msgid "]"
#~ msgstr ""

#~ msgid "### peer lifecycle chaincode getinstalledpackage example"
#~ msgstr ""

#~ msgid ""
#~ "You can retrieve an installed chaincode"
#~ " package from a peer using the "
#~ "`peer lifecycle chaincode getinstalledpackage` "
#~ "command. Use the package identifier "
#~ "returned by `queryinstalled`."
#~ msgstr ""

#~ msgid ""
#~ "Use the `--package-id` flag to "
#~ "pass in the chaincode package "
#~ "identifier. Use"
#~ msgstr ""

#~ msgid ""
#~ "the `--output-directory` flag to specify"
#~ " where to write the chaincode "
#~ "package. If the output directory is "
#~ "not specified, the chaincode package "
#~ "will be written in the current "
#~ "directory."
#~ msgstr ""

#~ msgid ""
#~ "``` peer lifecycle chaincode "
#~ "getinstalledpackage --package-id "
#~ "myccv1:a7ca45a7cc85f1d89c905b775920361ed089a364e12a9b6d55ba75c965ddd6a9"
#~ " --output-directory /tmp --peerAddresses "
#~ "peer0.org1.example.com:7051 ```"
#~ msgstr ""

#~ msgid "### peer lifecycle chaincode approveformyorg example"
#~ msgstr ""

#~ msgid ""
#~ "Here is an example of the `peer"
#~ " lifecycle chaincode approveformyorg` command,"
#~ " which approves the definition of a"
#~ " chaincode  named `mycc` at version "
#~ "`1.0` on channel `mychannel`."
#~ msgstr ""

#~ msgid ""
#~ "Use the `--package-id` flag to "
#~ "pass in the chaincode package "
#~ "identifier. Use the `--signature-policy` "
#~ "flag to define an endorsement policy "
#~ "for the chaincode. Use the `init-"
#~ "required` flag to request the execution"
#~ " of the `Init` function to initialize"
#~ " the chaincode."
#~ msgstr ""

#~ msgid ""
#~ "``` export "
#~ "ORDERER_CA=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example"
#~ ".com-cert.pem"
#~ msgstr ""

#~ msgid ""
#~ "peer lifecycle chaincode approveformyorg  -o"
#~ " orderer.example.com:7050 --tls --cafile "
#~ "$ORDERER_CA --channelID mychannel --name mycc"
#~ " --version 1.0 --init-required "
#~ "--package-id "
#~ "myccv1:a7ca45a7cc85f1d89c905b775920361ed089a364e12a9b6d55ba75c965ddd6a9"
#~ " --sequence 1 --signature-policy \"AND "
#~ "('Org1MSP.peer','Org2MSP.peer')\""
#~ msgstr ""

#~ msgid ""
#~ "2019-03-18 16:04:09.046 UTC "
#~ "[cli.lifecycle.chaincode] InitCmdFactory -> INFO "
#~ "001 Retrieved channel (mychannel) orderer "
#~ "endpoint: orderer.example.com:7050 2019-03-18 "
#~ "16:04:11.253 UTC [chaincodeCmd] ClientWait ->"
#~ " INFO 002 txid "
#~ "[efba188ca77889cc1c328fc98e0bb12d3ad0abcda3f84da3714471c7c1e6c13c] "
#~ "committed with status (VALID) at "
#~ "peer0.org1.example.com:7051 ```"
#~ msgstr ""

#~ msgid ""
#~ "You can also use the `--channel-"
#~ "config-policy` flag use a policy "
#~ "inside the channel configuration as the"
#~ " chaincode endorsement policy. The default"
#~ " endorsement policy is "
#~ "`Channel/Application/Endorsement`"
#~ msgstr ""

#~ msgid ""
#~ "peer lifecycle chaincode approveformyorg -o"
#~ " orderer.example.com:7050 --tls --cafile "
#~ "$ORDERER_CA --channelID mychannel --name mycc"
#~ " --version 1.0 --init-required "
#~ "--package-id "
#~ "myccv1:a7ca45a7cc85f1d89c905b775920361ed089a364e12a9b6d55ba75c965ddd6a9"
#~ " --sequence 1 --channel-config-policy "
#~ "Channel/Application/Admins"
#~ msgstr ""

#~ msgid "### peer lifecycle chaincode checkcommitreadiness example"
#~ msgstr ""

#~ msgid ""
#~ "You can check whether a chaincode "
#~ "definition is ready to be committed "
#~ "using the `peer lifecycle chaincode "
#~ "checkcommitreadiness` command, which will "
#~ "return successfully if a subsequent "
#~ "commit of the definition is expected "
#~ "to succeed. It also outputs which "
#~ "organizations have approved the chaincode "
#~ "definition. If an organization has "
#~ "approved the chaincode definition specified"
#~ " in the command, the command will "
#~ "return a value of true. You can"
#~ " use this command to learn whether"
#~ " enough channel members have approved "
#~ "a chaincode definition to meet the "
#~ "`Application/Channel/Endorsement` policy (a majority"
#~ " by default) before the definition "
#~ "can be committed to a channel."
#~ msgstr ""

#~ msgid ""
#~ "Here is an example of the `peer"
#~ " lifecycle chaincode checkcommitreadiness` "
#~ "command, which checks a chaincode named"
#~ " `mycc` at version `1.0` on channel"
#~ " `mychannel`."
#~ msgstr ""

#~ msgid ""
#~ "peer lifecycle chaincode checkcommitreadiness "
#~ "-o orderer.example.com:7050 --channelID mychannel"
#~ " --tls --cafile $ORDERER_CA --name mycc "
#~ "--version 1.0 --init-required --sequence "
#~ "1 ```"
#~ msgstr ""

#~ msgid ""
#~ "``` Chaincode definition for chaincode "
#~ "'mycc', version '1.0', sequence '1' on"
#~ " channel 'mychannel' approval status by "
#~ "org: Org1MSP: true Org2MSP: true ```"
#~ msgstr ""

#~ msgid ""
#~ "peer lifecycle chaincode checkcommitreadiness "
#~ "-o orderer.example.com:7050 --channelID mychannel"
#~ " --tls --cafile $ORDERER_CA --name mycc "
#~ "--version 1.0 --init-required --sequence "
#~ "1 --output json ```"
#~ msgstr ""

#~ msgid "\"Approvals\": {"
#~ msgstr ""

#~ msgid "\"Org1MSP\": true, \"Org2MSP\": true"
#~ msgstr ""

#~ msgid "### peer lifecycle chaincode commit example"
#~ msgstr ""

#~ msgid ""
#~ "Once a sufficient number of "
#~ "organizations approve a chaincode definition"
#~ " for their organizations (a majority "
#~ "by default), one organization can commit"
#~ " the definition the channel using the"
#~ " `peer lifecycle chaincode commit` command:"
#~ msgstr ""

#~ msgid ""
#~ "peer lifecycle chaincode commit -o "
#~ "orderer.example.com:7050 --channelID mychannel "
#~ "--name mycc --version 1.0 --sequence 1"
#~ " --init-required --tls --cafile $ORDERER_CA"
#~ " --peerAddresses peer0.org1.example.com:7051 "
#~ "--peerAddresses peer0.org2.example.com:9051"
#~ msgstr ""

#~ msgid ""
#~ "2019-03-18 16:14:27.258 UTC [chaincodeCmd] "
#~ "ClientWait -> INFO 001 txid "
#~ "[b6f657a14689b27d69a50f39590b3949906b5a426f9d7f0dcee557f775e17882] "
#~ "committed with status (VALID) at "
#~ "peer0.org2.example.com:9051 2019-03-18 16:14:27.321 "
#~ "UTC [chaincodeCmd] ClientWait -> INFO "
#~ "002 txid "
#~ "[b6f657a14689b27d69a50f39590b3949906b5a426f9d7f0dcee557f775e17882] "
#~ "committed with status (VALID) at "
#~ "peer0.org1.example.com:7051 ```"
#~ msgstr ""

#~ msgid "### peer lifecycle chaincode querycommitted example"
#~ msgstr ""

#~ msgid ""
#~ "You can query the chaincode definitions"
#~ " that have been committed to a "
#~ "channel by using the `peer lifecycle "
#~ "chaincode querycommitted` command. You can "
#~ "use this command to query the "
#~ "current definition sequence number before "
#~ "upgrading a chaincode."
#~ msgstr ""

#~ msgid ""
#~ "peer lifecycle chaincode querycommitted -o "
#~ "orderer.example.com:7050 --channelID mychannel "
#~ "--name mycc --tls --cafile $ORDERER_CA "
#~ "--peerAddresses peer0.org1.example.com:7051"
#~ msgstr ""

#~ msgid ""
#~ "Committed chaincode definition for chaincode"
#~ " 'mycc' on channel 'mychannel': Version:"
#~ " 1, Sequence: 1, Endorsement Plugin: "
#~ "escc, Validation Plugin: vscc Approvals: "
#~ "[Org1MSP: true, Org2MSP: true] ```"
#~ msgstr ""

#~ msgid ""
#~ "You can also specify just the "
#~ "channel name in order to query all"
#~ " chaincode"
#~ msgstr ""

#~ msgid "definitions on that channel."
#~ msgstr ""

#~ msgid ""
#~ "peer lifecycle chaincode querycommitted -o "
#~ "orderer.example.com:7050 --channelID mychannel --tls"
#~ " --cafile $ORDERER_CA --peerAddresses "
#~ "peer0.org1.example.com:7051"
#~ msgstr ""

#~ msgid ""
#~ "Committed chaincode definitions on channel "
#~ "'mychannel': Name: mycc, Version: 1, "
#~ "Sequence: 1, Endorsement Plugin: escc, "
#~ "Validation Plugin: vscc Name: yourcc, "
#~ "Version: 2, Sequence: 3, Endorsement "
#~ "Plugin: escc, Validation Plugin: vscc "
#~ "```"
#~ msgstr ""

#~ msgid ""
#~ "peer lifecycle chaincode querycommitted -o "
#~ "orderer.example.com:7050 --channelID mychannel "
#~ "--name mycc --tls --cafile $ORDERER_CA "
#~ "--peerAddresses peer0.org1.example.com:7051 --output "
#~ "json ```"
#~ msgstr ""

#~ msgid ""
#~ "\"sequence\": 1, \"version\": \"1\", "
#~ "\"endorsement_plugin\": \"escc\", \"validation_plugin\":"
#~ " \"vscc\", \"validation_parameter\": "
#~ "\"EiAvQ2hhbm5lbC9BcHBsaWNhdGlvbi9FbmRvcnNlbWVudA==\", "
#~ "\"collections\": {}, \"init_required\": true, "
#~ "\"approvals\": {"
#~ msgstr ""

#~ msgid ""
#~ "The `validation_parameter` is base64 encoded."
#~ " An example of the command to "
#~ "decode it is as follows."
#~ msgstr ""

#~ msgid "``` echo EiAvQ2hhbm5lbC9BcHBsaWNhdGlvbi9FbmRvcnNlbWVudA== | base64 -d"
#~ msgstr ""

#~ msgid "/Channel/Application/Endorsement"
#~ msgstr ""

#~ msgid ""
#~ "peer lifecycle chaincode querycommitted -o "
#~ "orderer.example.com:7050 --channelID mychannel --tls"
#~ " --cafile $ORDERER_CA --peerAddresses "
#~ "peer0.org1.example.com:7051 --output json ```"
#~ msgstr ""

#~ msgid "\"chaincode_definitions\": ["
#~ msgstr ""

#~ msgid ""
#~ "\"name\": \"mycc\", \"sequence\": 1, "
#~ "\"version\": \"1\", \"endorsement_plugin\": "
#~ "\"escc\", \"validation_plugin\": \"vscc\", "
#~ "\"validation_parameter\": "
#~ "\"EiAvQ2hhbm5lbC9BcHBsaWNhdGlvbi9FbmRvcnNlbWVudA==\", "
#~ "\"collections\": {}, \"init_required\": true"
#~ msgstr ""

#~ msgid "}, {"
#~ msgstr ""

#~ msgid ""
#~ "\"name\": \"yourcc\", \"sequence\": 3, "
#~ "\"version\": \"2\", \"endorsement_plugin\": "
#~ "\"escc\", \"validation_plugin\": \"vscc\", "
#~ "\"validation_parameter\": "
#~ "\"EiAvQ2hhbm5lbC9BcHBsaWNhdGlvbi9FbmRvcnNlbWVudA==\", "
#~ "\"collections\": {}"
#~ msgstr ""

